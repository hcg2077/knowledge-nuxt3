{
  "resolvedId": "F:/workSpace2024/knowledge-nuxt3/node_modules/highlight.js/lib/languages/json.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*\nLanguage: JSON\nDescription: JSON (JavaScript Object Notation) is a lightweight data-interchange format.\nAuthor: Ivan Sagalaev <maniac@softwaremaniacs.org>\nWebsite: http://www.json.org\nCategory: common, protocols, web\n*/\n\nfunction json(hljs) {\n  const ATTRIBUTE = {\n    className: 'attr',\n    begin: /\"(\\\\.|[^\\\\\"\\r\\n])*\"(?=\\s*:)/,\n    relevance: 1.01\n  };\n  const PUNCTUATION = {\n    match: /[{}[\\],:]/,\n    className: \"punctuation\",\n    relevance: 0\n  };\n  const LITERALS = [\n    \"true\",\n    \"false\",\n    \"null\"\n  ];\n  // NOTE: normally we would rely on `keywords` for this but using a mode here allows us\n  // - to use the very tight `illegal: \\S` rule later to flag any other character\n  // - as illegal indicating that despite looking like JSON we do not truly have\n  // - JSON and thus improve false-positively greatly since JSON will try and claim\n  // - all sorts of JSON looking stuff\n  const LITERALS_MODE = {\n    scope: \"literal\",\n    beginKeywords: LITERALS.join(\" \"),\n  };\n\n  return {\n    name: 'JSON',\n    keywords:{\n      literal: LITERALS,\n    },\n    contains: [\n      ATTRIBUTE,\n      PUNCTUATION,\n      hljs.QUOTE_STRING_MODE,\n      LITERALS_MODE,\n      hljs.C_NUMBER_MODE,\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE\n    ],\n    illegal: '\\\\S'\n  };\n}\n\nmodule.exports = json;\n",
      "start": 1699633500948,
      "end": 1699633501052,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1699633501052,
      "end": 1699633501052,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1699633501052,
      "end": 1699633501052,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1699633501052,
      "end": 1699633501052,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1699633501052,
      "end": 1699633501052,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1699633501052,
      "end": 1699633501052,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1699633501052,
      "end": 1699633501052,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1699633501053,
      "end": 1699633501053,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1699633501053,
      "end": 1699633501053,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1699633501053,
      "end": 1699633501053,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1699633501053,
      "end": 1699633501053,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1699633501053,
      "end": 1699633501053,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1699633501053,
      "end": 1699633501053,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1699633501053,
      "end": 1699633501053,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1699633501053,
      "end": 1699633501053,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1699633501053,
      "end": 1699633501053,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1699633501053,
      "end": 1699633501053,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1699633501053,
      "end": 1699633501053,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1699633501053,
      "end": 1699633501053,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1699633501053,
      "end": 1699633501053,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1699633501053,
      "end": 1699633501053,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "result": "/*\nLanguage: JSON\nDescription: JSON (JavaScript Object Notation) is a lightweight data-interchange format.\nAuthor: Ivan Sagalaev <maniac@softwaremaniacs.org>\nWebsite: http://www.json.org\nCategory: common, protocols, web\n*/\nimport * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\n\nvar json_1;\nvar hasRequiredJson;\n\nfunction requireJson () {\n\tif (hasRequiredJson) return json_1;\n\thasRequiredJson = 1;\n\tfunction json(hljs) {\n\t  const ATTRIBUTE = {\n\t    className: 'attr',\n\t    begin: /\"(\\\\.|[^\\\\\"\\r\\n])*\"(?=\\s*:)/,\n\t    relevance: 1.01\n\t  };\n\t  const PUNCTUATION = {\n\t    match: /[{}[\\],:]/,\n\t    className: \"punctuation\",\n\t    relevance: 0\n\t  };\n\t  const LITERALS = [\n\t    \"true\",\n\t    \"false\",\n\t    \"null\"\n\t  ];\n\t  // NOTE: normally we would rely on `keywords` for this but using a mode here allows us\n\t  // - to use the very tight `illegal: \\S` rule later to flag any other character\n\t  // - as illegal indicating that despite looking like JSON we do not truly have\n\t  // - JSON and thus improve false-positively greatly since JSON will try and claim\n\t  // - all sorts of JSON looking stuff\n\t  const LITERALS_MODE = {\n\t    scope: \"literal\",\n\t    beginKeywords: LITERALS.join(\" \"),\n\t  };\n\n\t  return {\n\t    name: 'JSON',\n\t    keywords:{\n\t      literal: LITERALS,\n\t    },\n\t    contains: [\n\t      ATTRIBUTE,\n\t      PUNCTUATION,\n\t      hljs.QUOTE_STRING_MODE,\n\t      LITERALS_MODE,\n\t      hljs.C_NUMBER_MODE,\n\t      hljs.C_LINE_COMMENT_MODE,\n\t      hljs.C_BLOCK_COMMENT_MODE\n\t    ],\n\t    illegal: '\\\\S'\n\t  };\n\t}\n\n\tjson_1 = json;\n\treturn json_1;\n}\n\nexport { requireJson as __require };",
      "start": 1699633501053,
      "end": 1699633501054,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "file": null,
        "sources": [
          null
        ],
        "sourcesContent": [
          null
        ],
        "names": [],
        "mappings": ";;;;;;;;;;;;;;;CAQA,SAAS,IAAI,CAAC,IAAI,EAAE;CACpB,EAAE,MAAM,SAAS,GAAG;CACpB,IAAI,SAAS,EAAE,MAAM;CACrB,IAAI,KAAK,EAAE,6BAA6B;CACxC,IAAI,SAAS,EAAE,IAAI;CACnB,GAAG,CAAC;CACJ,EAAE,MAAM,WAAW,GAAG;CACtB,IAAI,KAAK,EAAE,WAAW;CACtB,IAAI,SAAS,EAAE,aAAa;CAC5B,IAAI,SAAS,EAAE,CAAC;CAChB,GAAG,CAAC;CACJ,EAAE,MAAM,QAAQ,GAAG;CACnB,IAAI,MAAM;CACV,IAAI,OAAO;CACX,IAAI,MAAM;CACV,GAAG,CAAC;CACJ;CACA;CACA;CACA;CACA;CACA,EAAE,MAAM,aAAa,GAAG;CACxB,IAAI,KAAK,EAAE,SAAS;CACpB,IAAI,aAAa,EAAE,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC;CACrC,GAAG,CAAC;AACJ;CACA,EAAE,OAAO;CACT,IAAI,IAAI,EAAE,MAAM;CAChB,IAAI,QAAQ,CAAC;CACb,MAAM,OAAO,EAAE,QAAQ;CACvB,KAAK;CACL,IAAI,QAAQ,EAAE;CACd,MAAM,SAAS;CACf,MAAM,WAAW;CACjB,MAAM,IAAI,CAAC,iBAAiB;CAC5B,MAAM,aAAa;CACnB,MAAM,IAAI,CAAC,aAAa;CACxB,MAAM,IAAI,CAAC,mBAAmB;CAC9B,MAAM,IAAI,CAAC,oBAAoB;CAC/B,KAAK;CACL,IAAI,OAAO,EAAE,KAAK;CAClB,GAAG,CAAC;CACJ,CAAC;AACD;AACA,OAAc,GAAG,IAAI"
      }
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1699633501054,
      "end": 1699633501054,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1699633501054,
      "end": 1699633501054,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1699633501054,
      "end": 1699633501054,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1699633501054,
      "end": 1699633501054,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1699633501054,
      "end": 1699633501088,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1699633501088,
      "end": 1699633501088,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1699633501088,
      "end": 1699633501088,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1699633501088,
      "end": 1699633501088,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1699633501088,
      "end": 1699633501088,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1699633501088,
      "end": 1699633501088,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1699633501088,
      "end": 1699633501088,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1699633501088,
      "end": 1699633501088,
      "order": "normal"
    }
  ]
}
