{
  "resolvedId": "F:/workSpace2024/knowledge-nuxt3/node_modules/crypto-js/x64-core.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": ";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function (undefined) {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var Base = C_lib.Base;\n\t    var X32WordArray = C_lib.WordArray;\n\n\t    /**\n\t     * x64 namespace.\n\t     */\n\t    var C_x64 = C.x64 = {};\n\n\t    /**\n\t     * A 64-bit word.\n\t     */\n\t    var X64Word = C_x64.Word = Base.extend({\n\t        /**\n\t         * Initializes a newly created 64-bit word.\n\t         *\n\t         * @param {number} high The high 32 bits.\n\t         * @param {number} low The low 32 bits.\n\t         *\n\t         * @example\n\t         *\n\t         *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);\n\t         */\n\t        init: function (high, low) {\n\t            this.high = high;\n\t            this.low = low;\n\t        }\n\n\t        /**\n\t         * Bitwise NOTs this word.\n\t         *\n\t         * @return {X64Word} A new x64-Word object after negating.\n\t         *\n\t         * @example\n\t         *\n\t         *     var negated = x64Word.not();\n\t         */\n\t        // not: function () {\n\t            // var high = ~this.high;\n\t            // var low = ~this.low;\n\n\t            // return X64Word.create(high, low);\n\t        // },\n\n\t        /**\n\t         * Bitwise ANDs this word with the passed word.\n\t         *\n\t         * @param {X64Word} word The x64-Word to AND with this word.\n\t         *\n\t         * @return {X64Word} A new x64-Word object after ANDing.\n\t         *\n\t         * @example\n\t         *\n\t         *     var anded = x64Word.and(anotherX64Word);\n\t         */\n\t        // and: function (word) {\n\t            // var high = this.high & word.high;\n\t            // var low = this.low & word.low;\n\n\t            // return X64Word.create(high, low);\n\t        // },\n\n\t        /**\n\t         * Bitwise ORs this word with the passed word.\n\t         *\n\t         * @param {X64Word} word The x64-Word to OR with this word.\n\t         *\n\t         * @return {X64Word} A new x64-Word object after ORing.\n\t         *\n\t         * @example\n\t         *\n\t         *     var ored = x64Word.or(anotherX64Word);\n\t         */\n\t        // or: function (word) {\n\t            // var high = this.high | word.high;\n\t            // var low = this.low | word.low;\n\n\t            // return X64Word.create(high, low);\n\t        // },\n\n\t        /**\n\t         * Bitwise XORs this word with the passed word.\n\t         *\n\t         * @param {X64Word} word The x64-Word to XOR with this word.\n\t         *\n\t         * @return {X64Word} A new x64-Word object after XORing.\n\t         *\n\t         * @example\n\t         *\n\t         *     var xored = x64Word.xor(anotherX64Word);\n\t         */\n\t        // xor: function (word) {\n\t            // var high = this.high ^ word.high;\n\t            // var low = this.low ^ word.low;\n\n\t            // return X64Word.create(high, low);\n\t        // },\n\n\t        /**\n\t         * Shifts this word n bits to the left.\n\t         *\n\t         * @param {number} n The number of bits to shift.\n\t         *\n\t         * @return {X64Word} A new x64-Word object after shifting.\n\t         *\n\t         * @example\n\t         *\n\t         *     var shifted = x64Word.shiftL(25);\n\t         */\n\t        // shiftL: function (n) {\n\t            // if (n < 32) {\n\t                // var high = (this.high << n) | (this.low >>> (32 - n));\n\t                // var low = this.low << n;\n\t            // } else {\n\t                // var high = this.low << (n - 32);\n\t                // var low = 0;\n\t            // }\n\n\t            // return X64Word.create(high, low);\n\t        // },\n\n\t        /**\n\t         * Shifts this word n bits to the right.\n\t         *\n\t         * @param {number} n The number of bits to shift.\n\t         *\n\t         * @return {X64Word} A new x64-Word object after shifting.\n\t         *\n\t         * @example\n\t         *\n\t         *     var shifted = x64Word.shiftR(7);\n\t         */\n\t        // shiftR: function (n) {\n\t            // if (n < 32) {\n\t                // var low = (this.low >>> n) | (this.high << (32 - n));\n\t                // var high = this.high >>> n;\n\t            // } else {\n\t                // var low = this.high >>> (n - 32);\n\t                // var high = 0;\n\t            // }\n\n\t            // return X64Word.create(high, low);\n\t        // },\n\n\t        /**\n\t         * Rotates this word n bits to the left.\n\t         *\n\t         * @param {number} n The number of bits to rotate.\n\t         *\n\t         * @return {X64Word} A new x64-Word object after rotating.\n\t         *\n\t         * @example\n\t         *\n\t         *     var rotated = x64Word.rotL(25);\n\t         */\n\t        // rotL: function (n) {\n\t            // return this.shiftL(n).or(this.shiftR(64 - n));\n\t        // },\n\n\t        /**\n\t         * Rotates this word n bits to the right.\n\t         *\n\t         * @param {number} n The number of bits to rotate.\n\t         *\n\t         * @return {X64Word} A new x64-Word object after rotating.\n\t         *\n\t         * @example\n\t         *\n\t         *     var rotated = x64Word.rotR(7);\n\t         */\n\t        // rotR: function (n) {\n\t            // return this.shiftR(n).or(this.shiftL(64 - n));\n\t        // },\n\n\t        /**\n\t         * Adds this word with the passed word.\n\t         *\n\t         * @param {X64Word} word The x64-Word to add with this word.\n\t         *\n\t         * @return {X64Word} A new x64-Word object after adding.\n\t         *\n\t         * @example\n\t         *\n\t         *     var added = x64Word.add(anotherX64Word);\n\t         */\n\t        // add: function (word) {\n\t            // var low = (this.low + word.low) | 0;\n\t            // var carry = (low >>> 0) < (this.low >>> 0) ? 1 : 0;\n\t            // var high = (this.high + word.high + carry) | 0;\n\n\t            // return X64Word.create(high, low);\n\t        // }\n\t    });\n\n\t    /**\n\t     * An array of 64-bit words.\n\t     *\n\t     * @property {Array} words The array of CryptoJS.x64.Word objects.\n\t     * @property {number} sigBytes The number of significant bytes in this word array.\n\t     */\n\t    var X64WordArray = C_x64.WordArray = Base.extend({\n\t        /**\n\t         * Initializes a newly created word array.\n\t         *\n\t         * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.\n\t         * @param {number} sigBytes (Optional) The number of significant bytes in the words.\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.x64.WordArray.create();\n\t         *\n\t         *     var wordArray = CryptoJS.x64.WordArray.create([\n\t         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),\n\t         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)\n\t         *     ]);\n\t         *\n\t         *     var wordArray = CryptoJS.x64.WordArray.create([\n\t         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),\n\t         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)\n\t         *     ], 10);\n\t         */\n\t        init: function (words, sigBytes) {\n\t            words = this.words = words || [];\n\n\t            if (sigBytes != undefined) {\n\t                this.sigBytes = sigBytes;\n\t            } else {\n\t                this.sigBytes = words.length * 8;\n\t            }\n\t        },\n\n\t        /**\n\t         * Converts this 64-bit word array to a 32-bit word array.\n\t         *\n\t         * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.\n\t         *\n\t         * @example\n\t         *\n\t         *     var x32WordArray = x64WordArray.toX32();\n\t         */\n\t        toX32: function () {\n\t            // Shortcuts\n\t            var x64Words = this.words;\n\t            var x64WordsLength = x64Words.length;\n\n\t            // Convert\n\t            var x32Words = [];\n\t            for (var i = 0; i < x64WordsLength; i++) {\n\t                var x64Word = x64Words[i];\n\t                x32Words.push(x64Word.high);\n\t                x32Words.push(x64Word.low);\n\t            }\n\n\t            return X32WordArray.create(x32Words, this.sigBytes);\n\t        },\n\n\t        /**\n\t         * Creates a copy of this word array.\n\t         *\n\t         * @return {X64WordArray} The clone.\n\t         *\n\t         * @example\n\t         *\n\t         *     var clone = x64WordArray.clone();\n\t         */\n\t        clone: function () {\n\t            var clone = Base.clone.call(this);\n\n\t            // Clone \"words\" array\n\t            var words = clone.words = this.words.slice(0);\n\n\t            // Clone each X64Word object\n\t            var wordsLength = words.length;\n\t            for (var i = 0; i < wordsLength; i++) {\n\t                words[i] = words[i].clone();\n\t            }\n\n\t            return clone;\n\t        }\n\t    });\n\t}());\n\n\n\treturn CryptoJS;\n\n}));",
      "start": 1699633499853,
      "end": 1699633499894,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1699633499894,
      "end": 1699633499894,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1699633499895,
      "end": 1699633499895,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1699633499895,
      "end": 1699633499895,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1699633499895,
      "end": 1699633499895,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1699633499895,
      "end": 1699633499895,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1699633499895,
      "end": 1699633499895,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1699633499895,
      "end": 1699633499895,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1699633499895,
      "end": 1699633499895,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1699633499895,
      "end": 1699633499895,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1699633499895,
      "end": 1699633499895,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1699633499896,
      "end": 1699633499896,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1699633499896,
      "end": 1699633499896,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1699633499896,
      "end": 1699633499896,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1699633499896,
      "end": 1699633499896,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1699633499896,
      "end": 1699633499896,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1699633499896,
      "end": 1699633499896,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1699633499896,
      "end": 1699633499896,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1699633499896,
      "end": 1699633499896,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1699633499896,
      "end": 1699633499896,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1699633499896,
      "end": 1699633499896,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "result": "import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __module as x64CoreModule } from \"\\u0000F:/workSpace2024/knowledge-nuxt3/node_modules/crypto-js/x64-core.js?commonjs-module\";\nvar x64Core = x64CoreModule.exports;\nimport { __require as require$$0 } from \"\\u0000F:/workSpace2024/knowledge-nuxt3/node_modules/crypto-js/core.js?commonjs-wrapped\";\n\nvar hasRequiredX64Core;\n\nfunction requireX64Core () {\n\tif (hasRequiredX64Core) return x64CoreModule.exports;\n\thasRequiredX64Core = 1;\n\t(function (module, exports) {\n\t\t;(function (root, factory) {\n\t\t\tif ('object' === \"object\") {\n\t\t\t\t// CommonJS\n\t\t\t\tmodule.exports = exports = factory(require$$0());\n\t\t\t}\n\t\t\telse if (typeof undefined === \"function\" && undefined.amd) {\n\t\t\t\t// AMD\n\t\t\t\tundefined([\"./core\"], factory);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Global (browser)\n\t\t\t\tfactory(root.CryptoJS);\n\t\t\t}\n\t\t}(commonjsHelpers.commonjsGlobal, function (CryptoJS) {\n\n\t\t\t(function (undefined) {\n\t\t\t    // Shortcuts\n\t\t\t    var C = CryptoJS;\n\t\t\t    var C_lib = C.lib;\n\t\t\t    var Base = C_lib.Base;\n\t\t\t    var X32WordArray = C_lib.WordArray;\n\n\t\t\t    /**\n\t\t\t     * x64 namespace.\n\t\t\t     */\n\t\t\t    var C_x64 = C.x64 = {};\n\n\t\t\t    /**\n\t\t\t     * A 64-bit word.\n\t\t\t     */\n\t\t\t    var X64Word = C_x64.Word = Base.extend({\n\t\t\t        /**\n\t\t\t         * Initializes a newly created 64-bit word.\n\t\t\t         *\n\t\t\t         * @param {number} high The high 32 bits.\n\t\t\t         * @param {number} low The low 32 bits.\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);\n\t\t\t         */\n\t\t\t        init: function (high, low) {\n\t\t\t            this.high = high;\n\t\t\t            this.low = low;\n\t\t\t        }\n\n\t\t\t        /**\n\t\t\t         * Bitwise NOTs this word.\n\t\t\t         *\n\t\t\t         * @return {X64Word} A new x64-Word object after negating.\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var negated = x64Word.not();\n\t\t\t         */\n\t\t\t        // not: function () {\n\t\t\t            // var high = ~this.high;\n\t\t\t            // var low = ~this.low;\n\n\t\t\t            // return X64Word.create(high, low);\n\t\t\t        // },\n\n\t\t\t        /**\n\t\t\t         * Bitwise ANDs this word with the passed word.\n\t\t\t         *\n\t\t\t         * @param {X64Word} word The x64-Word to AND with this word.\n\t\t\t         *\n\t\t\t         * @return {X64Word} A new x64-Word object after ANDing.\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var anded = x64Word.and(anotherX64Word);\n\t\t\t         */\n\t\t\t        // and: function (word) {\n\t\t\t            // var high = this.high & word.high;\n\t\t\t            // var low = this.low & word.low;\n\n\t\t\t            // return X64Word.create(high, low);\n\t\t\t        // },\n\n\t\t\t        /**\n\t\t\t         * Bitwise ORs this word with the passed word.\n\t\t\t         *\n\t\t\t         * @param {X64Word} word The x64-Word to OR with this word.\n\t\t\t         *\n\t\t\t         * @return {X64Word} A new x64-Word object after ORing.\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var ored = x64Word.or(anotherX64Word);\n\t\t\t         */\n\t\t\t        // or: function (word) {\n\t\t\t            // var high = this.high | word.high;\n\t\t\t            // var low = this.low | word.low;\n\n\t\t\t            // return X64Word.create(high, low);\n\t\t\t        // },\n\n\t\t\t        /**\n\t\t\t         * Bitwise XORs this word with the passed word.\n\t\t\t         *\n\t\t\t         * @param {X64Word} word The x64-Word to XOR with this word.\n\t\t\t         *\n\t\t\t         * @return {X64Word} A new x64-Word object after XORing.\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var xored = x64Word.xor(anotherX64Word);\n\t\t\t         */\n\t\t\t        // xor: function (word) {\n\t\t\t            // var high = this.high ^ word.high;\n\t\t\t            // var low = this.low ^ word.low;\n\n\t\t\t            // return X64Word.create(high, low);\n\t\t\t        // },\n\n\t\t\t        /**\n\t\t\t         * Shifts this word n bits to the left.\n\t\t\t         *\n\t\t\t         * @param {number} n The number of bits to shift.\n\t\t\t         *\n\t\t\t         * @return {X64Word} A new x64-Word object after shifting.\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var shifted = x64Word.shiftL(25);\n\t\t\t         */\n\t\t\t        // shiftL: function (n) {\n\t\t\t            // if (n < 32) {\n\t\t\t                // var high = (this.high << n) | (this.low >>> (32 - n));\n\t\t\t                // var low = this.low << n;\n\t\t\t            // } else {\n\t\t\t                // var high = this.low << (n - 32);\n\t\t\t                // var low = 0;\n\t\t\t            // }\n\n\t\t\t            // return X64Word.create(high, low);\n\t\t\t        // },\n\n\t\t\t        /**\n\t\t\t         * Shifts this word n bits to the right.\n\t\t\t         *\n\t\t\t         * @param {number} n The number of bits to shift.\n\t\t\t         *\n\t\t\t         * @return {X64Word} A new x64-Word object after shifting.\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var shifted = x64Word.shiftR(7);\n\t\t\t         */\n\t\t\t        // shiftR: function (n) {\n\t\t\t            // if (n < 32) {\n\t\t\t                // var low = (this.low >>> n) | (this.high << (32 - n));\n\t\t\t                // var high = this.high >>> n;\n\t\t\t            // } else {\n\t\t\t                // var low = this.high >>> (n - 32);\n\t\t\t                // var high = 0;\n\t\t\t            // }\n\n\t\t\t            // return X64Word.create(high, low);\n\t\t\t        // },\n\n\t\t\t        /**\n\t\t\t         * Rotates this word n bits to the left.\n\t\t\t         *\n\t\t\t         * @param {number} n The number of bits to rotate.\n\t\t\t         *\n\t\t\t         * @return {X64Word} A new x64-Word object after rotating.\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var rotated = x64Word.rotL(25);\n\t\t\t         */\n\t\t\t        // rotL: function (n) {\n\t\t\t            // return this.shiftL(n).or(this.shiftR(64 - n));\n\t\t\t        // },\n\n\t\t\t        /**\n\t\t\t         * Rotates this word n bits to the right.\n\t\t\t         *\n\t\t\t         * @param {number} n The number of bits to rotate.\n\t\t\t         *\n\t\t\t         * @return {X64Word} A new x64-Word object after rotating.\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var rotated = x64Word.rotR(7);\n\t\t\t         */\n\t\t\t        // rotR: function (n) {\n\t\t\t            // return this.shiftR(n).or(this.shiftL(64 - n));\n\t\t\t        // },\n\n\t\t\t        /**\n\t\t\t         * Adds this word with the passed word.\n\t\t\t         *\n\t\t\t         * @param {X64Word} word The x64-Word to add with this word.\n\t\t\t         *\n\t\t\t         * @return {X64Word} A new x64-Word object after adding.\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var added = x64Word.add(anotherX64Word);\n\t\t\t         */\n\t\t\t        // add: function (word) {\n\t\t\t            // var low = (this.low + word.low) | 0;\n\t\t\t            // var carry = (low >>> 0) < (this.low >>> 0) ? 1 : 0;\n\t\t\t            // var high = (this.high + word.high + carry) | 0;\n\n\t\t\t            // return X64Word.create(high, low);\n\t\t\t        // }\n\t\t\t    });\n\n\t\t\t    /**\n\t\t\t     * An array of 64-bit words.\n\t\t\t     *\n\t\t\t     * @property {Array} words The array of CryptoJS.x64.Word objects.\n\t\t\t     * @property {number} sigBytes The number of significant bytes in this word array.\n\t\t\t     */\n\t\t\t    var X64WordArray = C_x64.WordArray = Base.extend({\n\t\t\t        /**\n\t\t\t         * Initializes a newly created word array.\n\t\t\t         *\n\t\t\t         * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.\n\t\t\t         * @param {number} sigBytes (Optional) The number of significant bytes in the words.\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var wordArray = CryptoJS.x64.WordArray.create();\n\t\t\t         *\n\t\t\t         *     var wordArray = CryptoJS.x64.WordArray.create([\n\t\t\t         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),\n\t\t\t         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)\n\t\t\t         *     ]);\n\t\t\t         *\n\t\t\t         *     var wordArray = CryptoJS.x64.WordArray.create([\n\t\t\t         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),\n\t\t\t         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)\n\t\t\t         *     ], 10);\n\t\t\t         */\n\t\t\t        init: function (words, sigBytes) {\n\t\t\t            words = this.words = words || [];\n\n\t\t\t            if (sigBytes != undefined) {\n\t\t\t                this.sigBytes = sigBytes;\n\t\t\t            } else {\n\t\t\t                this.sigBytes = words.length * 8;\n\t\t\t            }\n\t\t\t        },\n\n\t\t\t        /**\n\t\t\t         * Converts this 64-bit word array to a 32-bit word array.\n\t\t\t         *\n\t\t\t         * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var x32WordArray = x64WordArray.toX32();\n\t\t\t         */\n\t\t\t        toX32: function () {\n\t\t\t            // Shortcuts\n\t\t\t            var x64Words = this.words;\n\t\t\t            var x64WordsLength = x64Words.length;\n\n\t\t\t            // Convert\n\t\t\t            var x32Words = [];\n\t\t\t            for (var i = 0; i < x64WordsLength; i++) {\n\t\t\t                var x64Word = x64Words[i];\n\t\t\t                x32Words.push(x64Word.high);\n\t\t\t                x32Words.push(x64Word.low);\n\t\t\t            }\n\n\t\t\t            return X32WordArray.create(x32Words, this.sigBytes);\n\t\t\t        },\n\n\t\t\t        /**\n\t\t\t         * Creates a copy of this word array.\n\t\t\t         *\n\t\t\t         * @return {X64WordArray} The clone.\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var clone = x64WordArray.clone();\n\t\t\t         */\n\t\t\t        clone: function () {\n\t\t\t            var clone = Base.clone.call(this);\n\n\t\t\t            // Clone \"words\" array\n\t\t\t            var words = clone.words = this.words.slice(0);\n\n\t\t\t            // Clone each X64Word object\n\t\t\t            var wordsLength = words.length;\n\t\t\t            for (var i = 0; i < wordsLength; i++) {\n\t\t\t                words[i] = words[i].clone();\n\t\t\t            }\n\n\t\t\t            return clone;\n\t\t\t        }\n\t\t\t    });\n\t\t\t}());\n\n\n\t\t\treturn CryptoJS;\n\n\t\t})); \n\t} (x64CoreModule, x64CoreModule.exports));\n\treturn x64CoreModule.exports;\n}\n\nexport { requireX64Core as __require };",
      "start": 1699633499896,
      "end": 1699633500018,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "file": null,
        "sources": [
          null
        ],
        "sourcesContent": [
          null
        ],
        "names": [
          "define",
          "this"
        ],
        "mappings": ";;;;;;;;;;;EAAA,CAAC,CAAC,UAAU,IAAI,EAAE,OAAO,EAAE;EAC3B,CAAC,IAAI,QAAc,KAAK,QAAQ,EAAE;EAClC;EACA,EAAE,iBAAiB,OAAO,GAAG,OAAO,CAAC,YAAiB,CAAC,CAAC;EACxD,EAAE;EACF,MAAM,IAAI,OAAOA,SAAM,KAAK,UAAU,IAAIA,SAAM,CAAC,GAAG,EAAE;EACtD;EACA,EAAEA,SAAM,CAAC,CAAC,QAAQ,CAAC,EAAE,OAAO,CAAC,CAAC;EAC9B,EAAE;EACF,MAAM;EACN;EACA,EAAE,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;EACzB,EAAE;EACF,CAAC,CAACC,8BAAI,EAAE,UAAU,QAAQ,EAAE;AAC5B;EACA,CAAC,CAAC,UAAU,SAAS,EAAE;EACvB;EACA,KAAK,IAAI,CAAC,GAAG,QAAQ,CAAC;EACtB,KAAK,IAAI,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC;EACvB,KAAK,IAAI,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC;EAC3B,KAAK,IAAI,YAAY,GAAG,KAAK,CAAC,SAAS,CAAC;AACxC;EACA;EACA;EACA;EACA,KAAK,IAAI,KAAK,GAAG,CAAC,CAAC,GAAG,GAAG,EAAE,CAAC;AAC5B;EACA;EACA;EACA;EACA,KAAK,IAAI,OAAO,GAAG,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC;EAC5C;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,SAAS,IAAI,EAAE,UAAU,IAAI,EAAE,GAAG,EAAE;EACpC,aAAa,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;EAC9B,aAAa,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;EAC5B,UAAU;AACV;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACA;EACA;EACA;AACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACA;EACA;EACA;AACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACA;EACA;EACA;AACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACA;EACA;EACA;AACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACA;EACA;EACA;AACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACA;EACA;EACA;AACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACA;EACA;EACA;EACA,MAAM,CAAC,CAAC;AACR;EACA;EACA;EACA;EACA;EACA;EACA;EACA,KAAK,IAAI,YAAY,GAAG,KAAK,CAAC,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC;EACtD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,SAAS,IAAI,EAAE,UAAU,KAAK,EAAE,QAAQ,EAAE;EAC1C,aAAa,KAAK,GAAG,IAAI,CAAC,KAAK,GAAG,KAAK,IAAI,EAAE,CAAC;AAC9C;EACA,aAAa,IAAI,QAAQ,IAAI,SAAS,EAAE;EACxC,iBAAiB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;EAC1C,cAAc,MAAM;EACpB,iBAAiB,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;EAClD,cAAc;EACd,UAAU;AACV;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,SAAS,KAAK,EAAE,YAAY;EAC5B;EACA,aAAa,IAAI,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC;EACvC,aAAa,IAAI,cAAc,GAAG,QAAQ,CAAC,MAAM,CAAC;AAClD;EACA;EACA,aAAa,IAAI,QAAQ,GAAG,EAAE,CAAC;EAC/B,aAAa,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,cAAc,EAAE,CAAC,EAAE,EAAE;EACtD,iBAAiB,IAAI,OAAO,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC3C,iBAAiB,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;EAC7C,iBAAiB,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;EAC5C,cAAc;AACd;EACA,aAAa,OAAO,YAAY,CAAC,MAAM,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;EACjE,UAAU;AACV;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,SAAS,KAAK,EAAE,YAAY;EAC5B,aAAa,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAC/C;EACA;EACA,aAAa,IAAI,KAAK,GAAG,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AAC3D;EACA;EACA,aAAa,IAAI,WAAW,GAAG,KAAK,CAAC,MAAM,CAAC;EAC5C,aAAa,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,EAAE,CAAC,EAAE,EAAE;EACnD,iBAAiB,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC;EAC7C,cAAc;AACd;EACA,aAAa,OAAO,KAAK,CAAC;EAC1B,UAAU;EACV,MAAM,CAAC,CAAC;EACR,EAAE,EAAE,EAAE;AACN;AACA;EACA,CAAC,OAAO,QAAQ,CAAC;AACjB;EACA,CAAC,CAAC"
      }
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1699633500018,
      "end": 1699633500018,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1699633500019,
      "end": 1699633500019,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1699633500019,
      "end": 1699633500019,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1699633500020,
      "end": 1699633500020,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1699633500020,
      "end": 1699633500021,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1699633500021,
      "end": 1699633500021,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1699633500021,
      "end": 1699633500021,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1699633500022,
      "end": 1699633500022,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1699633500022,
      "end": 1699633500022,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1699633500023,
      "end": 1699633500023,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1699633500023,
      "end": 1699633500023,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1699633500024,
      "end": 1699633500024,
      "order": "normal"
    }
  ]
}
