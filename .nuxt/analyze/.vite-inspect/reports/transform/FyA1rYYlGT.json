{
  "resolvedId": "F:/workSpace2024/knowledge-nuxt3/node_modules/highlight.js/lib/languages/irpf90.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*\nLanguage: IRPF90\nAuthor: Anthony Scemama <scemama@irsamc.ups-tlse.fr>\nDescription: IRPF90 is an open-source Fortran code generator\nWebsite: http://irpf90.ups-tlse.fr\nCategory: scientific\n*/\n\n/** @type LanguageFn */\nfunction irpf90(hljs) {\n  const regex = hljs.regex;\n  const PARAMS = {\n    className: 'params',\n    begin: '\\\\(',\n    end: '\\\\)'\n  };\n\n  // regex in both fortran and irpf90 should match\n  const OPTIONAL_NUMBER_SUFFIX = /(_[a-z_\\d]+)?/;\n  const OPTIONAL_NUMBER_EXP = /([de][+-]?\\d+)?/;\n  const NUMBER = {\n    className: 'number',\n    variants: [\n      { begin: regex.concat(/\\b\\d+/, /\\.(\\d*)/, OPTIONAL_NUMBER_EXP, OPTIONAL_NUMBER_SUFFIX) },\n      { begin: regex.concat(/\\b\\d+/, OPTIONAL_NUMBER_EXP, OPTIONAL_NUMBER_SUFFIX) },\n      { begin: regex.concat(/\\.\\d+/, OPTIONAL_NUMBER_EXP, OPTIONAL_NUMBER_SUFFIX) }\n    ],\n    relevance: 0\n  };\n\n  const F_KEYWORDS = {\n    literal: '.False. .True.',\n    keyword: 'kind do while private call intrinsic where elsewhere '\n      + 'type endtype endmodule endselect endinterface end enddo endif if forall endforall only contains default return stop then '\n      + 'public subroutine|10 function program .and. .or. .not. .le. .eq. .ge. .gt. .lt. '\n      + 'goto save else use module select case '\n      + 'access blank direct exist file fmt form formatted iostat name named nextrec number opened rec recl sequential status unformatted unit '\n      + 'continue format pause cycle exit '\n      + 'c_null_char c_alert c_backspace c_form_feed flush wait decimal round iomsg '\n      + 'synchronous nopass non_overridable pass protected volatile abstract extends import '\n      + 'non_intrinsic value deferred generic final enumerator class associate bind enum '\n      + 'c_int c_short c_long c_long_long c_signed_char c_size_t c_int8_t c_int16_t c_int32_t c_int64_t c_int_least8_t c_int_least16_t '\n      + 'c_int_least32_t c_int_least64_t c_int_fast8_t c_int_fast16_t c_int_fast32_t c_int_fast64_t c_intmax_t C_intptr_t c_float c_double '\n      + 'c_long_double c_float_complex c_double_complex c_long_double_complex c_bool c_char c_null_ptr c_null_funptr '\n      + 'c_new_line c_carriage_return c_horizontal_tab c_vertical_tab iso_c_binding c_loc c_funloc c_associated  c_f_pointer '\n      + 'c_ptr c_funptr iso_fortran_env character_storage_size error_unit file_storage_size input_unit iostat_end iostat_eor '\n      + 'numeric_storage_size output_unit c_f_procpointer ieee_arithmetic ieee_support_underflow_control '\n      + 'ieee_get_underflow_mode ieee_set_underflow_mode newunit contiguous recursive '\n      + 'pad position action delim readwrite eor advance nml interface procedure namelist include sequence elemental pure '\n      + 'integer real character complex logical dimension allocatable|10 parameter '\n      + 'external implicit|10 none double precision assign intent optional pointer '\n      + 'target in out common equivalence data '\n      // IRPF90 special keywords\n      + 'begin_provider &begin_provider end_provider begin_shell end_shell begin_template end_template subst assert touch '\n      + 'soft_touch provide no_dep free irp_if irp_else irp_endif irp_write irp_read',\n    built_in: 'alog alog10 amax0 amax1 amin0 amin1 amod cabs ccos cexp clog csin csqrt dabs dacos dasin datan datan2 dcos dcosh ddim dexp dint '\n      + 'dlog dlog10 dmax1 dmin1 dmod dnint dsign dsin dsinh dsqrt dtan dtanh float iabs idim idint idnint ifix isign max0 max1 min0 min1 sngl '\n      + 'algama cdabs cdcos cdexp cdlog cdsin cdsqrt cqabs cqcos cqexp cqlog cqsin cqsqrt dcmplx dconjg derf derfc dfloat dgamma dimag dlgama '\n      + 'iqint qabs qacos qasin qatan qatan2 qcmplx qconjg qcos qcosh qdim qerf qerfc qexp qgamma qimag qlgama qlog qlog10 qmax1 qmin1 qmod '\n      + 'qnint qsign qsin qsinh qsqrt qtan qtanh abs acos aimag aint anint asin atan atan2 char cmplx conjg cos cosh exp ichar index int log '\n      + 'log10 max min nint sign sin sinh sqrt tan tanh print write dim lge lgt lle llt mod nullify allocate deallocate '\n      + 'adjustl adjustr all allocated any associated bit_size btest ceiling count cshift date_and_time digits dot_product '\n      + 'eoshift epsilon exponent floor fraction huge iand ibclr ibits ibset ieor ior ishft ishftc lbound len_trim matmul '\n      + 'maxexponent maxloc maxval merge minexponent minloc minval modulo mvbits nearest pack present product '\n      + 'radix random_number random_seed range repeat reshape rrspacing scale scan selected_int_kind selected_real_kind '\n      + 'set_exponent shape size spacing spread sum system_clock tiny transpose trim ubound unpack verify achar iachar transfer '\n      + 'dble entry dprod cpu_time command_argument_count get_command get_command_argument get_environment_variable is_iostat_end '\n      + 'ieee_arithmetic ieee_support_underflow_control ieee_get_underflow_mode ieee_set_underflow_mode '\n      + 'is_iostat_eor move_alloc new_line selected_char_kind same_type_as extends_type_of '\n      + 'acosh asinh atanh bessel_j0 bessel_j1 bessel_jn bessel_y0 bessel_y1 bessel_yn erf erfc erfc_scaled gamma log_gamma hypot norm2 '\n      + 'atomic_define atomic_ref execute_command_line leadz trailz storage_size merge_bits '\n      + 'bge bgt ble blt dshiftl dshiftr findloc iall iany iparity image_index lcobound ucobound maskl maskr '\n      + 'num_images parity popcnt poppar shifta shiftl shiftr this_image '\n      // IRPF90 special built_ins\n      + 'IRP_ALIGN irp_here'\n  };\n  return {\n    name: 'IRPF90',\n    case_insensitive: true,\n    keywords: F_KEYWORDS,\n    illegal: /\\/\\*/,\n    contains: [\n      hljs.inherit(hljs.APOS_STRING_MODE, {\n        className: 'string',\n        relevance: 0\n      }),\n      hljs.inherit(hljs.QUOTE_STRING_MODE, {\n        className: 'string',\n        relevance: 0\n      }),\n      {\n        className: 'function',\n        beginKeywords: 'subroutine function program',\n        illegal: '[${=\\\\n]',\n        contains: [\n          hljs.UNDERSCORE_TITLE_MODE,\n          PARAMS\n        ]\n      },\n      hljs.COMMENT('!', '$', { relevance: 0 }),\n      hljs.COMMENT('begin_doc', 'end_doc', { relevance: 10 }),\n      NUMBER\n    ]\n  };\n}\n\nmodule.exports = irpf90;\n",
      "start": 1699633500909,
      "end": 1699633501009,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1699633501009,
      "end": 1699633501009,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1699633501009,
      "end": 1699633501009,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1699633501009,
      "end": 1699633501009,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1699633501010,
      "end": 1699633501010,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1699633501010,
      "end": 1699633501010,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1699633501010,
      "end": 1699633501010,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1699633501010,
      "end": 1699633501010,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1699633501010,
      "end": 1699633501010,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1699633501010,
      "end": 1699633501010,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1699633501010,
      "end": 1699633501010,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1699633501010,
      "end": 1699633501010,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1699633501010,
      "end": 1699633501010,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1699633501010,
      "end": 1699633501010,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1699633501010,
      "end": 1699633501010,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1699633501010,
      "end": 1699633501010,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1699633501010,
      "end": 1699633501011,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1699633501011,
      "end": 1699633501011,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1699633501011,
      "end": 1699633501011,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1699633501011,
      "end": 1699633501011,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1699633501011,
      "end": 1699633501011,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "result": "/*\nLanguage: IRPF90\nAuthor: Anthony Scemama <scemama@irsamc.ups-tlse.fr>\nDescription: IRPF90 is an open-source Fortran code generator\nWebsite: http://irpf90.ups-tlse.fr\nCategory: scientific\n*/\nimport * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\n\nvar irpf90_1;\nvar hasRequiredIrpf90;\n\nfunction requireIrpf90 () {\n\tif (hasRequiredIrpf90) return irpf90_1;\n\thasRequiredIrpf90 = 1;\n\t/** @type LanguageFn */\n\tfunction irpf90(hljs) {\n\t  const regex = hljs.regex;\n\t  const PARAMS = {\n\t    className: 'params',\n\t    begin: '\\\\(',\n\t    end: '\\\\)'\n\t  };\n\n\t  // regex in both fortran and irpf90 should match\n\t  const OPTIONAL_NUMBER_SUFFIX = /(_[a-z_\\d]+)?/;\n\t  const OPTIONAL_NUMBER_EXP = /([de][+-]?\\d+)?/;\n\t  const NUMBER = {\n\t    className: 'number',\n\t    variants: [\n\t      { begin: regex.concat(/\\b\\d+/, /\\.(\\d*)/, OPTIONAL_NUMBER_EXP, OPTIONAL_NUMBER_SUFFIX) },\n\t      { begin: regex.concat(/\\b\\d+/, OPTIONAL_NUMBER_EXP, OPTIONAL_NUMBER_SUFFIX) },\n\t      { begin: regex.concat(/\\.\\d+/, OPTIONAL_NUMBER_EXP, OPTIONAL_NUMBER_SUFFIX) }\n\t    ],\n\t    relevance: 0\n\t  };\n\n\t  const F_KEYWORDS = {\n\t    literal: '.False. .True.',\n\t    keyword: 'kind do while private call intrinsic where elsewhere '\n\t      + 'type endtype endmodule endselect endinterface end enddo endif if forall endforall only contains default return stop then '\n\t      + 'public subroutine|10 function program .and. .or. .not. .le. .eq. .ge. .gt. .lt. '\n\t      + 'goto save else use module select case '\n\t      + 'access blank direct exist file fmt form formatted iostat name named nextrec number opened rec recl sequential status unformatted unit '\n\t      + 'continue format pause cycle exit '\n\t      + 'c_null_char c_alert c_backspace c_form_feed flush wait decimal round iomsg '\n\t      + 'synchronous nopass non_overridable pass protected volatile abstract extends import '\n\t      + 'non_intrinsic value deferred generic final enumerator class associate bind enum '\n\t      + 'c_int c_short c_long c_long_long c_signed_char c_size_t c_int8_t c_int16_t c_int32_t c_int64_t c_int_least8_t c_int_least16_t '\n\t      + 'c_int_least32_t c_int_least64_t c_int_fast8_t c_int_fast16_t c_int_fast32_t c_int_fast64_t c_intmax_t C_intptr_t c_float c_double '\n\t      + 'c_long_double c_float_complex c_double_complex c_long_double_complex c_bool c_char c_null_ptr c_null_funptr '\n\t      + 'c_new_line c_carriage_return c_horizontal_tab c_vertical_tab iso_c_binding c_loc c_funloc c_associated  c_f_pointer '\n\t      + 'c_ptr c_funptr iso_fortran_env character_storage_size error_unit file_storage_size input_unit iostat_end iostat_eor '\n\t      + 'numeric_storage_size output_unit c_f_procpointer ieee_arithmetic ieee_support_underflow_control '\n\t      + 'ieee_get_underflow_mode ieee_set_underflow_mode newunit contiguous recursive '\n\t      + 'pad position action delim readwrite eor advance nml interface procedure namelist include sequence elemental pure '\n\t      + 'integer real character complex logical dimension allocatable|10 parameter '\n\t      + 'external implicit|10 none double precision assign intent optional pointer '\n\t      + 'target in out common equivalence data '\n\t      // IRPF90 special keywords\n\t      + 'begin_provider &begin_provider end_provider begin_shell end_shell begin_template end_template subst assert touch '\n\t      + 'soft_touch provide no_dep free irp_if irp_else irp_endif irp_write irp_read',\n\t    built_in: 'alog alog10 amax0 amax1 amin0 amin1 amod cabs ccos cexp clog csin csqrt dabs dacos dasin datan datan2 dcos dcosh ddim dexp dint '\n\t      + 'dlog dlog10 dmax1 dmin1 dmod dnint dsign dsin dsinh dsqrt dtan dtanh float iabs idim idint idnint ifix isign max0 max1 min0 min1 sngl '\n\t      + 'algama cdabs cdcos cdexp cdlog cdsin cdsqrt cqabs cqcos cqexp cqlog cqsin cqsqrt dcmplx dconjg derf derfc dfloat dgamma dimag dlgama '\n\t      + 'iqint qabs qacos qasin qatan qatan2 qcmplx qconjg qcos qcosh qdim qerf qerfc qexp qgamma qimag qlgama qlog qlog10 qmax1 qmin1 qmod '\n\t      + 'qnint qsign qsin qsinh qsqrt qtan qtanh abs acos aimag aint anint asin atan atan2 char cmplx conjg cos cosh exp ichar index int log '\n\t      + 'log10 max min nint sign sin sinh sqrt tan tanh print write dim lge lgt lle llt mod nullify allocate deallocate '\n\t      + 'adjustl adjustr all allocated any associated bit_size btest ceiling count cshift date_and_time digits dot_product '\n\t      + 'eoshift epsilon exponent floor fraction huge iand ibclr ibits ibset ieor ior ishft ishftc lbound len_trim matmul '\n\t      + 'maxexponent maxloc maxval merge minexponent minloc minval modulo mvbits nearest pack present product '\n\t      + 'radix random_number random_seed range repeat reshape rrspacing scale scan selected_int_kind selected_real_kind '\n\t      + 'set_exponent shape size spacing spread sum system_clock tiny transpose trim ubound unpack verify achar iachar transfer '\n\t      + 'dble entry dprod cpu_time command_argument_count get_command get_command_argument get_environment_variable is_iostat_end '\n\t      + 'ieee_arithmetic ieee_support_underflow_control ieee_get_underflow_mode ieee_set_underflow_mode '\n\t      + 'is_iostat_eor move_alloc new_line selected_char_kind same_type_as extends_type_of '\n\t      + 'acosh asinh atanh bessel_j0 bessel_j1 bessel_jn bessel_y0 bessel_y1 bessel_yn erf erfc erfc_scaled gamma log_gamma hypot norm2 '\n\t      + 'atomic_define atomic_ref execute_command_line leadz trailz storage_size merge_bits '\n\t      + 'bge bgt ble blt dshiftl dshiftr findloc iall iany iparity image_index lcobound ucobound maskl maskr '\n\t      + 'num_images parity popcnt poppar shifta shiftl shiftr this_image '\n\t      // IRPF90 special built_ins\n\t      + 'IRP_ALIGN irp_here'\n\t  };\n\t  return {\n\t    name: 'IRPF90',\n\t    case_insensitive: true,\n\t    keywords: F_KEYWORDS,\n\t    illegal: /\\/\\*/,\n\t    contains: [\n\t      hljs.inherit(hljs.APOS_STRING_MODE, {\n\t        className: 'string',\n\t        relevance: 0\n\t      }),\n\t      hljs.inherit(hljs.QUOTE_STRING_MODE, {\n\t        className: 'string',\n\t        relevance: 0\n\t      }),\n\t      {\n\t        className: 'function',\n\t        beginKeywords: 'subroutine function program',\n\t        illegal: '[${=\\\\n]',\n\t        contains: [\n\t          hljs.UNDERSCORE_TITLE_MODE,\n\t          PARAMS\n\t        ]\n\t      },\n\t      hljs.COMMENT('!', '$', { relevance: 0 }),\n\t      hljs.COMMENT('begin_doc', 'end_doc', { relevance: 10 }),\n\t      NUMBER\n\t    ]\n\t  };\n\t}\n\n\tirpf90_1 = irpf90;\n\treturn irpf90_1;\n}\n\nexport { requireIrpf90 as __require };",
      "start": 1699633501011,
      "end": 1699633501011,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "file": null,
        "sources": [
          null
        ],
        "sourcesContent": [
          null
        ],
        "names": [],
        "mappings": "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"
      }
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1699633501011,
      "end": 1699633501011,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1699633501011,
      "end": 1699633501011,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1699633501011,
      "end": 1699633501011,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1699633501011,
      "end": 1699633501011,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1699633501011,
      "end": 1699633501012,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1699633501012,
      "end": 1699633501012,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1699633501012,
      "end": 1699633501012,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1699633501012,
      "end": 1699633501012,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1699633501012,
      "end": 1699633501012,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1699633501012,
      "end": 1699633501012,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1699633501012,
      "end": 1699633501012,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1699633501012,
      "end": 1699633501012,
      "order": "normal"
    }
  ]
}
