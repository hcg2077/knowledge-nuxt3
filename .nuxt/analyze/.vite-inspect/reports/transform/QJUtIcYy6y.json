{
  "resolvedId": "F:/workSpace2024/knowledge-nuxt3/node_modules/swiper/core/loop/loopFix.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "export default function loopFix({\n  slideRealIndex,\n  slideTo = true,\n  direction,\n  setTranslate,\n  activeSlideIndex,\n  byController,\n  byMousewheel\n} = {}) {\n  const swiper = this;\n  if (!swiper.params.loop) return;\n  swiper.emit('beforeLoopFix');\n  const {\n    slides,\n    allowSlidePrev,\n    allowSlideNext,\n    slidesEl,\n    params\n  } = swiper;\n  swiper.allowSlidePrev = true;\n  swiper.allowSlideNext = true;\n  if (swiper.virtual && params.virtual.enabled) {\n    if (slideTo) {\n      if (!params.centeredSlides && swiper.snapIndex === 0) {\n        swiper.slideTo(swiper.virtual.slides.length, 0, false, true);\n      } else if (params.centeredSlides && swiper.snapIndex < params.slidesPerView) {\n        swiper.slideTo(swiper.virtual.slides.length + swiper.snapIndex, 0, false, true);\n      } else if (swiper.snapIndex === swiper.snapGrid.length - 1) {\n        swiper.slideTo(swiper.virtual.slidesBefore, 0, false, true);\n      }\n    }\n    swiper.allowSlidePrev = allowSlidePrev;\n    swiper.allowSlideNext = allowSlideNext;\n    swiper.emit('loopFix');\n    return;\n  }\n  const slidesPerView = params.slidesPerView === 'auto' ? swiper.slidesPerViewDynamic() : Math.ceil(parseFloat(params.slidesPerView, 10));\n  let loopedSlides = params.loopedSlides || slidesPerView;\n  if (loopedSlides % params.slidesPerGroup !== 0) {\n    loopedSlides += params.slidesPerGroup - loopedSlides % params.slidesPerGroup;\n  }\n  swiper.loopedSlides = loopedSlides;\n  const prependSlidesIndexes = [];\n  const appendSlidesIndexes = [];\n  let activeIndex = swiper.activeIndex;\n  if (typeof activeSlideIndex === 'undefined') {\n    activeSlideIndex = swiper.getSlideIndex(swiper.slides.filter(el => el.classList.contains(params.slideActiveClass))[0]);\n  } else {\n    activeIndex = activeSlideIndex;\n  }\n  const isNext = direction === 'next' || !direction;\n  const isPrev = direction === 'prev' || !direction;\n  let slidesPrepended = 0;\n  let slidesAppended = 0;\n  // prepend last slides before start\n  if (activeSlideIndex < loopedSlides) {\n    slidesPrepended = Math.max(loopedSlides - activeSlideIndex, params.slidesPerGroup);\n    for (let i = 0; i < loopedSlides - activeSlideIndex; i += 1) {\n      const index = i - Math.floor(i / slides.length) * slides.length;\n      prependSlidesIndexes.push(slides.length - index - 1);\n    }\n  } else if (activeSlideIndex /* + slidesPerView */ > swiper.slides.length - loopedSlides * 2) {\n    slidesAppended = Math.max(activeSlideIndex - (swiper.slides.length - loopedSlides * 2), params.slidesPerGroup);\n    for (let i = 0; i < slidesAppended; i += 1) {\n      const index = i - Math.floor(i / slides.length) * slides.length;\n      appendSlidesIndexes.push(index);\n    }\n  }\n  if (isPrev) {\n    prependSlidesIndexes.forEach(index => {\n      swiper.slides[index].swiperLoopMoveDOM = true;\n      slidesEl.prepend(swiper.slides[index]);\n      swiper.slides[index].swiperLoopMoveDOM = false;\n    });\n  }\n  if (isNext) {\n    appendSlidesIndexes.forEach(index => {\n      swiper.slides[index].swiperLoopMoveDOM = true;\n      slidesEl.append(swiper.slides[index]);\n      swiper.slides[index].swiperLoopMoveDOM = false;\n    });\n  }\n  swiper.recalcSlides();\n  if (params.slidesPerView === 'auto') {\n    swiper.updateSlides();\n  }\n  if (params.watchSlidesProgress) {\n    swiper.updateSlidesOffset();\n  }\n  if (slideTo) {\n    if (prependSlidesIndexes.length > 0 && isPrev) {\n      if (typeof slideRealIndex === 'undefined') {\n        const currentSlideTranslate = swiper.slidesGrid[activeIndex];\n        const newSlideTranslate = swiper.slidesGrid[activeIndex + slidesPrepended];\n        const diff = newSlideTranslate - currentSlideTranslate;\n        if (byMousewheel) {\n          swiper.setTranslate(swiper.translate - diff);\n        } else {\n          swiper.slideTo(activeIndex + slidesPrepended, 0, false, true);\n          if (setTranslate) {\n            swiper.touches[swiper.isHorizontal() ? 'startX' : 'startY'] += diff;\n          }\n        }\n      } else {\n        if (setTranslate) {\n          swiper.slideToLoop(slideRealIndex, 0, false, true);\n        }\n      }\n    } else if (appendSlidesIndexes.length > 0 && isNext) {\n      if (typeof slideRealIndex === 'undefined') {\n        const currentSlideTranslate = swiper.slidesGrid[activeIndex];\n        const newSlideTranslate = swiper.slidesGrid[activeIndex - slidesAppended];\n        const diff = newSlideTranslate - currentSlideTranslate;\n        if (byMousewheel) {\n          swiper.setTranslate(swiper.translate - diff);\n        } else {\n          swiper.slideTo(activeIndex - slidesAppended, 0, false, true);\n          if (setTranslate) {\n            swiper.touches[swiper.isHorizontal() ? 'startX' : 'startY'] += diff;\n          }\n        }\n      } else {\n        swiper.slideToLoop(slideRealIndex, 0, false, true);\n      }\n    }\n  }\n  swiper.allowSlidePrev = allowSlidePrev;\n  swiper.allowSlideNext = allowSlideNext;\n  if (swiper.controller && swiper.controller.control && !byController) {\n    const loopParams = {\n      slideRealIndex,\n      slideTo: false,\n      direction,\n      setTranslate,\n      activeSlideIndex,\n      byController: true\n    };\n    if (Array.isArray(swiper.controller.control)) {\n      swiper.controller.control.forEach(c => {\n        if (!c.destroyed && c.params.loop) c.loopFix(loopParams);\n      });\n    } else if (swiper.controller.control instanceof swiper.constructor && swiper.controller.control.params.loop) {\n      swiper.controller.control.loopFix(loopParams);\n    }\n  }\n  swiper.emit('loopFix');\n}",
      "start": 1699961622211,
      "end": 1699961622327,
      "sourcemaps": null
    },
    {
      "name": "unocss:transformers:pre",
      "start": 1699961622327,
      "end": 1699961622327,
      "order": "pre"
    },
    {
      "name": "unocss:global:build:scan",
      "start": 1699961622327,
      "end": 1699961622327,
      "order": "pre"
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1699961622327,
      "end": 1699961622327,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1699961622327,
      "end": 1699961622327,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1699961622328,
      "end": 1699961622328,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1699961622328,
      "end": 1699961622328,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1699961622328,
      "end": 1699961622328,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1699961622328,
      "end": 1699961622328,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1699961622328,
      "end": 1699961622328,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1699961622328,
      "end": 1699961622328,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1699961622328,
      "end": 1699961622328,
      "order": "normal"
    },
    {
      "name": "unocss:transformers:default",
      "start": 1699961622328,
      "end": 1699961622328,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1699961622328,
      "end": 1699961622328,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1699961622328,
      "end": 1699961622328,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1699961622328,
      "end": 1699961622328,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1699961622328,
      "end": 1699961622329,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1699961622329,
      "end": 1699961622329,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1699961622329,
      "end": 1699961622329,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1699961622329,
      "end": 1699961622329,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1699961622329,
      "end": 1699961622329,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1699961622329,
      "end": 1699961622329,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1699961622329,
      "end": 1699961622329,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1699961622329,
      "end": 1699961622329,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1699961622329,
      "end": 1699961622329,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1699961622329,
      "end": 1699961622330,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1699961622330,
      "end": 1699961622330,
      "order": "normal"
    },
    {
      "name": "unocss:transformers:post",
      "start": 1699961622330,
      "end": 1699961622330,
      "order": "post"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1699961622330,
      "end": 1699961622330,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1699961622330,
      "end": 1699961622330,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1699961622330,
      "end": 1699961622330,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1699961622330,
      "end": 1699961622330,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1699961622330,
      "end": 1699961622330,
      "order": "post"
    },
    {
      "name": "element-plus:transform",
      "start": 1699961622330,
      "end": 1699961622330,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1699961622330,
      "end": 1699961622330,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1699961622330,
      "end": 1699961622330,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1699961622330,
      "end": 1699961622330,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1699961622330,
      "end": 1699961622330,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1699961622330,
      "end": 1699961622330,
      "order": "normal"
    }
  ]
}
