{
  "resolvedId": "F:/workSpace2024/knowledge-nuxt3/node_modules/markdown-it/lib/parser_block.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/** internal\n * class ParserBlock\n *\n * Block-level tokenizer.\n **/\n'use strict';\n\n\nvar Ruler           = require('./ruler');\n\n\nvar _rules = [\n  // First 2 params - rule name & source. Secondary array - list of rules,\n  // which can be terminated by this one.\n  [ 'table',      require('./rules_block/table'),      [ 'paragraph', 'reference' ] ],\n  [ 'code',       require('./rules_block/code') ],\n  [ 'fence',      require('./rules_block/fence'),      [ 'paragraph', 'reference', 'blockquote', 'list' ] ],\n  [ 'blockquote', require('./rules_block/blockquote'), [ 'paragraph', 'reference', 'blockquote', 'list' ] ],\n  [ 'hr',         require('./rules_block/hr'),         [ 'paragraph', 'reference', 'blockquote', 'list' ] ],\n  [ 'list',       require('./rules_block/list'),       [ 'paragraph', 'reference', 'blockquote' ] ],\n  [ 'reference',  require('./rules_block/reference') ],\n  [ 'html_block', require('./rules_block/html_block'), [ 'paragraph', 'reference', 'blockquote' ] ],\n  [ 'heading',    require('./rules_block/heading'),    [ 'paragraph', 'reference', 'blockquote' ] ],\n  [ 'lheading',   require('./rules_block/lheading') ],\n  [ 'paragraph',  require('./rules_block/paragraph') ]\n];\n\n\n/**\n * new ParserBlock()\n **/\nfunction ParserBlock() {\n  /**\n   * ParserBlock#ruler -> Ruler\n   *\n   * [[Ruler]] instance. Keep configuration of block rules.\n   **/\n  this.ruler = new Ruler();\n\n  for (var i = 0; i < _rules.length; i++) {\n    this.ruler.push(_rules[i][0], _rules[i][1], { alt: (_rules[i][2] || []).slice() });\n  }\n}\n\n\n// Generate tokens for input range\n//\nParserBlock.prototype.tokenize = function (state, startLine, endLine) {\n  var ok, i, prevLine,\n      rules = this.ruler.getRules(''),\n      len = rules.length,\n      line = startLine,\n      hasEmptyLines = false,\n      maxNesting = state.md.options.maxNesting;\n\n  while (line < endLine) {\n    state.line = line = state.skipEmptyLines(line);\n    if (line >= endLine) { break; }\n\n    // Termination condition for nested calls.\n    // Nested calls currently used for blockquotes & lists\n    if (state.sCount[line] < state.blkIndent) { break; }\n\n    // If nesting level exceeded - skip tail to the end. That's not ordinary\n    // situation and we should not care about content.\n    if (state.level >= maxNesting) {\n      state.line = endLine;\n      break;\n    }\n\n    // Try all possible rules.\n    // On success, rule should:\n    //\n    // - update `state.line`\n    // - update `state.tokens`\n    // - return true\n    prevLine = state.line;\n\n    for (i = 0; i < len; i++) {\n      ok = rules[i](state, line, endLine, false);\n      if (ok) {\n        if (prevLine >= state.line) {\n          throw new Error(\"block rule didn't increment state.line\");\n        }\n        break;\n      }\n    }\n\n    // this can only happen if user disables paragraph rule\n    if (!ok) throw new Error('none of the block rules matched');\n\n    // set state.tight if we had an empty line before current tag\n    // i.e. latest empty line should not count\n    state.tight = !hasEmptyLines;\n\n    // paragraph might \"eat\" one newline after it in nested lists\n    if (state.isEmpty(state.line - 1)) {\n      hasEmptyLines = true;\n    }\n\n    line = state.line;\n\n    if (line < endLine && state.isEmpty(line)) {\n      hasEmptyLines = true;\n      line++;\n      state.line = line;\n    }\n  }\n};\n\n\n/**\n * ParserBlock.parse(str, md, env, outTokens)\n *\n * Process input string and push block tokens into `outTokens`\n **/\nParserBlock.prototype.parse = function (src, md, env, outTokens) {\n  var state;\n\n  if (!src) { return; }\n\n  state = new this.State(src, md, env, outTokens);\n\n  this.tokenize(state, state.line, state.lineMax);\n};\n\n\nParserBlock.prototype.State = require('./rules_block/state_block');\n\n\nmodule.exports = ParserBlock;\n",
      "start": 1699633501513,
      "end": 1699633501659,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1699633501660,
      "end": 1699633501660,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1699633501660,
      "end": 1699633501660,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1699633501660,
      "end": 1699633501660,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1699633501660,
      "end": 1699633501660,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1699633501660,
      "end": 1699633501660,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1699633501660,
      "end": 1699633501660,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1699633501660,
      "end": 1699633501660,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1699633501660,
      "end": 1699633501660,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1699633501660,
      "end": 1699633501660,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1699633501660,
      "end": 1699633501660,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1699633501660,
      "end": 1699633501660,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1699633501660,
      "end": 1699633501660,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1699633501660,
      "end": 1699633501660,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1699633501660,
      "end": 1699633501660,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1699633501660,
      "end": 1699633501660,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1699633501660,
      "end": 1699633501660,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1699633501660,
      "end": 1699633501660,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1699633501660,
      "end": 1699633501660,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1699633501660,
      "end": 1699633501660,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1699633501660,
      "end": 1699633501660,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "result": "/** internal\n * class ParserBlock\n *\n * Block-level tokenizer.\n **/\nimport * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport require$$0 from \"\\u0000F:/workSpace2024/knowledge-nuxt3/node_modules/markdown-it/lib/ruler.js?commonjs-proxy\";\nimport require$$1 from \"\\u0000F:/workSpace2024/knowledge-nuxt3/node_modules/markdown-it/lib/rules_block/table.js?commonjs-proxy\";\nimport require$$2 from \"\\u0000F:/workSpace2024/knowledge-nuxt3/node_modules/markdown-it/lib/rules_block/code.js?commonjs-proxy\";\nimport require$$3 from \"\\u0000F:/workSpace2024/knowledge-nuxt3/node_modules/markdown-it/lib/rules_block/fence.js?commonjs-proxy\";\nimport require$$4 from \"\\u0000F:/workSpace2024/knowledge-nuxt3/node_modules/markdown-it/lib/rules_block/blockquote.js?commonjs-proxy\";\nimport require$$5 from \"\\u0000F:/workSpace2024/knowledge-nuxt3/node_modules/markdown-it/lib/rules_block/hr.js?commonjs-proxy\";\nimport require$$6 from \"\\u0000F:/workSpace2024/knowledge-nuxt3/node_modules/markdown-it/lib/rules_block/list.js?commonjs-proxy\";\nimport require$$7 from \"\\u0000F:/workSpace2024/knowledge-nuxt3/node_modules/markdown-it/lib/rules_block/reference.js?commonjs-proxy\";\nimport require$$8 from \"\\u0000F:/workSpace2024/knowledge-nuxt3/node_modules/markdown-it/lib/rules_block/html_block.js?commonjs-proxy\";\nimport require$$9 from \"\\u0000F:/workSpace2024/knowledge-nuxt3/node_modules/markdown-it/lib/rules_block/heading.js?commonjs-proxy\";\nimport require$$10 from \"\\u0000F:/workSpace2024/knowledge-nuxt3/node_modules/markdown-it/lib/rules_block/lheading.js?commonjs-proxy\";\nimport require$$11 from \"\\u0000F:/workSpace2024/knowledge-nuxt3/node_modules/markdown-it/lib/rules_block/paragraph.js?commonjs-proxy\";\nimport require$$12 from \"\\u0000F:/workSpace2024/knowledge-nuxt3/node_modules/markdown-it/lib/rules_block/state_block.js?commonjs-proxy\";\n\n'use strict';\n\n\nvar Ruler           = require$$0;\n\n\nvar _rules = [\n  // First 2 params - rule name & source. Secondary array - list of rules,\n  // which can be terminated by this one.\n  [ 'table',      require$$1,      [ 'paragraph', 'reference' ] ],\n  [ 'code',       require$$2 ],\n  [ 'fence',      require$$3,      [ 'paragraph', 'reference', 'blockquote', 'list' ] ],\n  [ 'blockquote', require$$4, [ 'paragraph', 'reference', 'blockquote', 'list' ] ],\n  [ 'hr',         require$$5,         [ 'paragraph', 'reference', 'blockquote', 'list' ] ],\n  [ 'list',       require$$6,       [ 'paragraph', 'reference', 'blockquote' ] ],\n  [ 'reference',  require$$7 ],\n  [ 'html_block', require$$8, [ 'paragraph', 'reference', 'blockquote' ] ],\n  [ 'heading',    require$$9,    [ 'paragraph', 'reference', 'blockquote' ] ],\n  [ 'lheading',   require$$10 ],\n  [ 'paragraph',  require$$11 ]\n];\n\n\n/**\n * new ParserBlock()\n **/\nfunction ParserBlock() {\n  /**\n   * ParserBlock#ruler -> Ruler\n   *\n   * [[Ruler]] instance. Keep configuration of block rules.\n   **/\n  this.ruler = new Ruler();\n\n  for (var i = 0; i < _rules.length; i++) {\n    this.ruler.push(_rules[i][0], _rules[i][1], { alt: (_rules[i][2] || []).slice() });\n  }\n}\n\n\n// Generate tokens for input range\n//\nParserBlock.prototype.tokenize = function (state, startLine, endLine) {\n  var ok, i, prevLine,\n      rules = this.ruler.getRules(''),\n      len = rules.length,\n      line = startLine,\n      hasEmptyLines = false,\n      maxNesting = state.md.options.maxNesting;\n\n  while (line < endLine) {\n    state.line = line = state.skipEmptyLines(line);\n    if (line >= endLine) { break; }\n\n    // Termination condition for nested calls.\n    // Nested calls currently used for blockquotes & lists\n    if (state.sCount[line] < state.blkIndent) { break; }\n\n    // If nesting level exceeded - skip tail to the end. That's not ordinary\n    // situation and we should not care about content.\n    if (state.level >= maxNesting) {\n      state.line = endLine;\n      break;\n    }\n\n    // Try all possible rules.\n    // On success, rule should:\n    //\n    // - update `state.line`\n    // - update `state.tokens`\n    // - return true\n    prevLine = state.line;\n\n    for (i = 0; i < len; i++) {\n      ok = rules[i](state, line, endLine, false);\n      if (ok) {\n        if (prevLine >= state.line) {\n          throw new Error(\"block rule didn't increment state.line\");\n        }\n        break;\n      }\n    }\n\n    // this can only happen if user disables paragraph rule\n    if (!ok) throw new Error('none of the block rules matched');\n\n    // set state.tight if we had an empty line before current tag\n    // i.e. latest empty line should not count\n    state.tight = !hasEmptyLines;\n\n    // paragraph might \"eat\" one newline after it in nested lists\n    if (state.isEmpty(state.line - 1)) {\n      hasEmptyLines = true;\n    }\n\n    line = state.line;\n\n    if (line < endLine && state.isEmpty(line)) {\n      hasEmptyLines = true;\n      line++;\n      state.line = line;\n    }\n  }\n};\n\n\n/**\n * ParserBlock.parse(str, md, env, outTokens)\n *\n * Process input string and push block tokens into `outTokens`\n **/\nParserBlock.prototype.parse = function (src, md, env, outTokens) {\n  var state;\n\n  if (!src) { return; }\n\n  state = new this.State(src, md, env, outTokens);\n\n  this.tokenize(state, state.line, state.lineMax);\n};\n\n\nParserBlock.prototype.State = require$$12;\n\n\nvar parser_block = ParserBlock;\n\nexport default /*@__PURE__*/commonjsHelpers.getDefaultExportFromCjs(parser_block);\nexport { parser_block as __moduleExports };",
      "start": 1699633501660,
      "end": 1699633502086,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "file": null,
        "sources": [
          null
        ],
        "sourcesContent": [
          null
        ],
        "names": [],
        "mappings": ";;;;;;;;;;;;;;;;;;;;AAKA,YAAY,CAAC;AACb;AACA;AACA,IAAI,KAAK,aAAa,UAAkB,CAAC;AACzC;AACA;AACA,IAAI,MAAM,GAAG;AACb;AACA;AACA,EAAE,EAAE,OAAO,OAAO,UAA8B,OAAO,EAAE,WAAW,EAAE,WAAW,EAAE,EAAE;AACrF,EAAE,EAAE,MAAM,QAAQ,UAA6B,EAAE;AACjD,EAAE,EAAE,OAAO,OAAO,UAA8B,OAAO,EAAE,WAAW,EAAE,WAAW,EAAE,YAAY,EAAE,MAAM,EAAE,EAAE;AAC3G,EAAE,EAAE,YAAY,EAAE,UAAmC,EAAE,EAAE,WAAW,EAAE,WAAW,EAAE,YAAY,EAAE,MAAM,EAAE,EAAE;AAC3G,EAAE,EAAE,IAAI,UAAU,UAA2B,UAAU,EAAE,WAAW,EAAE,WAAW,EAAE,YAAY,EAAE,MAAM,EAAE,EAAE;AAC3G,EAAE,EAAE,MAAM,QAAQ,UAA6B,QAAQ,EAAE,WAAW,EAAE,WAAW,EAAE,YAAY,EAAE,EAAE;AACnG,EAAE,EAAE,WAAW,GAAG,UAAkC,EAAE;AACtD,EAAE,EAAE,YAAY,EAAE,UAAmC,EAAE,EAAE,WAAW,EAAE,WAAW,EAAE,YAAY,EAAE,EAAE;AACnG,EAAE,EAAE,SAAS,KAAK,UAAgC,KAAK,EAAE,WAAW,EAAE,WAAW,EAAE,YAAY,EAAE,EAAE;AACnG,EAAE,EAAE,UAAU,IAAI,WAAiC,EAAE;AACrD,EAAE,EAAE,WAAW,GAAG,WAAkC,EAAE;AACtD,CAAC,CAAC;AACF;AACA;AACA;AACA;AACA;AACA,SAAS,WAAW,GAAG;AACvB;AACA;AACA;AACA;AACA;AACA,EAAE,IAAI,CAAC,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC;AAC3B;AACA,EAAE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAC1C,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC;AACvF,GAAG;AACH,CAAC;AACD;AACA;AACA;AACA;AACA,WAAW,CAAC,SAAS,CAAC,QAAQ,GAAG,UAAU,KAAK,EAAE,SAAS,EAAE,OAAO,EAAE;AACtE,EAAE,IAAI,EAAE,EAAE,CAAC,EAAE,QAAQ;AACrB,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC;AACrC,MAAM,GAAG,GAAG,KAAK,CAAC,MAAM;AACxB,MAAM,IAAI,GAAG,SAAS;AACtB,MAAM,aAAa,GAAG,KAAK;AAC3B,MAAM,UAAU,GAAG,KAAK,CAAC,EAAE,CAAC,OAAO,CAAC,UAAU,CAAC;AAC/C;AACA,EAAE,OAAO,IAAI,GAAG,OAAO,EAAE;AACzB,IAAI,KAAK,CAAC,IAAI,GAAG,IAAI,GAAG,KAAK,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;AACnD,IAAI,IAAI,IAAI,IAAI,OAAO,EAAE,EAAE,MAAM,EAAE;AACnC;AACA;AACA;AACA,IAAI,IAAI,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,SAAS,EAAE,EAAE,MAAM,EAAE;AACxD;AACA;AACA;AACA,IAAI,IAAI,KAAK,CAAC,KAAK,IAAI,UAAU,EAAE;AACnC,MAAM,KAAK,CAAC,IAAI,GAAG,OAAO,CAAC;AAC3B,MAAM,MAAM;AACZ,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,QAAQ,GAAG,KAAK,CAAC,IAAI,CAAC;AAC1B;AACA,IAAI,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;AAC9B,MAAM,EAAE,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;AACjD,MAAM,IAAI,EAAE,EAAE;AACd,QAAQ,IAAI,QAAQ,IAAI,KAAK,CAAC,IAAI,EAAE;AACpC,UAAU,MAAM,IAAI,KAAK,CAAC,wCAAwC,CAAC,CAAC;AACpE,SAAS;AACT,QAAQ,MAAM;AACd,OAAO;AACP,KAAK;AACL;AACA;AACA,IAAI,IAAI,CAAC,EAAE,EAAE,MAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC,CAAC;AAChE;AACA;AACA;AACA,IAAI,KAAK,CAAC,KAAK,GAAG,CAAC,aAAa,CAAC;AACjC;AACA;AACA,IAAI,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,GAAG,CAAC,CAAC,EAAE;AACvC,MAAM,aAAa,GAAG,IAAI,CAAC;AAC3B,KAAK;AACL;AACA,IAAI,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC;AACtB;AACA,IAAI,IAAI,IAAI,GAAG,OAAO,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;AAC/C,MAAM,aAAa,GAAG,IAAI,CAAC;AAC3B,MAAM,IAAI,EAAE,CAAC;AACb,MAAM,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC;AACxB,KAAK;AACL,GAAG;AACH,CAAC,CAAC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,CAAC,SAAS,CAAC,KAAK,GAAG,UAAU,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,SAAS,EAAE;AACjE,EAAE,IAAI,KAAK,CAAC;AACZ;AACA,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE,OAAO,EAAE;AACvB;AACA,EAAE,KAAK,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,SAAS,CAAC,CAAC;AAClD;AACA,EAAE,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC;AAClD,CAAC,CAAC;AACF;AACA;AACA,WAAW,CAAC,SAAS,CAAC,KAAK,GAAG,WAAoC,CAAC;AACnE;AACA;IACA,YAAc,GAAG,WAAW"
      }
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1699633502086,
      "end": 1699633502086,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1699633502087,
      "end": 1699633502087,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1699633502087,
      "end": 1699633502087,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1699633502087,
      "end": 1699633502087,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1699633502087,
      "end": 1699633502087,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1699633502087,
      "end": 1699633502087,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1699633502087,
      "end": 1699633502087,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1699633502087,
      "end": 1699633502087,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1699633502087,
      "end": 1699633502087,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1699633502087,
      "end": 1699633502087,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1699633502087,
      "end": 1699633502087,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1699633502087,
      "end": 1699633502087,
      "order": "normal"
    }
  ]
}
