{
  "resolvedId": "F:/workSpace2024/knowledge-nuxt3/node_modules/highlight.js/lib/languages/ada.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*\nLanguage: Ada\nAuthor: Lars Schulna <kartoffelbrei.mit.muskatnuss@gmail.org>\nDescription: Ada is a general-purpose programming language that has great support for saftey critical and real-time applications.\n             It has been developed by the DoD and thus has been used in military and safety-critical applications (like civil aviation).\n             The first version appeared in the 80s, but it's still actively developed today with\n             the newest standard being Ada2012.\n*/\n\n// We try to support full Ada2012\n//\n// We highlight all appearances of types, keywords, literals (string, char, number, bool)\n// and titles (user defined function/procedure/package)\n// CSS classes are set accordingly\n//\n// Languages causing problems for language detection:\n// xml (broken by Foo : Bar type), elm (broken by Foo : Bar type), vbscript-html (broken by body keyword)\n// sql (ada default.txt has a lot of sql keywords)\n\n/** @type LanguageFn */\nfunction ada(hljs) {\n  // Regular expression for Ada numeric literals.\n  // stolen form the VHDL highlighter\n\n  // Decimal literal:\n  const INTEGER_RE = '\\\\d(_|\\\\d)*';\n  const EXPONENT_RE = '[eE][-+]?' + INTEGER_RE;\n  const DECIMAL_LITERAL_RE = INTEGER_RE + '(\\\\.' + INTEGER_RE + ')?' + '(' + EXPONENT_RE + ')?';\n\n  // Based literal:\n  const BASED_INTEGER_RE = '\\\\w+';\n  const BASED_LITERAL_RE = INTEGER_RE + '#' + BASED_INTEGER_RE + '(\\\\.' + BASED_INTEGER_RE + ')?' + '#' + '(' + EXPONENT_RE + ')?';\n\n  const NUMBER_RE = '\\\\b(' + BASED_LITERAL_RE + '|' + DECIMAL_LITERAL_RE + ')';\n\n  // Identifier regex\n  const ID_REGEX = '[A-Za-z](_?[A-Za-z0-9.])*';\n\n  // bad chars, only allowed in literals\n  const BAD_CHARS = `[]\\\\{\\\\}%#'\"`;\n\n  // Ada doesn't have block comments, only line comments\n  const COMMENTS = hljs.COMMENT('--', '$');\n\n  // variable declarations of the form\n  // Foo : Bar := Baz;\n  // where only Bar will be highlighted\n  const VAR_DECLS = {\n    // TODO: These spaces are not required by the Ada syntax\n    // however, I have yet to see handwritten Ada code where\n    // someone does not put spaces around :\n    begin: '\\\\s+:\\\\s+',\n    end: '\\\\s*(:=|;|\\\\)|=>|$)',\n    // endsWithParent: true,\n    // returnBegin: true,\n    illegal: BAD_CHARS,\n    contains: [\n      {\n        // workaround to avoid highlighting\n        // named loops and declare blocks\n        beginKeywords: 'loop for declare others',\n        endsParent: true\n      },\n      {\n        // properly highlight all modifiers\n        className: 'keyword',\n        beginKeywords: 'not null constant access function procedure in out aliased exception'\n      },\n      {\n        className: 'type',\n        begin: ID_REGEX,\n        endsParent: true,\n        relevance: 0\n      }\n    ]\n  };\n\n  const KEYWORDS = [\n    \"abort\",\n    \"else\",\n    \"new\",\n    \"return\",\n    \"abs\",\n    \"elsif\",\n    \"not\",\n    \"reverse\",\n    \"abstract\",\n    \"end\",\n    \"accept\",\n    \"entry\",\n    \"select\",\n    \"access\",\n    \"exception\",\n    \"of\",\n    \"separate\",\n    \"aliased\",\n    \"exit\",\n    \"or\",\n    \"some\",\n    \"all\",\n    \"others\",\n    \"subtype\",\n    \"and\",\n    \"for\",\n    \"out\",\n    \"synchronized\",\n    \"array\",\n    \"function\",\n    \"overriding\",\n    \"at\",\n    \"tagged\",\n    \"generic\",\n    \"package\",\n    \"task\",\n    \"begin\",\n    \"goto\",\n    \"pragma\",\n    \"terminate\",\n    \"body\",\n    \"private\",\n    \"then\",\n    \"if\",\n    \"procedure\",\n    \"type\",\n    \"case\",\n    \"in\",\n    \"protected\",\n    \"constant\",\n    \"interface\",\n    \"is\",\n    \"raise\",\n    \"use\",\n    \"declare\",\n    \"range\",\n    \"delay\",\n    \"limited\",\n    \"record\",\n    \"when\",\n    \"delta\",\n    \"loop\",\n    \"rem\",\n    \"while\",\n    \"digits\",\n    \"renames\",\n    \"with\",\n    \"do\",\n    \"mod\",\n    \"requeue\",\n    \"xor\"\n  ];\n\n  return {\n    name: 'Ada',\n    case_insensitive: true,\n    keywords: {\n      keyword: KEYWORDS,\n      literal: [\n        \"True\",\n        \"False\"\n      ]\n    },\n    contains: [\n      COMMENTS,\n      // strings \"foobar\"\n      {\n        className: 'string',\n        begin: /\"/,\n        end: /\"/,\n        contains: [\n          {\n            begin: /\"\"/,\n            relevance: 0\n          }\n        ]\n      },\n      // characters ''\n      {\n        // character literals always contain one char\n        className: 'string',\n        begin: /'.'/\n      },\n      {\n        // number literals\n        className: 'number',\n        begin: NUMBER_RE,\n        relevance: 0\n      },\n      {\n        // Attributes\n        className: 'symbol',\n        begin: \"'\" + ID_REGEX\n      },\n      {\n        // package definition, maybe inside generic\n        className: 'title',\n        begin: '(\\\\bwith\\\\s+)?(\\\\bprivate\\\\s+)?\\\\bpackage\\\\s+(\\\\bbody\\\\s+)?',\n        end: '(is|$)',\n        keywords: 'package body',\n        excludeBegin: true,\n        excludeEnd: true,\n        illegal: BAD_CHARS\n      },\n      {\n        // function/procedure declaration/definition\n        // maybe inside generic\n        begin: '(\\\\b(with|overriding)\\\\s+)?\\\\b(function|procedure)\\\\s+',\n        end: '(\\\\bis|\\\\bwith|\\\\brenames|\\\\)\\\\s*;)',\n        keywords: 'overriding function procedure with is renames return',\n        // we need to re-match the 'function' keyword, so that\n        // the title mode below matches only exactly once\n        returnBegin: true,\n        contains:\n                [\n                  COMMENTS,\n                  {\n                    // name of the function/procedure\n                    className: 'title',\n                    begin: '(\\\\bwith\\\\s+)?\\\\b(function|procedure)\\\\s+',\n                    end: '(\\\\(|\\\\s+|$)',\n                    excludeBegin: true,\n                    excludeEnd: true,\n                    illegal: BAD_CHARS\n                  },\n                  // 'self'\n                  // // parameter types\n                  VAR_DECLS,\n                  {\n                    // return type\n                    className: 'type',\n                    begin: '\\\\breturn\\\\s+',\n                    end: '(\\\\s+|;|$)',\n                    keywords: 'return',\n                    excludeBegin: true,\n                    excludeEnd: true,\n                    // we are done with functions\n                    endsParent: true,\n                    illegal: BAD_CHARS\n\n                  }\n                ]\n      },\n      {\n        // new type declarations\n        // maybe inside generic\n        className: 'type',\n        begin: '\\\\b(sub)?type\\\\s+',\n        end: '\\\\s+',\n        keywords: 'type',\n        excludeBegin: true,\n        illegal: BAD_CHARS\n      },\n\n      // see comment above the definition\n      VAR_DECLS\n\n      // no markup\n      // relevance boosters for small snippets\n      // {begin: '\\\\s*=>\\\\s*'},\n      // {begin: '\\\\s*:=\\\\s*'},\n      // {begin: '\\\\s+:=\\\\s+'},\n    ]\n  };\n}\n\nmodule.exports = ada;\n",
      "start": 1699633500535,
      "end": 1699633500618,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1699633500618,
      "end": 1699633500618,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1699633500619,
      "end": 1699633500619,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1699633500619,
      "end": 1699633500619,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1699633500619,
      "end": 1699633500619,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1699633500619,
      "end": 1699633500619,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1699633500619,
      "end": 1699633500619,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1699633500619,
      "end": 1699633500619,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1699633500619,
      "end": 1699633500619,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1699633500620,
      "end": 1699633500620,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1699633500620,
      "end": 1699633500620,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1699633500620,
      "end": 1699633500620,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1699633500620,
      "end": 1699633500620,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1699633500620,
      "end": 1699633500620,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1699633500620,
      "end": 1699633500620,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1699633500620,
      "end": 1699633500620,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1699633500620,
      "end": 1699633500620,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1699633500620,
      "end": 1699633500620,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1699633500620,
      "end": 1699633500620,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1699633500620,
      "end": 1699633500620,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1699633500620,
      "end": 1699633500620,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "result": "/*\nLanguage: Ada\nAuthor: Lars Schulna <kartoffelbrei.mit.muskatnuss@gmail.org>\nDescription: Ada is a general-purpose programming language that has great support for saftey critical and real-time applications.\n             It has been developed by the DoD and thus has been used in military and safety-critical applications (like civil aviation).\n             The first version appeared in the 80s, but it's still actively developed today with\n             the newest standard being Ada2012.\n*/\nimport * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\n\nvar ada_1;\nvar hasRequiredAda;\n\nfunction requireAda () {\n\tif (hasRequiredAda) return ada_1;\n\thasRequiredAda = 1;\n\t// We try to support full Ada2012\n\t//\n\t// We highlight all appearances of types, keywords, literals (string, char, number, bool)\n\t// and titles (user defined function/procedure/package)\n\t// CSS classes are set accordingly\n\t//\n\t// Languages causing problems for language detection:\n\t// xml (broken by Foo : Bar type), elm (broken by Foo : Bar type), vbscript-html (broken by body keyword)\n\t// sql (ada default.txt has a lot of sql keywords)\n\n\t/** @type LanguageFn */\n\tfunction ada(hljs) {\n\t  // Regular expression for Ada numeric literals.\n\t  // stolen form the VHDL highlighter\n\n\t  // Decimal literal:\n\t  const INTEGER_RE = '\\\\d(_|\\\\d)*';\n\t  const EXPONENT_RE = '[eE][-+]?' + INTEGER_RE;\n\t  const DECIMAL_LITERAL_RE = INTEGER_RE + '(\\\\.' + INTEGER_RE + ')?' + '(' + EXPONENT_RE + ')?';\n\n\t  // Based literal:\n\t  const BASED_INTEGER_RE = '\\\\w+';\n\t  const BASED_LITERAL_RE = INTEGER_RE + '#' + BASED_INTEGER_RE + '(\\\\.' + BASED_INTEGER_RE + ')?' + '#' + '(' + EXPONENT_RE + ')?';\n\n\t  const NUMBER_RE = '\\\\b(' + BASED_LITERAL_RE + '|' + DECIMAL_LITERAL_RE + ')';\n\n\t  // Identifier regex\n\t  const ID_REGEX = '[A-Za-z](_?[A-Za-z0-9.])*';\n\n\t  // bad chars, only allowed in literals\n\t  const BAD_CHARS = `[]\\\\{\\\\}%#'\"`;\n\n\t  // Ada doesn't have block comments, only line comments\n\t  const COMMENTS = hljs.COMMENT('--', '$');\n\n\t  // variable declarations of the form\n\t  // Foo : Bar := Baz;\n\t  // where only Bar will be highlighted\n\t  const VAR_DECLS = {\n\t    // TODO: These spaces are not required by the Ada syntax\n\t    // however, I have yet to see handwritten Ada code where\n\t    // someone does not put spaces around :\n\t    begin: '\\\\s+:\\\\s+',\n\t    end: '\\\\s*(:=|;|\\\\)|=>|$)',\n\t    // endsWithParent: true,\n\t    // returnBegin: true,\n\t    illegal: BAD_CHARS,\n\t    contains: [\n\t      {\n\t        // workaround to avoid highlighting\n\t        // named loops and declare blocks\n\t        beginKeywords: 'loop for declare others',\n\t        endsParent: true\n\t      },\n\t      {\n\t        // properly highlight all modifiers\n\t        className: 'keyword',\n\t        beginKeywords: 'not null constant access function procedure in out aliased exception'\n\t      },\n\t      {\n\t        className: 'type',\n\t        begin: ID_REGEX,\n\t        endsParent: true,\n\t        relevance: 0\n\t      }\n\t    ]\n\t  };\n\n\t  const KEYWORDS = [\n\t    \"abort\",\n\t    \"else\",\n\t    \"new\",\n\t    \"return\",\n\t    \"abs\",\n\t    \"elsif\",\n\t    \"not\",\n\t    \"reverse\",\n\t    \"abstract\",\n\t    \"end\",\n\t    \"accept\",\n\t    \"entry\",\n\t    \"select\",\n\t    \"access\",\n\t    \"exception\",\n\t    \"of\",\n\t    \"separate\",\n\t    \"aliased\",\n\t    \"exit\",\n\t    \"or\",\n\t    \"some\",\n\t    \"all\",\n\t    \"others\",\n\t    \"subtype\",\n\t    \"and\",\n\t    \"for\",\n\t    \"out\",\n\t    \"synchronized\",\n\t    \"array\",\n\t    \"function\",\n\t    \"overriding\",\n\t    \"at\",\n\t    \"tagged\",\n\t    \"generic\",\n\t    \"package\",\n\t    \"task\",\n\t    \"begin\",\n\t    \"goto\",\n\t    \"pragma\",\n\t    \"terminate\",\n\t    \"body\",\n\t    \"private\",\n\t    \"then\",\n\t    \"if\",\n\t    \"procedure\",\n\t    \"type\",\n\t    \"case\",\n\t    \"in\",\n\t    \"protected\",\n\t    \"constant\",\n\t    \"interface\",\n\t    \"is\",\n\t    \"raise\",\n\t    \"use\",\n\t    \"declare\",\n\t    \"range\",\n\t    \"delay\",\n\t    \"limited\",\n\t    \"record\",\n\t    \"when\",\n\t    \"delta\",\n\t    \"loop\",\n\t    \"rem\",\n\t    \"while\",\n\t    \"digits\",\n\t    \"renames\",\n\t    \"with\",\n\t    \"do\",\n\t    \"mod\",\n\t    \"requeue\",\n\t    \"xor\"\n\t  ];\n\n\t  return {\n\t    name: 'Ada',\n\t    case_insensitive: true,\n\t    keywords: {\n\t      keyword: KEYWORDS,\n\t      literal: [\n\t        \"True\",\n\t        \"False\"\n\t      ]\n\t    },\n\t    contains: [\n\t      COMMENTS,\n\t      // strings \"foobar\"\n\t      {\n\t        className: 'string',\n\t        begin: /\"/,\n\t        end: /\"/,\n\t        contains: [\n\t          {\n\t            begin: /\"\"/,\n\t            relevance: 0\n\t          }\n\t        ]\n\t      },\n\t      // characters ''\n\t      {\n\t        // character literals always contain one char\n\t        className: 'string',\n\t        begin: /'.'/\n\t      },\n\t      {\n\t        // number literals\n\t        className: 'number',\n\t        begin: NUMBER_RE,\n\t        relevance: 0\n\t      },\n\t      {\n\t        // Attributes\n\t        className: 'symbol',\n\t        begin: \"'\" + ID_REGEX\n\t      },\n\t      {\n\t        // package definition, maybe inside generic\n\t        className: 'title',\n\t        begin: '(\\\\bwith\\\\s+)?(\\\\bprivate\\\\s+)?\\\\bpackage\\\\s+(\\\\bbody\\\\s+)?',\n\t        end: '(is|$)',\n\t        keywords: 'package body',\n\t        excludeBegin: true,\n\t        excludeEnd: true,\n\t        illegal: BAD_CHARS\n\t      },\n\t      {\n\t        // function/procedure declaration/definition\n\t        // maybe inside generic\n\t        begin: '(\\\\b(with|overriding)\\\\s+)?\\\\b(function|procedure)\\\\s+',\n\t        end: '(\\\\bis|\\\\bwith|\\\\brenames|\\\\)\\\\s*;)',\n\t        keywords: 'overriding function procedure with is renames return',\n\t        // we need to re-match the 'function' keyword, so that\n\t        // the title mode below matches only exactly once\n\t        returnBegin: true,\n\t        contains:\n\t                [\n\t                  COMMENTS,\n\t                  {\n\t                    // name of the function/procedure\n\t                    className: 'title',\n\t                    begin: '(\\\\bwith\\\\s+)?\\\\b(function|procedure)\\\\s+',\n\t                    end: '(\\\\(|\\\\s+|$)',\n\t                    excludeBegin: true,\n\t                    excludeEnd: true,\n\t                    illegal: BAD_CHARS\n\t                  },\n\t                  // 'self'\n\t                  // // parameter types\n\t                  VAR_DECLS,\n\t                  {\n\t                    // return type\n\t                    className: 'type',\n\t                    begin: '\\\\breturn\\\\s+',\n\t                    end: '(\\\\s+|;|$)',\n\t                    keywords: 'return',\n\t                    excludeBegin: true,\n\t                    excludeEnd: true,\n\t                    // we are done with functions\n\t                    endsParent: true,\n\t                    illegal: BAD_CHARS\n\n\t                  }\n\t                ]\n\t      },\n\t      {\n\t        // new type declarations\n\t        // maybe inside generic\n\t        className: 'type',\n\t        begin: '\\\\b(sub)?type\\\\s+',\n\t        end: '\\\\s+',\n\t        keywords: 'type',\n\t        excludeBegin: true,\n\t        illegal: BAD_CHARS\n\t      },\n\n\t      // see comment above the definition\n\t      VAR_DECLS\n\n\t      // no markup\n\t      // relevance boosters for small snippets\n\t      // {begin: '\\\\s*=>\\\\s*'},\n\t      // {begin: '\\\\s*:=\\\\s*'},\n\t      // {begin: '\\\\s+:=\\\\s+'},\n\t    ]\n\t  };\n\t}\n\n\tada_1 = ada;\n\treturn ada_1;\n}\n\nexport { requireAda as __require };",
      "start": 1699633500620,
      "end": 1699633500621,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "file": null,
        "sources": [
          null
        ],
        "sourcesContent": [
          null
        ],
        "names": [],
        "mappings": "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"
      }
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1699633500621,
      "end": 1699633500621,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1699633500621,
      "end": 1699633500621,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1699633500621,
      "end": 1699633500621,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1699633500621,
      "end": 1699633500621,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1699633500621,
      "end": 1699633500622,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1699633500622,
      "end": 1699633500622,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1699633500622,
      "end": 1699633500622,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1699633500622,
      "end": 1699633500622,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1699633500622,
      "end": 1699633500622,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1699633500622,
      "end": 1699633500622,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1699633500622,
      "end": 1699633500622,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1699633500622,
      "end": 1699633500622,
      "order": "normal"
    }
  ]
}
