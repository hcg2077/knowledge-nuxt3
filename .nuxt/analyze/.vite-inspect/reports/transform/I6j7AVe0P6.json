{
  "resolvedId": "F:/workSpace2024/knowledge-nuxt3/node_modules/markdown-it/lib/rules_inline/fragments_join.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "// Clean up tokens after emphasis and strikethrough postprocessing:\n// merge adjacent text nodes into one and re-calculate all token levels\n//\n// This is necessary because initially emphasis delimiter markers (*, _, ~)\n// are treated as their own separate text tokens. Then emphasis rule either\n// leaves them as text (needed to merge with adjacent text) or turns them\n// into opening/closing tags (which messes up levels inside).\n//\n'use strict';\n\n\nmodule.exports = function fragments_join(state) {\n  var curr, last,\n      level = 0,\n      tokens = state.tokens,\n      max = state.tokens.length;\n\n  for (curr = last = 0; curr < max; curr++) {\n    // re-calculate levels after emphasis/strikethrough turns some text nodes\n    // into opening/closing tags\n    if (tokens[curr].nesting < 0) level--; // closing tag\n    tokens[curr].level = level;\n    if (tokens[curr].nesting > 0) level++; // opening tag\n\n    if (tokens[curr].type === 'text' &&\n        curr + 1 < max &&\n        tokens[curr + 1].type === 'text') {\n\n      // collapse two adjacent text nodes\n      tokens[curr + 1].content = tokens[curr].content + tokens[curr + 1].content;\n    } else {\n      if (curr !== last) { tokens[last] = tokens[curr]; }\n\n      last++;\n    }\n  }\n\n  if (curr !== last) {\n    tokens.length = last;\n  }\n};\n",
      "start": 1699633501840,
      "end": 1699633501931,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1699633501931,
      "end": 1699633501931,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1699633501931,
      "end": 1699633501931,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1699633501931,
      "end": 1699633501932,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1699633501932,
      "end": 1699633501932,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1699633501932,
      "end": 1699633501932,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1699633501932,
      "end": 1699633501932,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1699633501932,
      "end": 1699633501932,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1699633501932,
      "end": 1699633501932,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1699633501932,
      "end": 1699633501932,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1699633501932,
      "end": 1699633501932,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1699633501932,
      "end": 1699633501932,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1699633501932,
      "end": 1699633501932,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1699633501932,
      "end": 1699633501932,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1699633501932,
      "end": 1699633501932,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1699633501932,
      "end": 1699633501932,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1699633501932,
      "end": 1699633501932,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1699633501932,
      "end": 1699633501932,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1699633501932,
      "end": 1699633501932,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1699633501932,
      "end": 1699633501932,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1699633501932,
      "end": 1699633501932,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "result": "import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\n\n// Clean up tokens after emphasis and strikethrough postprocessing:\n// merge adjacent text nodes into one and re-calculate all token levels\n//\n// This is necessary because initially emphasis delimiter markers (*, _, ~)\n// are treated as their own separate text tokens. Then emphasis rule either\n// leaves them as text (needed to merge with adjacent text) or turns them\n// into opening/closing tags (which messes up levels inside).\n//\n'use strict';\n\n\nvar fragments_join = function fragments_join(state) {\n  var curr, last,\n      level = 0,\n      tokens = state.tokens,\n      max = state.tokens.length;\n\n  for (curr = last = 0; curr < max; curr++) {\n    // re-calculate levels after emphasis/strikethrough turns some text nodes\n    // into opening/closing tags\n    if (tokens[curr].nesting < 0) level--; // closing tag\n    tokens[curr].level = level;\n    if (tokens[curr].nesting > 0) level++; // opening tag\n\n    if (tokens[curr].type === 'text' &&\n        curr + 1 < max &&\n        tokens[curr + 1].type === 'text') {\n\n      // collapse two adjacent text nodes\n      tokens[curr + 1].content = tokens[curr].content + tokens[curr + 1].content;\n    } else {\n      if (curr !== last) { tokens[last] = tokens[curr]; }\n\n      last++;\n    }\n  }\n\n  if (curr !== last) {\n    tokens.length = last;\n  }\n};\n\nexport default /*@__PURE__*/commonjsHelpers.getDefaultExportFromCjs(fragments_join);\nexport { fragments_join as __moduleExports };",
      "start": 1699633501932,
      "end": 1699633501933,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "file": null,
        "sources": [
          null
        ],
        "sourcesContent": [
          null
        ],
        "names": [],
        "mappings": ";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,CAAC;AACb;AACA;IACA,cAAc,GAAG,SAAS,cAAc,CAAC,KAAK,EAAE;AAChD,EAAE,IAAI,IAAI,EAAE,IAAI;AAChB,MAAM,KAAK,GAAG,CAAC;AACf,MAAM,MAAM,GAAG,KAAK,CAAC,MAAM;AAC3B,MAAM,GAAG,GAAG,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC;AAChC;AACA,EAAE,KAAK,IAAI,GAAG,IAAI,GAAG,CAAC,EAAE,IAAI,GAAG,GAAG,EAAE,IAAI,EAAE,EAAE;AAC5C;AACA;AACA,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC,CAAC,OAAO,GAAG,CAAC,EAAE,KAAK,EAAE,CAAC;AAC1C,IAAI,MAAM,CAAC,IAAI,CAAC,CAAC,KAAK,GAAG,KAAK,CAAC;AAC/B,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC,CAAC,OAAO,GAAG,CAAC,EAAE,KAAK,EAAE,CAAC;AAC1C;AACA,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,KAAK,MAAM;AACpC,QAAQ,IAAI,GAAG,CAAC,GAAG,GAAG;AACtB,QAAQ,MAAM,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,IAAI,KAAK,MAAM,EAAE;AAC1C;AACA;AACA,MAAM,MAAM,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,OAAO,GAAG,MAAM,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC;AACjF,KAAK,MAAM;AACX,MAAM,IAAI,IAAI,KAAK,IAAI,EAAE,EAAE,MAAM,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,EAAE;AACzD;AACA,MAAM,IAAI,EAAE,CAAC;AACb,KAAK;AACL,GAAG;AACH;AACA,EAAE,IAAI,IAAI,KAAK,IAAI,EAAE;AACrB,IAAI,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC;AACzB,GAAG;AACH,CAAC"
      }
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1699633501933,
      "end": 1699633501933,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1699633501933,
      "end": 1699633501933,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1699633501933,
      "end": 1699633501933,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1699633501933,
      "end": 1699633501933,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1699633501933,
      "end": 1699633501933,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1699633501933,
      "end": 1699633501933,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1699633501933,
      "end": 1699633501933,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1699633501933,
      "end": 1699633501933,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1699633501933,
      "end": 1699633501933,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1699633501933,
      "end": 1699633501933,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1699633501933,
      "end": 1699633501933,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1699633501933,
      "end": 1699633501933,
      "order": "normal"
    }
  ]
}
