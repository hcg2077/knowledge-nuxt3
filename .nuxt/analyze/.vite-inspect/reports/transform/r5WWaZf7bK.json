{
  "resolvedId": "F:/workSpace2024/knowledge-nuxt3/node_modules/crypto-js/pbkdf2.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": ";(function (root, factory, undef) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./sha256\"), require(\"./hmac\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\", \"./sha256\", \"./hmac\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var Base = C_lib.Base;\n\t    var WordArray = C_lib.WordArray;\n\t    var C_algo = C.algo;\n\t    var SHA256 = C_algo.SHA256;\n\t    var HMAC = C_algo.HMAC;\n\n\t    /**\n\t     * Password-Based Key Derivation Function 2 algorithm.\n\t     */\n\t    var PBKDF2 = C_algo.PBKDF2 = Base.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)\n\t         * @property {Hasher} hasher The hasher to use. Default: SHA256\n\t         * @property {number} iterations The number of iterations to perform. Default: 250000\n\t         */\n\t        cfg: Base.extend({\n\t            keySize: 128/32,\n\t            hasher: SHA256,\n\t            iterations: 250000\n\t        }),\n\n\t        /**\n\t         * Initializes a newly created key derivation function.\n\t         *\n\t         * @param {Object} cfg (Optional) The configuration options to use for the derivation.\n\t         *\n\t         * @example\n\t         *\n\t         *     var kdf = CryptoJS.algo.PBKDF2.create();\n\t         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });\n\t         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });\n\t         */\n\t        init: function (cfg) {\n\t            this.cfg = this.cfg.extend(cfg);\n\t        },\n\n\t        /**\n\t         * Computes the Password-Based Key Derivation Function 2.\n\t         *\n\t         * @param {WordArray|string} password The password.\n\t         * @param {WordArray|string} salt A salt.\n\t         *\n\t         * @return {WordArray} The derived key.\n\t         *\n\t         * @example\n\t         *\n\t         *     var key = kdf.compute(password, salt);\n\t         */\n\t        compute: function (password, salt) {\n\t            // Shortcut\n\t            var cfg = this.cfg;\n\n\t            // Init HMAC\n\t            var hmac = HMAC.create(cfg.hasher, password);\n\n\t            // Initial values\n\t            var derivedKey = WordArray.create();\n\t            var blockIndex = WordArray.create([0x00000001]);\n\n\t            // Shortcuts\n\t            var derivedKeyWords = derivedKey.words;\n\t            var blockIndexWords = blockIndex.words;\n\t            var keySize = cfg.keySize;\n\t            var iterations = cfg.iterations;\n\n\t            // Generate key\n\t            while (derivedKeyWords.length < keySize) {\n\t                var block = hmac.update(salt).finalize(blockIndex);\n\t                hmac.reset();\n\n\t                // Shortcuts\n\t                var blockWords = block.words;\n\t                var blockWordsLength = blockWords.length;\n\n\t                // Iterations\n\t                var intermediate = block;\n\t                for (var i = 1; i < iterations; i++) {\n\t                    intermediate = hmac.finalize(intermediate);\n\t                    hmac.reset();\n\n\t                    // Shortcut\n\t                    var intermediateWords = intermediate.words;\n\n\t                    // XOR intermediate with block\n\t                    for (var j = 0; j < blockWordsLength; j++) {\n\t                        blockWords[j] ^= intermediateWords[j];\n\t                    }\n\t                }\n\n\t                derivedKey.concat(block);\n\t                blockIndexWords[0]++;\n\t            }\n\t            derivedKey.sigBytes = keySize * 4;\n\n\t            return derivedKey;\n\t        }\n\t    });\n\n\t    /**\n\t     * Computes the Password-Based Key Derivation Function 2.\n\t     *\n\t     * @param {WordArray|string} password The password.\n\t     * @param {WordArray|string} salt A salt.\n\t     * @param {Object} cfg (Optional) The configuration options to use for this computation.\n\t     *\n\t     * @return {WordArray} The derived key.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var key = CryptoJS.PBKDF2(password, salt);\n\t     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8 });\n\t     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8, iterations: 1000 });\n\t     */\n\t    C.PBKDF2 = function (password, salt, cfg) {\n\t        return PBKDF2.create(cfg).compute(password, salt);\n\t    };\n\t}());\n\n\n\treturn CryptoJS.PBKDF2;\n\n}));",
      "start": 1699633499854,
      "end": 1699633499958,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1699633499958,
      "end": 1699633499958,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1699633499958,
      "end": 1699633499959,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1699633499959,
      "end": 1699633499959,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1699633499959,
      "end": 1699633499959,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1699633499959,
      "end": 1699633499959,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1699633499959,
      "end": 1699633499959,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1699633499959,
      "end": 1699633499959,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1699633499959,
      "end": 1699633499959,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1699633499959,
      "end": 1699633499959,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1699633499959,
      "end": 1699633499959,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1699633499959,
      "end": 1699633499959,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1699633499959,
      "end": 1699633499959,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1699633499959,
      "end": 1699633499959,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1699633499959,
      "end": 1699633499960,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1699633499960,
      "end": 1699633499960,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1699633499960,
      "end": 1699633499960,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1699633499960,
      "end": 1699633499960,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1699633499960,
      "end": 1699633499960,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1699633499960,
      "end": 1699633499960,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1699633499960,
      "end": 1699633499960,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "result": "import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __module as pbkdf2Module } from \"\\u0000F:/workSpace2024/knowledge-nuxt3/node_modules/crypto-js/pbkdf2.js?commonjs-module\";\nvar pbkdf2 = pbkdf2Module.exports;\nimport { __require as require$$0 } from \"\\u0000F:/workSpace2024/knowledge-nuxt3/node_modules/crypto-js/core.js?commonjs-wrapped\";\nimport { __require as require$$1 } from \"\\u0000F:/workSpace2024/knowledge-nuxt3/node_modules/crypto-js/sha256.js?commonjs-wrapped\";\nimport { __require as require$$2 } from \"\\u0000F:/workSpace2024/knowledge-nuxt3/node_modules/crypto-js/hmac.js?commonjs-wrapped\";\n\nvar hasRequiredPbkdf2;\n\nfunction requirePbkdf2 () {\n\tif (hasRequiredPbkdf2) return pbkdf2Module.exports;\n\thasRequiredPbkdf2 = 1;\n\t(function (module, exports) {\n\t\t;(function (root, factory, undef) {\n\t\t\tif ('object' === \"object\") {\n\t\t\t\t// CommonJS\n\t\t\t\tmodule.exports = exports = factory(require$$0(), require$$1(), require$$2());\n\t\t\t}\n\t\t\telse if (typeof undefined === \"function\" && undefined.amd) {\n\t\t\t\t// AMD\n\t\t\t\tundefined([\"./core\", \"./sha256\", \"./hmac\"], factory);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Global (browser)\n\t\t\t\tfactory(root.CryptoJS);\n\t\t\t}\n\t\t}(commonjsHelpers.commonjsGlobal, function (CryptoJS) {\n\n\t\t\t(function () {\n\t\t\t    // Shortcuts\n\t\t\t    var C = CryptoJS;\n\t\t\t    var C_lib = C.lib;\n\t\t\t    var Base = C_lib.Base;\n\t\t\t    var WordArray = C_lib.WordArray;\n\t\t\t    var C_algo = C.algo;\n\t\t\t    var SHA256 = C_algo.SHA256;\n\t\t\t    var HMAC = C_algo.HMAC;\n\n\t\t\t    /**\n\t\t\t     * Password-Based Key Derivation Function 2 algorithm.\n\t\t\t     */\n\t\t\t    var PBKDF2 = C_algo.PBKDF2 = Base.extend({\n\t\t\t        /**\n\t\t\t         * Configuration options.\n\t\t\t         *\n\t\t\t         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)\n\t\t\t         * @property {Hasher} hasher The hasher to use. Default: SHA256\n\t\t\t         * @property {number} iterations The number of iterations to perform. Default: 250000\n\t\t\t         */\n\t\t\t        cfg: Base.extend({\n\t\t\t            keySize: 128/32,\n\t\t\t            hasher: SHA256,\n\t\t\t            iterations: 250000\n\t\t\t        }),\n\n\t\t\t        /**\n\t\t\t         * Initializes a newly created key derivation function.\n\t\t\t         *\n\t\t\t         * @param {Object} cfg (Optional) The configuration options to use for the derivation.\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var kdf = CryptoJS.algo.PBKDF2.create();\n\t\t\t         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });\n\t\t\t         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });\n\t\t\t         */\n\t\t\t        init: function (cfg) {\n\t\t\t            this.cfg = this.cfg.extend(cfg);\n\t\t\t        },\n\n\t\t\t        /**\n\t\t\t         * Computes the Password-Based Key Derivation Function 2.\n\t\t\t         *\n\t\t\t         * @param {WordArray|string} password The password.\n\t\t\t         * @param {WordArray|string} salt A salt.\n\t\t\t         *\n\t\t\t         * @return {WordArray} The derived key.\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var key = kdf.compute(password, salt);\n\t\t\t         */\n\t\t\t        compute: function (password, salt) {\n\t\t\t            // Shortcut\n\t\t\t            var cfg = this.cfg;\n\n\t\t\t            // Init HMAC\n\t\t\t            var hmac = HMAC.create(cfg.hasher, password);\n\n\t\t\t            // Initial values\n\t\t\t            var derivedKey = WordArray.create();\n\t\t\t            var blockIndex = WordArray.create([0x00000001]);\n\n\t\t\t            // Shortcuts\n\t\t\t            var derivedKeyWords = derivedKey.words;\n\t\t\t            var blockIndexWords = blockIndex.words;\n\t\t\t            var keySize = cfg.keySize;\n\t\t\t            var iterations = cfg.iterations;\n\n\t\t\t            // Generate key\n\t\t\t            while (derivedKeyWords.length < keySize) {\n\t\t\t                var block = hmac.update(salt).finalize(blockIndex);\n\t\t\t                hmac.reset();\n\n\t\t\t                // Shortcuts\n\t\t\t                var blockWords = block.words;\n\t\t\t                var blockWordsLength = blockWords.length;\n\n\t\t\t                // Iterations\n\t\t\t                var intermediate = block;\n\t\t\t                for (var i = 1; i < iterations; i++) {\n\t\t\t                    intermediate = hmac.finalize(intermediate);\n\t\t\t                    hmac.reset();\n\n\t\t\t                    // Shortcut\n\t\t\t                    var intermediateWords = intermediate.words;\n\n\t\t\t                    // XOR intermediate with block\n\t\t\t                    for (var j = 0; j < blockWordsLength; j++) {\n\t\t\t                        blockWords[j] ^= intermediateWords[j];\n\t\t\t                    }\n\t\t\t                }\n\n\t\t\t                derivedKey.concat(block);\n\t\t\t                blockIndexWords[0]++;\n\t\t\t            }\n\t\t\t            derivedKey.sigBytes = keySize * 4;\n\n\t\t\t            return derivedKey;\n\t\t\t        }\n\t\t\t    });\n\n\t\t\t    /**\n\t\t\t     * Computes the Password-Based Key Derivation Function 2.\n\t\t\t     *\n\t\t\t     * @param {WordArray|string} password The password.\n\t\t\t     * @param {WordArray|string} salt A salt.\n\t\t\t     * @param {Object} cfg (Optional) The configuration options to use for this computation.\n\t\t\t     *\n\t\t\t     * @return {WordArray} The derived key.\n\t\t\t     *\n\t\t\t     * @static\n\t\t\t     *\n\t\t\t     * @example\n\t\t\t     *\n\t\t\t     *     var key = CryptoJS.PBKDF2(password, salt);\n\t\t\t     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8 });\n\t\t\t     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8, iterations: 1000 });\n\t\t\t     */\n\t\t\t    C.PBKDF2 = function (password, salt, cfg) {\n\t\t\t        return PBKDF2.create(cfg).compute(password, salt);\n\t\t\t    };\n\t\t\t}());\n\n\n\t\t\treturn CryptoJS.PBKDF2;\n\n\t\t})); \n\t} (pbkdf2Module, pbkdf2Module.exports));\n\treturn pbkdf2Module.exports;\n}\n\nexport { requirePbkdf2 as __require };",
      "start": 1699633499960,
      "end": 1699633500043,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "file": null,
        "sources": [
          null
        ],
        "sourcesContent": [
          null
        ],
        "names": [
          "define",
          "this"
        ],
        "mappings": "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"
      }
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1699633500044,
      "end": 1699633500044,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1699633500044,
      "end": 1699633500044,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1699633500044,
      "end": 1699633500045,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1699633500045,
      "end": 1699633500045,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1699633500045,
      "end": 1699633500045,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1699633500046,
      "end": 1699633500046,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1699633500046,
      "end": 1699633500046,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1699633500046,
      "end": 1699633500046,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1699633500046,
      "end": 1699633500046,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1699633500047,
      "end": 1699633500047,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1699633500047,
      "end": 1699633500047,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1699633500047,
      "end": 1699633500047,
      "order": "normal"
    }
  ]
}
