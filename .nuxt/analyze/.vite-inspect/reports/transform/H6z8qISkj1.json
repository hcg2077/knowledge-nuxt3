{
  "resolvedId": "F:/workSpace2024/knowledge-nuxt3/node_modules/highlight.js/lib/languages/julia.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/*\nLanguage: Julia\nDescription: Julia is a high-level, high-performance, dynamic programming language.\nAuthor: Kenta Sato <bicycle1885@gmail.com>\nContributors: Alex Arslan <ararslan@comcast.net>, Fredrik Ekre <ekrefredrik@gmail.com>\nWebsite: https://julialang.org\n*/\n\nfunction julia(hljs) {\n  // Since there are numerous special names in Julia, it is too much trouble\n  // to maintain them by hand. Hence these names (i.e. keywords, literals and\n  // built-ins) are automatically generated from Julia 1.5.2 itself through\n  // the following scripts for each.\n\n  // ref: https://docs.julialang.org/en/v1/manual/variables/#Allowed-Variable-Names\n  const VARIABLE_NAME_RE = '[A-Za-z_\\\\u00A1-\\\\uFFFF][A-Za-z_0-9\\\\u00A1-\\\\uFFFF]*';\n\n  // # keyword generator, multi-word keywords handled manually below (Julia 1.5.2)\n  // import REPL.REPLCompletions\n  // res = String[\"in\", \"isa\", \"where\"]\n  // for kw in collect(x.keyword for x in REPLCompletions.complete_keyword(\"\"))\n  //     if !(contains(kw, \" \") || kw == \"struct\")\n  //         push!(res, kw)\n  //     end\n  // end\n  // sort!(unique!(res))\n  // foreach(x -> println(\"\\'\", x, \"\\',\"), res)\n  const KEYWORD_LIST = [\n    'baremodule',\n    'begin',\n    'break',\n    'catch',\n    'ccall',\n    'const',\n    'continue',\n    'do',\n    'else',\n    'elseif',\n    'end',\n    'export',\n    'false',\n    'finally',\n    'for',\n    'function',\n    'global',\n    'if',\n    'import',\n    'in',\n    'isa',\n    'let',\n    'local',\n    'macro',\n    'module',\n    'quote',\n    'return',\n    'true',\n    'try',\n    'using',\n    'where',\n    'while',\n  ];\n\n  // # literal generator (Julia 1.5.2)\n  // import REPL.REPLCompletions\n  // res = String[\"true\", \"false\"]\n  // for compl in filter!(x -> isa(x, REPLCompletions.ModuleCompletion) && (x.parent === Base || x.parent === Core),\n  //                     REPLCompletions.completions(\"\", 0)[1])\n  //     try\n  //         v = eval(Symbol(compl.mod))\n  //         if !(v isa Function || v isa Type || v isa TypeVar || v isa Module || v isa Colon)\n  //             push!(res, compl.mod)\n  //         end\n  //     catch e\n  //     end\n  // end\n  // sort!(unique!(res))\n  // foreach(x -> println(\"\\'\", x, \"\\',\"), res)\n  const LITERAL_LIST = [\n    'ARGS',\n    'C_NULL',\n    'DEPOT_PATH',\n    'ENDIAN_BOM',\n    'ENV',\n    'Inf',\n    'Inf16',\n    'Inf32',\n    'Inf64',\n    'InsertionSort',\n    'LOAD_PATH',\n    'MergeSort',\n    'NaN',\n    'NaN16',\n    'NaN32',\n    'NaN64',\n    'PROGRAM_FILE',\n    'QuickSort',\n    'RoundDown',\n    'RoundFromZero',\n    'RoundNearest',\n    'RoundNearestTiesAway',\n    'RoundNearestTiesUp',\n    'RoundToZero',\n    'RoundUp',\n    'VERSION|0',\n    'devnull',\n    'false',\n    'im',\n    'missing',\n    'nothing',\n    'pi',\n    'stderr',\n    'stdin',\n    'stdout',\n    'true',\n    'undef',\n    'π',\n    'ℯ',\n  ];\n\n  // # built_in generator (Julia 1.5.2)\n  // import REPL.REPLCompletions\n  // res = String[]\n  // for compl in filter!(x -> isa(x, REPLCompletions.ModuleCompletion) && (x.parent === Base || x.parent === Core),\n  //                     REPLCompletions.completions(\"\", 0)[1])\n  //     try\n  //         v = eval(Symbol(compl.mod))\n  //         if (v isa Type || v isa TypeVar) && (compl.mod != \"=>\")\n  //             push!(res, compl.mod)\n  //         end\n  //     catch e\n  //     end\n  // end\n  // sort!(unique!(res))\n  // foreach(x -> println(\"\\'\", x, \"\\',\"), res)\n  const BUILT_IN_LIST = [\n    'AbstractArray',\n    'AbstractChannel',\n    'AbstractChar',\n    'AbstractDict',\n    'AbstractDisplay',\n    'AbstractFloat',\n    'AbstractIrrational',\n    'AbstractMatrix',\n    'AbstractRange',\n    'AbstractSet',\n    'AbstractString',\n    'AbstractUnitRange',\n    'AbstractVecOrMat',\n    'AbstractVector',\n    'Any',\n    'ArgumentError',\n    'Array',\n    'AssertionError',\n    'BigFloat',\n    'BigInt',\n    'BitArray',\n    'BitMatrix',\n    'BitSet',\n    'BitVector',\n    'Bool',\n    'BoundsError',\n    'CapturedException',\n    'CartesianIndex',\n    'CartesianIndices',\n    'Cchar',\n    'Cdouble',\n    'Cfloat',\n    'Channel',\n    'Char',\n    'Cint',\n    'Cintmax_t',\n    'Clong',\n    'Clonglong',\n    'Cmd',\n    'Colon',\n    'Complex',\n    'ComplexF16',\n    'ComplexF32',\n    'ComplexF64',\n    'CompositeException',\n    'Condition',\n    'Cptrdiff_t',\n    'Cshort',\n    'Csize_t',\n    'Cssize_t',\n    'Cstring',\n    'Cuchar',\n    'Cuint',\n    'Cuintmax_t',\n    'Culong',\n    'Culonglong',\n    'Cushort',\n    'Cvoid',\n    'Cwchar_t',\n    'Cwstring',\n    'DataType',\n    'DenseArray',\n    'DenseMatrix',\n    'DenseVecOrMat',\n    'DenseVector',\n    'Dict',\n    'DimensionMismatch',\n    'Dims',\n    'DivideError',\n    'DomainError',\n    'EOFError',\n    'Enum',\n    'ErrorException',\n    'Exception',\n    'ExponentialBackOff',\n    'Expr',\n    'Float16',\n    'Float32',\n    'Float64',\n    'Function',\n    'GlobalRef',\n    'HTML',\n    'IO',\n    'IOBuffer',\n    'IOContext',\n    'IOStream',\n    'IdDict',\n    'IndexCartesian',\n    'IndexLinear',\n    'IndexStyle',\n    'InexactError',\n    'InitError',\n    'Int',\n    'Int128',\n    'Int16',\n    'Int32',\n    'Int64',\n    'Int8',\n    'Integer',\n    'InterruptException',\n    'InvalidStateException',\n    'Irrational',\n    'KeyError',\n    'LinRange',\n    'LineNumberNode',\n    'LinearIndices',\n    'LoadError',\n    'MIME',\n    'Matrix',\n    'Method',\n    'MethodError',\n    'Missing',\n    'MissingException',\n    'Module',\n    'NTuple',\n    'NamedTuple',\n    'Nothing',\n    'Number',\n    'OrdinalRange',\n    'OutOfMemoryError',\n    'OverflowError',\n    'Pair',\n    'PartialQuickSort',\n    'PermutedDimsArray',\n    'Pipe',\n    'ProcessFailedException',\n    'Ptr',\n    'QuoteNode',\n    'Rational',\n    'RawFD',\n    'ReadOnlyMemoryError',\n    'Real',\n    'ReentrantLock',\n    'Ref',\n    'Regex',\n    'RegexMatch',\n    'RoundingMode',\n    'SegmentationFault',\n    'Set',\n    'Signed',\n    'Some',\n    'StackOverflowError',\n    'StepRange',\n    'StepRangeLen',\n    'StridedArray',\n    'StridedMatrix',\n    'StridedVecOrMat',\n    'StridedVector',\n    'String',\n    'StringIndexError',\n    'SubArray',\n    'SubString',\n    'SubstitutionString',\n    'Symbol',\n    'SystemError',\n    'Task',\n    'TaskFailedException',\n    'Text',\n    'TextDisplay',\n    'Timer',\n    'Tuple',\n    'Type',\n    'TypeError',\n    'TypeVar',\n    'UInt',\n    'UInt128',\n    'UInt16',\n    'UInt32',\n    'UInt64',\n    'UInt8',\n    'UndefInitializer',\n    'UndefKeywordError',\n    'UndefRefError',\n    'UndefVarError',\n    'Union',\n    'UnionAll',\n    'UnitRange',\n    'Unsigned',\n    'Val',\n    'Vararg',\n    'VecElement',\n    'VecOrMat',\n    'Vector',\n    'VersionNumber',\n    'WeakKeyDict',\n    'WeakRef',\n  ];\n\n  const KEYWORDS = {\n    $pattern: VARIABLE_NAME_RE,\n    keyword: KEYWORD_LIST,\n    literal: LITERAL_LIST,\n    built_in: BUILT_IN_LIST,\n  };\n\n  // placeholder for recursive self-reference\n  const DEFAULT = {\n    keywords: KEYWORDS,\n    illegal: /<\\//\n  };\n\n  // ref: https://docs.julialang.org/en/v1/manual/integers-and-floating-point-numbers/\n  const NUMBER = {\n    className: 'number',\n    // supported numeric literals:\n    //  * binary literal (e.g. 0x10)\n    //  * octal literal (e.g. 0o76543210)\n    //  * hexadecimal literal (e.g. 0xfedcba876543210)\n    //  * hexadecimal floating point literal (e.g. 0x1p0, 0x1.2p2)\n    //  * decimal literal (e.g. 9876543210, 100_000_000)\n    //  * floating pointe literal (e.g. 1.2, 1.2f, .2, 1., 1.2e10, 1.2e-10)\n    begin: /(\\b0x[\\d_]*(\\.[\\d_]*)?|0x\\.\\d[\\d_]*)p[-+]?\\d+|\\b0[box][a-fA-F0-9][a-fA-F0-9_]*|(\\b\\d[\\d_]*(\\.[\\d_]*)?|\\.\\d[\\d_]*)([eEfF][-+]?\\d+)?/,\n    relevance: 0\n  };\n\n  const CHAR = {\n    className: 'string',\n    begin: /'(.|\\\\[xXuU][a-zA-Z0-9]+)'/\n  };\n\n  const INTERPOLATION = {\n    className: 'subst',\n    begin: /\\$\\(/,\n    end: /\\)/,\n    keywords: KEYWORDS\n  };\n\n  const INTERPOLATED_VARIABLE = {\n    className: 'variable',\n    begin: '\\\\$' + VARIABLE_NAME_RE\n  };\n\n  // TODO: neatly escape normal code in string literal\n  const STRING = {\n    className: 'string',\n    contains: [\n      hljs.BACKSLASH_ESCAPE,\n      INTERPOLATION,\n      INTERPOLATED_VARIABLE\n    ],\n    variants: [\n      {\n        begin: /\\w*\"\"\"/,\n        end: /\"\"\"\\w*/,\n        relevance: 10\n      },\n      {\n        begin: /\\w*\"/,\n        end: /\"\\w*/\n      }\n    ]\n  };\n\n  const COMMAND = {\n    className: 'string',\n    contains: [\n      hljs.BACKSLASH_ESCAPE,\n      INTERPOLATION,\n      INTERPOLATED_VARIABLE\n    ],\n    begin: '`',\n    end: '`'\n  };\n\n  const MACROCALL = {\n    className: 'meta',\n    begin: '@' + VARIABLE_NAME_RE\n  };\n\n  const COMMENT = {\n    className: 'comment',\n    variants: [\n      {\n        begin: '#=',\n        end: '=#',\n        relevance: 10\n      },\n      {\n        begin: '#',\n        end: '$'\n      }\n    ]\n  };\n\n  DEFAULT.name = 'Julia';\n  DEFAULT.contains = [\n    NUMBER,\n    CHAR,\n    STRING,\n    COMMAND,\n    MACROCALL,\n    COMMENT,\n    hljs.HASH_COMMENT_MODE,\n    {\n      className: 'keyword',\n      begin:\n        '\\\\b(((abstract|primitive)\\\\s+)type|(mutable\\\\s+)?struct)\\\\b'\n    },\n    { begin: /<:/ } // relevance booster\n  ];\n  INTERPOLATION.contains = DEFAULT.contains;\n\n  return DEFAULT;\n}\n\nmodule.exports = julia;\n",
      "start": 1699633500952,
      "end": 1699633501089,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1699633501090,
      "end": 1699633501090,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1699633501090,
      "end": 1699633501090,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1699633501090,
      "end": 1699633501090,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1699633501090,
      "end": 1699633501090,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1699633501090,
      "end": 1699633501090,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1699633501090,
      "end": 1699633501090,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1699633501090,
      "end": 1699633501090,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1699633501090,
      "end": 1699633501090,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1699633501090,
      "end": 1699633501090,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1699633501090,
      "end": 1699633501090,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1699633501091,
      "end": 1699633501091,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1699633501091,
      "end": 1699633501091,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1699633501091,
      "end": 1699633501091,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1699633501091,
      "end": 1699633501091,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1699633501091,
      "end": 1699633501091,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1699633501091,
      "end": 1699633501091,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1699633501091,
      "end": 1699633501091,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1699633501091,
      "end": 1699633501091,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1699633501091,
      "end": 1699633501091,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1699633501091,
      "end": 1699633501091,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "result": "/*\nLanguage: Julia\nDescription: Julia is a high-level, high-performance, dynamic programming language.\nAuthor: Kenta Sato <bicycle1885@gmail.com>\nContributors: Alex Arslan <ararslan@comcast.net>, Fredrik Ekre <ekrefredrik@gmail.com>\nWebsite: https://julialang.org\n*/\nimport * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\n\nvar julia_1;\nvar hasRequiredJulia;\n\nfunction requireJulia () {\n\tif (hasRequiredJulia) return julia_1;\n\thasRequiredJulia = 1;\n\tfunction julia(hljs) {\n\t  // Since there are numerous special names in Julia, it is too much trouble\n\t  // to maintain them by hand. Hence these names (i.e. keywords, literals and\n\t  // built-ins) are automatically generated from Julia 1.5.2 itself through\n\t  // the following scripts for each.\n\n\t  // ref: https://docs.julialang.org/en/v1/manual/variables/#Allowed-Variable-Names\n\t  const VARIABLE_NAME_RE = '[A-Za-z_\\\\u00A1-\\\\uFFFF][A-Za-z_0-9\\\\u00A1-\\\\uFFFF]*';\n\n\t  // # keyword generator, multi-word keywords handled manually below (Julia 1.5.2)\n\t  // import REPL.REPLCompletions\n\t  // res = String[\"in\", \"isa\", \"where\"]\n\t  // for kw in collect(x.keyword for x in REPLCompletions.complete_keyword(\"\"))\n\t  //     if !(contains(kw, \" \") || kw == \"struct\")\n\t  //         push!(res, kw)\n\t  //     end\n\t  // end\n\t  // sort!(unique!(res))\n\t  // foreach(x -> println(\"\\'\", x, \"\\',\"), res)\n\t  const KEYWORD_LIST = [\n\t    'baremodule',\n\t    'begin',\n\t    'break',\n\t    'catch',\n\t    'ccall',\n\t    'const',\n\t    'continue',\n\t    'do',\n\t    'else',\n\t    'elseif',\n\t    'end',\n\t    'export',\n\t    'false',\n\t    'finally',\n\t    'for',\n\t    'function',\n\t    'global',\n\t    'if',\n\t    'import',\n\t    'in',\n\t    'isa',\n\t    'let',\n\t    'local',\n\t    'macro',\n\t    'module',\n\t    'quote',\n\t    'return',\n\t    'true',\n\t    'try',\n\t    'using',\n\t    'where',\n\t    'while',\n\t  ];\n\n\t  // # literal generator (Julia 1.5.2)\n\t  // import REPL.REPLCompletions\n\t  // res = String[\"true\", \"false\"]\n\t  // for compl in filter!(x -> isa(x, REPLCompletions.ModuleCompletion) && (x.parent === Base || x.parent === Core),\n\t  //                     REPLCompletions.completions(\"\", 0)[1])\n\t  //     try\n\t  //         v = eval(Symbol(compl.mod))\n\t  //         if !(v isa Function || v isa Type || v isa TypeVar || v isa Module || v isa Colon)\n\t  //             push!(res, compl.mod)\n\t  //         end\n\t  //     catch e\n\t  //     end\n\t  // end\n\t  // sort!(unique!(res))\n\t  // foreach(x -> println(\"\\'\", x, \"\\',\"), res)\n\t  const LITERAL_LIST = [\n\t    'ARGS',\n\t    'C_NULL',\n\t    'DEPOT_PATH',\n\t    'ENDIAN_BOM',\n\t    'ENV',\n\t    'Inf',\n\t    'Inf16',\n\t    'Inf32',\n\t    'Inf64',\n\t    'InsertionSort',\n\t    'LOAD_PATH',\n\t    'MergeSort',\n\t    'NaN',\n\t    'NaN16',\n\t    'NaN32',\n\t    'NaN64',\n\t    'PROGRAM_FILE',\n\t    'QuickSort',\n\t    'RoundDown',\n\t    'RoundFromZero',\n\t    'RoundNearest',\n\t    'RoundNearestTiesAway',\n\t    'RoundNearestTiesUp',\n\t    'RoundToZero',\n\t    'RoundUp',\n\t    'VERSION|0',\n\t    'devnull',\n\t    'false',\n\t    'im',\n\t    'missing',\n\t    'nothing',\n\t    'pi',\n\t    'stderr',\n\t    'stdin',\n\t    'stdout',\n\t    'true',\n\t    'undef',\n\t    'π',\n\t    'ℯ',\n\t  ];\n\n\t  // # built_in generator (Julia 1.5.2)\n\t  // import REPL.REPLCompletions\n\t  // res = String[]\n\t  // for compl in filter!(x -> isa(x, REPLCompletions.ModuleCompletion) && (x.parent === Base || x.parent === Core),\n\t  //                     REPLCompletions.completions(\"\", 0)[1])\n\t  //     try\n\t  //         v = eval(Symbol(compl.mod))\n\t  //         if (v isa Type || v isa TypeVar) && (compl.mod != \"=>\")\n\t  //             push!(res, compl.mod)\n\t  //         end\n\t  //     catch e\n\t  //     end\n\t  // end\n\t  // sort!(unique!(res))\n\t  // foreach(x -> println(\"\\'\", x, \"\\',\"), res)\n\t  const BUILT_IN_LIST = [\n\t    'AbstractArray',\n\t    'AbstractChannel',\n\t    'AbstractChar',\n\t    'AbstractDict',\n\t    'AbstractDisplay',\n\t    'AbstractFloat',\n\t    'AbstractIrrational',\n\t    'AbstractMatrix',\n\t    'AbstractRange',\n\t    'AbstractSet',\n\t    'AbstractString',\n\t    'AbstractUnitRange',\n\t    'AbstractVecOrMat',\n\t    'AbstractVector',\n\t    'Any',\n\t    'ArgumentError',\n\t    'Array',\n\t    'AssertionError',\n\t    'BigFloat',\n\t    'BigInt',\n\t    'BitArray',\n\t    'BitMatrix',\n\t    'BitSet',\n\t    'BitVector',\n\t    'Bool',\n\t    'BoundsError',\n\t    'CapturedException',\n\t    'CartesianIndex',\n\t    'CartesianIndices',\n\t    'Cchar',\n\t    'Cdouble',\n\t    'Cfloat',\n\t    'Channel',\n\t    'Char',\n\t    'Cint',\n\t    'Cintmax_t',\n\t    'Clong',\n\t    'Clonglong',\n\t    'Cmd',\n\t    'Colon',\n\t    'Complex',\n\t    'ComplexF16',\n\t    'ComplexF32',\n\t    'ComplexF64',\n\t    'CompositeException',\n\t    'Condition',\n\t    'Cptrdiff_t',\n\t    'Cshort',\n\t    'Csize_t',\n\t    'Cssize_t',\n\t    'Cstring',\n\t    'Cuchar',\n\t    'Cuint',\n\t    'Cuintmax_t',\n\t    'Culong',\n\t    'Culonglong',\n\t    'Cushort',\n\t    'Cvoid',\n\t    'Cwchar_t',\n\t    'Cwstring',\n\t    'DataType',\n\t    'DenseArray',\n\t    'DenseMatrix',\n\t    'DenseVecOrMat',\n\t    'DenseVector',\n\t    'Dict',\n\t    'DimensionMismatch',\n\t    'Dims',\n\t    'DivideError',\n\t    'DomainError',\n\t    'EOFError',\n\t    'Enum',\n\t    'ErrorException',\n\t    'Exception',\n\t    'ExponentialBackOff',\n\t    'Expr',\n\t    'Float16',\n\t    'Float32',\n\t    'Float64',\n\t    'Function',\n\t    'GlobalRef',\n\t    'HTML',\n\t    'IO',\n\t    'IOBuffer',\n\t    'IOContext',\n\t    'IOStream',\n\t    'IdDict',\n\t    'IndexCartesian',\n\t    'IndexLinear',\n\t    'IndexStyle',\n\t    'InexactError',\n\t    'InitError',\n\t    'Int',\n\t    'Int128',\n\t    'Int16',\n\t    'Int32',\n\t    'Int64',\n\t    'Int8',\n\t    'Integer',\n\t    'InterruptException',\n\t    'InvalidStateException',\n\t    'Irrational',\n\t    'KeyError',\n\t    'LinRange',\n\t    'LineNumberNode',\n\t    'LinearIndices',\n\t    'LoadError',\n\t    'MIME',\n\t    'Matrix',\n\t    'Method',\n\t    'MethodError',\n\t    'Missing',\n\t    'MissingException',\n\t    'Module',\n\t    'NTuple',\n\t    'NamedTuple',\n\t    'Nothing',\n\t    'Number',\n\t    'OrdinalRange',\n\t    'OutOfMemoryError',\n\t    'OverflowError',\n\t    'Pair',\n\t    'PartialQuickSort',\n\t    'PermutedDimsArray',\n\t    'Pipe',\n\t    'ProcessFailedException',\n\t    'Ptr',\n\t    'QuoteNode',\n\t    'Rational',\n\t    'RawFD',\n\t    'ReadOnlyMemoryError',\n\t    'Real',\n\t    'ReentrantLock',\n\t    'Ref',\n\t    'Regex',\n\t    'RegexMatch',\n\t    'RoundingMode',\n\t    'SegmentationFault',\n\t    'Set',\n\t    'Signed',\n\t    'Some',\n\t    'StackOverflowError',\n\t    'StepRange',\n\t    'StepRangeLen',\n\t    'StridedArray',\n\t    'StridedMatrix',\n\t    'StridedVecOrMat',\n\t    'StridedVector',\n\t    'String',\n\t    'StringIndexError',\n\t    'SubArray',\n\t    'SubString',\n\t    'SubstitutionString',\n\t    'Symbol',\n\t    'SystemError',\n\t    'Task',\n\t    'TaskFailedException',\n\t    'Text',\n\t    'TextDisplay',\n\t    'Timer',\n\t    'Tuple',\n\t    'Type',\n\t    'TypeError',\n\t    'TypeVar',\n\t    'UInt',\n\t    'UInt128',\n\t    'UInt16',\n\t    'UInt32',\n\t    'UInt64',\n\t    'UInt8',\n\t    'UndefInitializer',\n\t    'UndefKeywordError',\n\t    'UndefRefError',\n\t    'UndefVarError',\n\t    'Union',\n\t    'UnionAll',\n\t    'UnitRange',\n\t    'Unsigned',\n\t    'Val',\n\t    'Vararg',\n\t    'VecElement',\n\t    'VecOrMat',\n\t    'Vector',\n\t    'VersionNumber',\n\t    'WeakKeyDict',\n\t    'WeakRef',\n\t  ];\n\n\t  const KEYWORDS = {\n\t    $pattern: VARIABLE_NAME_RE,\n\t    keyword: KEYWORD_LIST,\n\t    literal: LITERAL_LIST,\n\t    built_in: BUILT_IN_LIST,\n\t  };\n\n\t  // placeholder for recursive self-reference\n\t  const DEFAULT = {\n\t    keywords: KEYWORDS,\n\t    illegal: /<\\//\n\t  };\n\n\t  // ref: https://docs.julialang.org/en/v1/manual/integers-and-floating-point-numbers/\n\t  const NUMBER = {\n\t    className: 'number',\n\t    // supported numeric literals:\n\t    //  * binary literal (e.g. 0x10)\n\t    //  * octal literal (e.g. 0o76543210)\n\t    //  * hexadecimal literal (e.g. 0xfedcba876543210)\n\t    //  * hexadecimal floating point literal (e.g. 0x1p0, 0x1.2p2)\n\t    //  * decimal literal (e.g. 9876543210, 100_000_000)\n\t    //  * floating pointe literal (e.g. 1.2, 1.2f, .2, 1., 1.2e10, 1.2e-10)\n\t    begin: /(\\b0x[\\d_]*(\\.[\\d_]*)?|0x\\.\\d[\\d_]*)p[-+]?\\d+|\\b0[box][a-fA-F0-9][a-fA-F0-9_]*|(\\b\\d[\\d_]*(\\.[\\d_]*)?|\\.\\d[\\d_]*)([eEfF][-+]?\\d+)?/,\n\t    relevance: 0\n\t  };\n\n\t  const CHAR = {\n\t    className: 'string',\n\t    begin: /'(.|\\\\[xXuU][a-zA-Z0-9]+)'/\n\t  };\n\n\t  const INTERPOLATION = {\n\t    className: 'subst',\n\t    begin: /\\$\\(/,\n\t    end: /\\)/,\n\t    keywords: KEYWORDS\n\t  };\n\n\t  const INTERPOLATED_VARIABLE = {\n\t    className: 'variable',\n\t    begin: '\\\\$' + VARIABLE_NAME_RE\n\t  };\n\n\t  // TODO: neatly escape normal code in string literal\n\t  const STRING = {\n\t    className: 'string',\n\t    contains: [\n\t      hljs.BACKSLASH_ESCAPE,\n\t      INTERPOLATION,\n\t      INTERPOLATED_VARIABLE\n\t    ],\n\t    variants: [\n\t      {\n\t        begin: /\\w*\"\"\"/,\n\t        end: /\"\"\"\\w*/,\n\t        relevance: 10\n\t      },\n\t      {\n\t        begin: /\\w*\"/,\n\t        end: /\"\\w*/\n\t      }\n\t    ]\n\t  };\n\n\t  const COMMAND = {\n\t    className: 'string',\n\t    contains: [\n\t      hljs.BACKSLASH_ESCAPE,\n\t      INTERPOLATION,\n\t      INTERPOLATED_VARIABLE\n\t    ],\n\t    begin: '`',\n\t    end: '`'\n\t  };\n\n\t  const MACROCALL = {\n\t    className: 'meta',\n\t    begin: '@' + VARIABLE_NAME_RE\n\t  };\n\n\t  const COMMENT = {\n\t    className: 'comment',\n\t    variants: [\n\t      {\n\t        begin: '#=',\n\t        end: '=#',\n\t        relevance: 10\n\t      },\n\t      {\n\t        begin: '#',\n\t        end: '$'\n\t      }\n\t    ]\n\t  };\n\n\t  DEFAULT.name = 'Julia';\n\t  DEFAULT.contains = [\n\t    NUMBER,\n\t    CHAR,\n\t    STRING,\n\t    COMMAND,\n\t    MACROCALL,\n\t    COMMENT,\n\t    hljs.HASH_COMMENT_MODE,\n\t    {\n\t      className: 'keyword',\n\t      begin:\n\t        '\\\\b(((abstract|primitive)\\\\s+)type|(mutable\\\\s+)?struct)\\\\b'\n\t    },\n\t    { begin: /<:/ } // relevance booster\n\t  ];\n\t  INTERPOLATION.contains = DEFAULT.contains;\n\n\t  return DEFAULT;\n\t}\n\n\tjulia_1 = julia;\n\treturn julia_1;\n}\n\nexport { requireJulia as __require };",
      "start": 1699633501091,
      "end": 1699633501092,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "file": null,
        "sources": [
          null
        ],
        "sourcesContent": [
          null
        ],
        "names": [],
        "mappings": ";;;;;;;;;;;;;;;CAQA,SAAS,KAAK,CAAC,IAAI,EAAE;CACrB;CACA;CACA;CACA;AACA;CACA;CACA,EAAE,MAAM,gBAAgB,GAAG,sDAAsD,CAAC;AAClF;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA,EAAE,MAAM,YAAY,GAAG;CACvB,IAAI,YAAY;CAChB,IAAI,OAAO;CACX,IAAI,OAAO;CACX,IAAI,OAAO;CACX,IAAI,OAAO;CACX,IAAI,OAAO;CACX,IAAI,UAAU;CACd,IAAI,IAAI;CACR,IAAI,MAAM;CACV,IAAI,QAAQ;CACZ,IAAI,KAAK;CACT,IAAI,QAAQ;CACZ,IAAI,OAAO;CACX,IAAI,SAAS;CACb,IAAI,KAAK;CACT,IAAI,UAAU;CACd,IAAI,QAAQ;CACZ,IAAI,IAAI;CACR,IAAI,QAAQ;CACZ,IAAI,IAAI;CACR,IAAI,KAAK;CACT,IAAI,KAAK;CACT,IAAI,OAAO;CACX,IAAI,OAAO;CACX,IAAI,QAAQ;CACZ,IAAI,OAAO;CACX,IAAI,QAAQ;CACZ,IAAI,MAAM;CACV,IAAI,KAAK;CACT,IAAI,OAAO;CACX,IAAI,OAAO;CACX,IAAI,OAAO;CACX,GAAG,CAAC;AACJ;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA,EAAE,MAAM,YAAY,GAAG;CACvB,IAAI,MAAM;CACV,IAAI,QAAQ;CACZ,IAAI,YAAY;CAChB,IAAI,YAAY;CAChB,IAAI,KAAK;CACT,IAAI,KAAK;CACT,IAAI,OAAO;CACX,IAAI,OAAO;CACX,IAAI,OAAO;CACX,IAAI,eAAe;CACnB,IAAI,WAAW;CACf,IAAI,WAAW;CACf,IAAI,KAAK;CACT,IAAI,OAAO;CACX,IAAI,OAAO;CACX,IAAI,OAAO;CACX,IAAI,cAAc;CAClB,IAAI,WAAW;CACf,IAAI,WAAW;CACf,IAAI,eAAe;CACnB,IAAI,cAAc;CAClB,IAAI,sBAAsB;CAC1B,IAAI,oBAAoB;CACxB,IAAI,aAAa;CACjB,IAAI,SAAS;CACb,IAAI,WAAW;CACf,IAAI,SAAS;CACb,IAAI,OAAO;CACX,IAAI,IAAI;CACR,IAAI,SAAS;CACb,IAAI,SAAS;CACb,IAAI,IAAI;CACR,IAAI,QAAQ;CACZ,IAAI,OAAO;CACX,IAAI,QAAQ;CACZ,IAAI,MAAM;CACV,IAAI,OAAO;CACX,IAAI,GAAG;CACP,IAAI,GAAG;CACP,GAAG,CAAC;AACJ;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA,EAAE,MAAM,aAAa,GAAG;CACxB,IAAI,eAAe;CACnB,IAAI,iBAAiB;CACrB,IAAI,cAAc;CAClB,IAAI,cAAc;CAClB,IAAI,iBAAiB;CACrB,IAAI,eAAe;CACnB,IAAI,oBAAoB;CACxB,IAAI,gBAAgB;CACpB,IAAI,eAAe;CACnB,IAAI,aAAa;CACjB,IAAI,gBAAgB;CACpB,IAAI,mBAAmB;CACvB,IAAI,kBAAkB;CACtB,IAAI,gBAAgB;CACpB,IAAI,KAAK;CACT,IAAI,eAAe;CACnB,IAAI,OAAO;CACX,IAAI,gBAAgB;CACpB,IAAI,UAAU;CACd,IAAI,QAAQ;CACZ,IAAI,UAAU;CACd,IAAI,WAAW;CACf,IAAI,QAAQ;CACZ,IAAI,WAAW;CACf,IAAI,MAAM;CACV,IAAI,aAAa;CACjB,IAAI,mBAAmB;CACvB,IAAI,gBAAgB;CACpB,IAAI,kBAAkB;CACtB,IAAI,OAAO;CACX,IAAI,SAAS;CACb,IAAI,QAAQ;CACZ,IAAI,SAAS;CACb,IAAI,MAAM;CACV,IAAI,MAAM;CACV,IAAI,WAAW;CACf,IAAI,OAAO;CACX,IAAI,WAAW;CACf,IAAI,KAAK;CACT,IAAI,OAAO;CACX,IAAI,SAAS;CACb,IAAI,YAAY;CAChB,IAAI,YAAY;CAChB,IAAI,YAAY;CAChB,IAAI,oBAAoB;CACxB,IAAI,WAAW;CACf,IAAI,YAAY;CAChB,IAAI,QAAQ;CACZ,IAAI,SAAS;CACb,IAAI,UAAU;CACd,IAAI,SAAS;CACb,IAAI,QAAQ;CACZ,IAAI,OAAO;CACX,IAAI,YAAY;CAChB,IAAI,QAAQ;CACZ,IAAI,YAAY;CAChB,IAAI,SAAS;CACb,IAAI,OAAO;CACX,IAAI,UAAU;CACd,IAAI,UAAU;CACd,IAAI,UAAU;CACd,IAAI,YAAY;CAChB,IAAI,aAAa;CACjB,IAAI,eAAe;CACnB,IAAI,aAAa;CACjB,IAAI,MAAM;CACV,IAAI,mBAAmB;CACvB,IAAI,MAAM;CACV,IAAI,aAAa;CACjB,IAAI,aAAa;CACjB,IAAI,UAAU;CACd,IAAI,MAAM;CACV,IAAI,gBAAgB;CACpB,IAAI,WAAW;CACf,IAAI,oBAAoB;CACxB,IAAI,MAAM;CACV,IAAI,SAAS;CACb,IAAI,SAAS;CACb,IAAI,SAAS;CACb,IAAI,UAAU;CACd,IAAI,WAAW;CACf,IAAI,MAAM;CACV,IAAI,IAAI;CACR,IAAI,UAAU;CACd,IAAI,WAAW;CACf,IAAI,UAAU;CACd,IAAI,QAAQ;CACZ,IAAI,gBAAgB;CACpB,IAAI,aAAa;CACjB,IAAI,YAAY;CAChB,IAAI,cAAc;CAClB,IAAI,WAAW;CACf,IAAI,KAAK;CACT,IAAI,QAAQ;CACZ,IAAI,OAAO;CACX,IAAI,OAAO;CACX,IAAI,OAAO;CACX,IAAI,MAAM;CACV,IAAI,SAAS;CACb,IAAI,oBAAoB;CACxB,IAAI,uBAAuB;CAC3B,IAAI,YAAY;CAChB,IAAI,UAAU;CACd,IAAI,UAAU;CACd,IAAI,gBAAgB;CACpB,IAAI,eAAe;CACnB,IAAI,WAAW;CACf,IAAI,MAAM;CACV,IAAI,QAAQ;CACZ,IAAI,QAAQ;CACZ,IAAI,aAAa;CACjB,IAAI,SAAS;CACb,IAAI,kBAAkB;CACtB,IAAI,QAAQ;CACZ,IAAI,QAAQ;CACZ,IAAI,YAAY;CAChB,IAAI,SAAS;CACb,IAAI,QAAQ;CACZ,IAAI,cAAc;CAClB,IAAI,kBAAkB;CACtB,IAAI,eAAe;CACnB,IAAI,MAAM;CACV,IAAI,kBAAkB;CACtB,IAAI,mBAAmB;CACvB,IAAI,MAAM;CACV,IAAI,wBAAwB;CAC5B,IAAI,KAAK;CACT,IAAI,WAAW;CACf,IAAI,UAAU;CACd,IAAI,OAAO;CACX,IAAI,qBAAqB;CACzB,IAAI,MAAM;CACV,IAAI,eAAe;CACnB,IAAI,KAAK;CACT,IAAI,OAAO;CACX,IAAI,YAAY;CAChB,IAAI,cAAc;CAClB,IAAI,mBAAmB;CACvB,IAAI,KAAK;CACT,IAAI,QAAQ;CACZ,IAAI,MAAM;CACV,IAAI,oBAAoB;CACxB,IAAI,WAAW;CACf,IAAI,cAAc;CAClB,IAAI,cAAc;CAClB,IAAI,eAAe;CACnB,IAAI,iBAAiB;CACrB,IAAI,eAAe;CACnB,IAAI,QAAQ;CACZ,IAAI,kBAAkB;CACtB,IAAI,UAAU;CACd,IAAI,WAAW;CACf,IAAI,oBAAoB;CACxB,IAAI,QAAQ;CACZ,IAAI,aAAa;CACjB,IAAI,MAAM;CACV,IAAI,qBAAqB;CACzB,IAAI,MAAM;CACV,IAAI,aAAa;CACjB,IAAI,OAAO;CACX,IAAI,OAAO;CACX,IAAI,MAAM;CACV,IAAI,WAAW;CACf,IAAI,SAAS;CACb,IAAI,MAAM;CACV,IAAI,SAAS;CACb,IAAI,QAAQ;CACZ,IAAI,QAAQ;CACZ,IAAI,QAAQ;CACZ,IAAI,OAAO;CACX,IAAI,kBAAkB;CACtB,IAAI,mBAAmB;CACvB,IAAI,eAAe;CACnB,IAAI,eAAe;CACnB,IAAI,OAAO;CACX,IAAI,UAAU;CACd,IAAI,WAAW;CACf,IAAI,UAAU;CACd,IAAI,KAAK;CACT,IAAI,QAAQ;CACZ,IAAI,YAAY;CAChB,IAAI,UAAU;CACd,IAAI,QAAQ;CACZ,IAAI,eAAe;CACnB,IAAI,aAAa;CACjB,IAAI,SAAS;CACb,GAAG,CAAC;AACJ;CACA,EAAE,MAAM,QAAQ,GAAG;CACnB,IAAI,QAAQ,EAAE,gBAAgB;CAC9B,IAAI,OAAO,EAAE,YAAY;CACzB,IAAI,OAAO,EAAE,YAAY;CACzB,IAAI,QAAQ,EAAE,aAAa;CAC3B,GAAG,CAAC;AACJ;CACA;CACA,EAAE,MAAM,OAAO,GAAG;CAClB,IAAI,QAAQ,EAAE,QAAQ;CACtB,IAAI,OAAO,EAAE,KAAK;CAClB,GAAG,CAAC;AACJ;CACA;CACA,EAAE,MAAM,MAAM,GAAG;CACjB,IAAI,SAAS,EAAE,QAAQ;CACvB;CACA;CACA;CACA;CACA;CACA;CACA;CACA,IAAI,KAAK,EAAE,oIAAoI;CAC/I,IAAI,SAAS,EAAE,CAAC;CAChB,GAAG,CAAC;AACJ;CACA,EAAE,MAAM,IAAI,GAAG;CACf,IAAI,SAAS,EAAE,QAAQ;CACvB,IAAI,KAAK,EAAE,4BAA4B;CACvC,GAAG,CAAC;AACJ;CACA,EAAE,MAAM,aAAa,GAAG;CACxB,IAAI,SAAS,EAAE,OAAO;CACtB,IAAI,KAAK,EAAE,MAAM;CACjB,IAAI,GAAG,EAAE,IAAI;CACb,IAAI,QAAQ,EAAE,QAAQ;CACtB,GAAG,CAAC;AACJ;CACA,EAAE,MAAM,qBAAqB,GAAG;CAChC,IAAI,SAAS,EAAE,UAAU;CACzB,IAAI,KAAK,EAAE,KAAK,GAAG,gBAAgB;CACnC,GAAG,CAAC;AACJ;CACA;CACA,EAAE,MAAM,MAAM,GAAG;CACjB,IAAI,SAAS,EAAE,QAAQ;CACvB,IAAI,QAAQ,EAAE;CACd,MAAM,IAAI,CAAC,gBAAgB;CAC3B,MAAM,aAAa;CACnB,MAAM,qBAAqB;CAC3B,KAAK;CACL,IAAI,QAAQ,EAAE;CACd,MAAM;CACN,QAAQ,KAAK,EAAE,QAAQ;CACvB,QAAQ,GAAG,EAAE,QAAQ;CACrB,QAAQ,SAAS,EAAE,EAAE;CACrB,OAAO;CACP,MAAM;CACN,QAAQ,KAAK,EAAE,MAAM;CACrB,QAAQ,GAAG,EAAE,MAAM;CACnB,OAAO;CACP,KAAK;CACL,GAAG,CAAC;AACJ;CACA,EAAE,MAAM,OAAO,GAAG;CAClB,IAAI,SAAS,EAAE,QAAQ;CACvB,IAAI,QAAQ,EAAE;CACd,MAAM,IAAI,CAAC,gBAAgB;CAC3B,MAAM,aAAa;CACnB,MAAM,qBAAqB;CAC3B,KAAK;CACL,IAAI,KAAK,EAAE,GAAG;CACd,IAAI,GAAG,EAAE,GAAG;CACZ,GAAG,CAAC;AACJ;CACA,EAAE,MAAM,SAAS,GAAG;CACpB,IAAI,SAAS,EAAE,MAAM;CACrB,IAAI,KAAK,EAAE,GAAG,GAAG,gBAAgB;CACjC,GAAG,CAAC;AACJ;CACA,EAAE,MAAM,OAAO,GAAG;CAClB,IAAI,SAAS,EAAE,SAAS;CACxB,IAAI,QAAQ,EAAE;CACd,MAAM;CACN,QAAQ,KAAK,EAAE,IAAI;CACnB,QAAQ,GAAG,EAAE,IAAI;CACjB,QAAQ,SAAS,EAAE,EAAE;CACrB,OAAO;CACP,MAAM;CACN,QAAQ,KAAK,EAAE,GAAG;CAClB,QAAQ,GAAG,EAAE,GAAG;CAChB,OAAO;CACP,KAAK;CACL,GAAG,CAAC;AACJ;CACA,EAAE,OAAO,CAAC,IAAI,GAAG,OAAO,CAAC;CACzB,EAAE,OAAO,CAAC,QAAQ,GAAG;CACrB,IAAI,MAAM;CACV,IAAI,IAAI;CACR,IAAI,MAAM;CACV,IAAI,OAAO;CACX,IAAI,SAAS;CACb,IAAI,OAAO;CACX,IAAI,IAAI,CAAC,iBAAiB;CAC1B,IAAI;CACJ,MAAM,SAAS,EAAE,SAAS;CAC1B,MAAM,KAAK;CACX,QAAQ,6DAA6D;CACrE,KAAK;CACL,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE;CACnB,GAAG,CAAC;CACJ,EAAE,aAAa,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;AAC5C;CACA,EAAE,OAAO,OAAO,CAAC;CACjB,CAAC;AACD;AACA,QAAc,GAAG,KAAK"
      }
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1699633501092,
      "end": 1699633501092,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1699633501092,
      "end": 1699633501092,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1699633501092,
      "end": 1699633501092,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1699633501093,
      "end": 1699633501093,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1699633501093,
      "end": 1699633501093,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1699633501093,
      "end": 1699633501093,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1699633501093,
      "end": 1699633501093,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1699633501093,
      "end": 1699633501093,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1699633501093,
      "end": 1699633501093,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1699633501093,
      "end": 1699633501093,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1699633501093,
      "end": 1699633501093,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1699633501093,
      "end": 1699633501093,
      "order": "normal"
    }
  ]
}
