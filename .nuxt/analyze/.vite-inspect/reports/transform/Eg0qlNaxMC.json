{
  "resolvedId": "F:/workSpace2024/knowledge-nuxt3/node_modules/markdown-it/lib/rules_inline/state_inline.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "// Inline parser state\n\n'use strict';\n\n\nvar Token          = require('../token');\nvar isWhiteSpace   = require('../common/utils').isWhiteSpace;\nvar isPunctChar    = require('../common/utils').isPunctChar;\nvar isMdAsciiPunct = require('../common/utils').isMdAsciiPunct;\n\n\nfunction StateInline(src, md, env, outTokens) {\n  this.src = src;\n  this.env = env;\n  this.md = md;\n  this.tokens = outTokens;\n  this.tokens_meta = Array(outTokens.length);\n\n  this.pos = 0;\n  this.posMax = this.src.length;\n  this.level = 0;\n  this.pending = '';\n  this.pendingLevel = 0;\n\n  // Stores { start: end } pairs. Useful for backtrack\n  // optimization of pairs parse (emphasis, strikes).\n  this.cache = {};\n\n  // List of emphasis-like delimiters for current tag\n  this.delimiters = [];\n\n  // Stack of delimiter lists for upper level tags\n  this._prev_delimiters = [];\n\n  // backtick length => last seen position\n  this.backticks = {};\n  this.backticksScanned = false;\n\n  // Counter used to disable inline linkify-it execution\n  // inside <a> and markdown links\n  this.linkLevel = 0;\n}\n\n\n// Flush pending text\n//\nStateInline.prototype.pushPending = function () {\n  var token = new Token('text', '', 0);\n  token.content = this.pending;\n  token.level = this.pendingLevel;\n  this.tokens.push(token);\n  this.pending = '';\n  return token;\n};\n\n\n// Push new token to \"stream\".\n// If pending text exists - flush it as text token\n//\nStateInline.prototype.push = function (type, tag, nesting) {\n  if (this.pending) {\n    this.pushPending();\n  }\n\n  var token = new Token(type, tag, nesting);\n  var token_meta = null;\n\n  if (nesting < 0) {\n    // closing tag\n    this.level--;\n    this.delimiters = this._prev_delimiters.pop();\n  }\n\n  token.level = this.level;\n\n  if (nesting > 0) {\n    // opening tag\n    this.level++;\n    this._prev_delimiters.push(this.delimiters);\n    this.delimiters = [];\n    token_meta = { delimiters: this.delimiters };\n  }\n\n  this.pendingLevel = this.level;\n  this.tokens.push(token);\n  this.tokens_meta.push(token_meta);\n  return token;\n};\n\n\n// Scan a sequence of emphasis-like markers, and determine whether\n// it can start an emphasis sequence or end an emphasis sequence.\n//\n//  - start - position to scan from (it should point at a valid marker);\n//  - canSplitWord - determine if these markers can be found inside a word\n//\nStateInline.prototype.scanDelims = function (start, canSplitWord) {\n  var pos = start, lastChar, nextChar, count, can_open, can_close,\n      isLastWhiteSpace, isLastPunctChar,\n      isNextWhiteSpace, isNextPunctChar,\n      left_flanking = true,\n      right_flanking = true,\n      max = this.posMax,\n      marker = this.src.charCodeAt(start);\n\n  // treat beginning of the line as a whitespace\n  lastChar = start > 0 ? this.src.charCodeAt(start - 1) : 0x20;\n\n  while (pos < max && this.src.charCodeAt(pos) === marker) { pos++; }\n\n  count = pos - start;\n\n  // treat end of the line as a whitespace\n  nextChar = pos < max ? this.src.charCodeAt(pos) : 0x20;\n\n  isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar));\n  isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar));\n\n  isLastWhiteSpace = isWhiteSpace(lastChar);\n  isNextWhiteSpace = isWhiteSpace(nextChar);\n\n  if (isNextWhiteSpace) {\n    left_flanking = false;\n  } else if (isNextPunctChar) {\n    if (!(isLastWhiteSpace || isLastPunctChar)) {\n      left_flanking = false;\n    }\n  }\n\n  if (isLastWhiteSpace) {\n    right_flanking = false;\n  } else if (isLastPunctChar) {\n    if (!(isNextWhiteSpace || isNextPunctChar)) {\n      right_flanking = false;\n    }\n  }\n\n  if (!canSplitWord) {\n    can_open  = left_flanking  && (!right_flanking || isLastPunctChar);\n    can_close = right_flanking && (!left_flanking  || isNextPunctChar);\n  } else {\n    can_open  = left_flanking;\n    can_close = right_flanking;\n  }\n\n  return {\n    can_open:  can_open,\n    can_close: can_close,\n    length:    count\n  };\n};\n\n\n// re-export Token class to use in block rules\nStateInline.prototype.Token = Token;\n\n\nmodule.exports = StateInline;\n",
      "start": 1699633501843,
      "end": 1699633501934,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1699633501934,
      "end": 1699633501934,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1699633501934,
      "end": 1699633501934,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1699633501934,
      "end": 1699633501934,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1699633501934,
      "end": 1699633501934,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1699633501934,
      "end": 1699633501934,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1699633501934,
      "end": 1699633501934,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1699633501935,
      "end": 1699633501935,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1699633501935,
      "end": 1699633501935,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1699633501935,
      "end": 1699633501935,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1699633501935,
      "end": 1699633501935,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1699633501935,
      "end": 1699633501935,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1699633501935,
      "end": 1699633501935,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1699633501935,
      "end": 1699633501935,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1699633501935,
      "end": 1699633501935,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1699633501935,
      "end": 1699633501935,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1699633501935,
      "end": 1699633501935,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1699633501935,
      "end": 1699633501935,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1699633501935,
      "end": 1699633501935,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1699633501935,
      "end": 1699633501935,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1699633501935,
      "end": 1699633501935,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "result": "import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport require$$0 from \"\\u0000F:/workSpace2024/knowledge-nuxt3/node_modules/markdown-it/lib/token.js?commonjs-proxy\";\nimport require$$1 from \"\\u0000F:/workSpace2024/knowledge-nuxt3/node_modules/markdown-it/lib/common/utils.js?commonjs-proxy\";\n\n// Inline parser state\n\n'use strict';\n\n\nvar Token          = require$$0;\nvar isWhiteSpace   = require$$1.isWhiteSpace;\nvar isPunctChar    = require$$1.isPunctChar;\nvar isMdAsciiPunct = require$$1.isMdAsciiPunct;\n\n\nfunction StateInline(src, md, env, outTokens) {\n  this.src = src;\n  this.env = env;\n  this.md = md;\n  this.tokens = outTokens;\n  this.tokens_meta = Array(outTokens.length);\n\n  this.pos = 0;\n  this.posMax = this.src.length;\n  this.level = 0;\n  this.pending = '';\n  this.pendingLevel = 0;\n\n  // Stores { start: end } pairs. Useful for backtrack\n  // optimization of pairs parse (emphasis, strikes).\n  this.cache = {};\n\n  // List of emphasis-like delimiters for current tag\n  this.delimiters = [];\n\n  // Stack of delimiter lists for upper level tags\n  this._prev_delimiters = [];\n\n  // backtick length => last seen position\n  this.backticks = {};\n  this.backticksScanned = false;\n\n  // Counter used to disable inline linkify-it execution\n  // inside <a> and markdown links\n  this.linkLevel = 0;\n}\n\n\n// Flush pending text\n//\nStateInline.prototype.pushPending = function () {\n  var token = new Token('text', '', 0);\n  token.content = this.pending;\n  token.level = this.pendingLevel;\n  this.tokens.push(token);\n  this.pending = '';\n  return token;\n};\n\n\n// Push new token to \"stream\".\n// If pending text exists - flush it as text token\n//\nStateInline.prototype.push = function (type, tag, nesting) {\n  if (this.pending) {\n    this.pushPending();\n  }\n\n  var token = new Token(type, tag, nesting);\n  var token_meta = null;\n\n  if (nesting < 0) {\n    // closing tag\n    this.level--;\n    this.delimiters = this._prev_delimiters.pop();\n  }\n\n  token.level = this.level;\n\n  if (nesting > 0) {\n    // opening tag\n    this.level++;\n    this._prev_delimiters.push(this.delimiters);\n    this.delimiters = [];\n    token_meta = { delimiters: this.delimiters };\n  }\n\n  this.pendingLevel = this.level;\n  this.tokens.push(token);\n  this.tokens_meta.push(token_meta);\n  return token;\n};\n\n\n// Scan a sequence of emphasis-like markers, and determine whether\n// it can start an emphasis sequence or end an emphasis sequence.\n//\n//  - start - position to scan from (it should point at a valid marker);\n//  - canSplitWord - determine if these markers can be found inside a word\n//\nStateInline.prototype.scanDelims = function (start, canSplitWord) {\n  var pos = start, lastChar, nextChar, count, can_open, can_close,\n      isLastWhiteSpace, isLastPunctChar,\n      isNextWhiteSpace, isNextPunctChar,\n      left_flanking = true,\n      right_flanking = true,\n      max = this.posMax,\n      marker = this.src.charCodeAt(start);\n\n  // treat beginning of the line as a whitespace\n  lastChar = start > 0 ? this.src.charCodeAt(start - 1) : 0x20;\n\n  while (pos < max && this.src.charCodeAt(pos) === marker) { pos++; }\n\n  count = pos - start;\n\n  // treat end of the line as a whitespace\n  nextChar = pos < max ? this.src.charCodeAt(pos) : 0x20;\n\n  isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar));\n  isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar));\n\n  isLastWhiteSpace = isWhiteSpace(lastChar);\n  isNextWhiteSpace = isWhiteSpace(nextChar);\n\n  if (isNextWhiteSpace) {\n    left_flanking = false;\n  } else if (isNextPunctChar) {\n    if (!(isLastWhiteSpace || isLastPunctChar)) {\n      left_flanking = false;\n    }\n  }\n\n  if (isLastWhiteSpace) {\n    right_flanking = false;\n  } else if (isLastPunctChar) {\n    if (!(isNextWhiteSpace || isNextPunctChar)) {\n      right_flanking = false;\n    }\n  }\n\n  if (!canSplitWord) {\n    can_open  = left_flanking  && (!right_flanking || isLastPunctChar);\n    can_close = right_flanking && (!left_flanking  || isNextPunctChar);\n  } else {\n    can_open  = left_flanking;\n    can_close = right_flanking;\n  }\n\n  return {\n    can_open:  can_open,\n    can_close: can_close,\n    length:    count\n  };\n};\n\n\n// re-export Token class to use in block rules\nStateInline.prototype.Token = Token;\n\n\nvar state_inline = StateInline;\n\nexport default /*@__PURE__*/commonjsHelpers.getDefaultExportFromCjs(state_inline);\nexport { state_inline as __moduleExports };",
      "start": 1699633501935,
      "end": 1699633502065,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "file": null,
        "sources": [
          null
        ],
        "sourcesContent": [
          null
        ],
        "names": [],
        "mappings": ";;;;AAAA;AACA;AACA,YAAY,CAAC;AACb;AACA;AACA,IAAI,KAAK,YAAY,UAAmB,CAAC;AACzC,IAAI,YAAY,KAAK,UAA0B,CAAC,YAAY,CAAC;AAC7D,IAAI,WAAW,MAAM,UAA0B,CAAC,WAAW,CAAC;AAC5D,IAAI,cAAc,GAAG,UAA0B,CAAC,cAAc,CAAC;AAC/D;AACA;AACA,SAAS,WAAW,CAAC,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,SAAS,EAAE;AAC9C,EAAE,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;AACjB,EAAE,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;AACjB,EAAE,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;AACf,EAAE,IAAI,CAAC,MAAM,GAAG,SAAS,CAAC;AAC1B,EAAE,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;AAC7C;AACA,EAAE,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC;AACf,EAAE,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC;AAChC,EAAE,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;AACjB,EAAE,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;AACpB,EAAE,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC;AACxB;AACA;AACA;AACA,EAAE,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;AAClB;AACA;AACA,EAAE,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;AACvB;AACA;AACA,EAAE,IAAI,CAAC,gBAAgB,GAAG,EAAE,CAAC;AAC7B;AACA;AACA,EAAE,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;AACtB,EAAE,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;AAChC;AACA;AACA;AACA,EAAE,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;AACrB,CAAC;AACD;AACA;AACA;AACA;AACA,WAAW,CAAC,SAAS,CAAC,WAAW,GAAG,YAAY;AAChD,EAAE,IAAI,KAAK,GAAG,IAAI,KAAK,CAAC,MAAM,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;AACvC,EAAE,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;AAC/B,EAAE,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC;AAClC,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAC1B,EAAE,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;AACpB,EAAE,OAAO,KAAK,CAAC;AACf,CAAC,CAAC;AACF;AACA;AACA;AACA;AACA;AACA,WAAW,CAAC,SAAS,CAAC,IAAI,GAAG,UAAU,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE;AAC3D,EAAE,IAAI,IAAI,CAAC,OAAO,EAAE;AACpB,IAAI,IAAI,CAAC,WAAW,EAAE,CAAC;AACvB,GAAG;AACH;AACA,EAAE,IAAI,KAAK,GAAG,IAAI,KAAK,CAAC,IAAI,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;AAC5C,EAAE,IAAI,UAAU,GAAG,IAAI,CAAC;AACxB;AACA,EAAE,IAAI,OAAO,GAAG,CAAC,EAAE;AACnB;AACA,IAAI,IAAI,CAAC,KAAK,EAAE,CAAC;AACjB,IAAI,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,gBAAgB,CAAC,GAAG,EAAE,CAAC;AAClD,GAAG;AACH;AACA,EAAE,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;AAC3B;AACA,EAAE,IAAI,OAAO,GAAG,CAAC,EAAE;AACnB;AACA,IAAI,IAAI,CAAC,KAAK,EAAE,CAAC;AACjB,IAAI,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;AAChD,IAAI,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;AACzB,IAAI,UAAU,GAAG,EAAE,UAAU,EAAE,IAAI,CAAC,UAAU,EAAE,CAAC;AACjD,GAAG;AACH;AACA,EAAE,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC;AACjC,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAC1B,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;AACpC,EAAE,OAAO,KAAK,CAAC;AACf,CAAC,CAAC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,CAAC,SAAS,CAAC,UAAU,GAAG,UAAU,KAAK,EAAE,YAAY,EAAE;AAClE,EAAE,IAAI,GAAG,GAAG,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,SAAS;AACjE,MAAM,gBAAgB,EAAE,eAAe;AACvC,MAAM,gBAAgB,EAAE,eAAe;AACvC,MAAM,aAAa,GAAG,IAAI;AAC1B,MAAM,cAAc,GAAG,IAAI;AAC3B,MAAM,GAAG,GAAG,IAAI,CAAC,MAAM;AACvB,MAAM,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;AAC1C;AACA;AACA,EAAE,QAAQ,GAAG,KAAK,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,KAAK,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC;AAC/D;AACA,EAAE,OAAO,GAAG,GAAG,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,KAAK,MAAM,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE;AACrE;AACA,EAAE,KAAK,GAAG,GAAG,GAAG,KAAK,CAAC;AACtB;AACA;AACA,EAAE,QAAQ,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;AACzD;AACA,EAAE,eAAe,GAAG,cAAc,CAAC,QAAQ,CAAC,IAAI,WAAW,CAAC,MAAM,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC;AAC3F,EAAE,eAAe,GAAG,cAAc,CAAC,QAAQ,CAAC,IAAI,WAAW,CAAC,MAAM,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC;AAC3F;AACA,EAAE,gBAAgB,GAAG,YAAY,CAAC,QAAQ,CAAC,CAAC;AAC5C,EAAE,gBAAgB,GAAG,YAAY,CAAC,QAAQ,CAAC,CAAC;AAC5C;AACA,EAAE,IAAI,gBAAgB,EAAE;AACxB,IAAI,aAAa,GAAG,KAAK,CAAC;AAC1B,GAAG,MAAM,IAAI,eAAe,EAAE;AAC9B,IAAI,IAAI,EAAE,gBAAgB,IAAI,eAAe,CAAC,EAAE;AAChD,MAAM,aAAa,GAAG,KAAK,CAAC;AAC5B,KAAK;AACL,GAAG;AACH;AACA,EAAE,IAAI,gBAAgB,EAAE;AACxB,IAAI,cAAc,GAAG,KAAK,CAAC;AAC3B,GAAG,MAAM,IAAI,eAAe,EAAE;AAC9B,IAAI,IAAI,EAAE,gBAAgB,IAAI,eAAe,CAAC,EAAE;AAChD,MAAM,cAAc,GAAG,KAAK,CAAC;AAC7B,KAAK;AACL,GAAG;AACH;AACA,EAAE,IAAI,CAAC,YAAY,EAAE;AACrB,IAAI,QAAQ,IAAI,aAAa,MAAM,CAAC,cAAc,IAAI,eAAe,CAAC,CAAC;AACvE,IAAI,SAAS,GAAG,cAAc,KAAK,CAAC,aAAa,KAAK,eAAe,CAAC,CAAC;AACvE,GAAG,MAAM;AACT,IAAI,QAAQ,IAAI,aAAa,CAAC;AAC9B,IAAI,SAAS,GAAG,cAAc,CAAC;AAC/B,GAAG;AACH;AACA,EAAE,OAAO;AACT,IAAI,QAAQ,GAAG,QAAQ;AACvB,IAAI,SAAS,EAAE,SAAS;AACxB,IAAI,MAAM,KAAK,KAAK;AACpB,GAAG,CAAC;AACJ,CAAC,CAAC;AACF;AACA;AACA;AACA,WAAW,CAAC,SAAS,CAAC,KAAK,GAAG,KAAK,CAAC;AACpC;AACA;IACA,YAAc,GAAG,WAAW"
      }
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1699633502065,
      "end": 1699633502065,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1699633502065,
      "end": 1699633502065,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1699633502065,
      "end": 1699633502065,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1699633502065,
      "end": 1699633502066,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1699633502066,
      "end": 1699633502066,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1699633502066,
      "end": 1699633502066,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1699633502066,
      "end": 1699633502066,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1699633502066,
      "end": 1699633502066,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1699633502066,
      "end": 1699633502066,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1699633502066,
      "end": 1699633502066,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1699633502066,
      "end": 1699633502066,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1699633502067,
      "end": 1699633502067,
      "order": "normal"
    }
  ]
}
