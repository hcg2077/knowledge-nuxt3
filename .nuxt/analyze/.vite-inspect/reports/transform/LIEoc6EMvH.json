{
  "resolvedId": "F:/workSpace2024/knowledge-nuxt3/node_modules/markdown-it/lib/parser_core.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/** internal\n * class Core\n *\n * Top-level rules executor. Glues block/inline parsers and does intermediate\n * transformations.\n **/\n'use strict';\n\n\nvar Ruler  = require('./ruler');\n\n\nvar _rules = [\n  [ 'normalize',      require('./rules_core/normalize')      ],\n  [ 'block',          require('./rules_core/block')          ],\n  [ 'inline',         require('./rules_core/inline')         ],\n  [ 'linkify',        require('./rules_core/linkify')        ],\n  [ 'replacements',   require('./rules_core/replacements')   ],\n  [ 'smartquotes',    require('./rules_core/smartquotes')    ],\n  // `text_join` finds `text_special` tokens (for escape sequences)\n  // and joins them with the rest of the text\n  [ 'text_join',      require('./rules_core/text_join')      ]\n];\n\n\n/**\n * new Core()\n **/\nfunction Core() {\n  /**\n   * Core#ruler -> Ruler\n   *\n   * [[Ruler]] instance. Keep configuration of core rules.\n   **/\n  this.ruler = new Ruler();\n\n  for (var i = 0; i < _rules.length; i++) {\n    this.ruler.push(_rules[i][0], _rules[i][1]);\n  }\n}\n\n\n/**\n * Core.process(state)\n *\n * Executes core chain rules.\n **/\nCore.prototype.process = function (state) {\n  var i, l, rules;\n\n  rules = this.ruler.getRules('');\n\n  for (i = 0, l = rules.length; i < l; i++) {\n    rules[i](state);\n  }\n};\n\nCore.prototype.State = require('./rules_core/state_core');\n\n\nmodule.exports = Core;\n",
      "start": 1699633501509,
      "end": 1699633501682,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1699633501682,
      "end": 1699633501682,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1699633501682,
      "end": 1699633501682,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1699633501682,
      "end": 1699633501682,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1699633501683,
      "end": 1699633501683,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1699633501683,
      "end": 1699633501683,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1699633501683,
      "end": 1699633501683,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1699633501683,
      "end": 1699633501683,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1699633501683,
      "end": 1699633501683,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1699633501683,
      "end": 1699633501683,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1699633501683,
      "end": 1699633501683,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1699633501683,
      "end": 1699633501683,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1699633501683,
      "end": 1699633501684,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1699633501684,
      "end": 1699633501684,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1699633501684,
      "end": 1699633501684,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1699633501684,
      "end": 1699633501684,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1699633501684,
      "end": 1699633501684,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1699633501684,
      "end": 1699633501684,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1699633501684,
      "end": 1699633501684,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1699633501684,
      "end": 1699633501684,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1699633501684,
      "end": 1699633501684,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "result": "/** internal\n * class Core\n *\n * Top-level rules executor. Glues block/inline parsers and does intermediate\n * transformations.\n **/\nimport * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport require$$0 from \"\\u0000F:/workSpace2024/knowledge-nuxt3/node_modules/markdown-it/lib/ruler.js?commonjs-proxy\";\nimport require$$1 from \"\\u0000F:/workSpace2024/knowledge-nuxt3/node_modules/markdown-it/lib/rules_core/normalize.js?commonjs-proxy\";\nimport require$$2 from \"\\u0000F:/workSpace2024/knowledge-nuxt3/node_modules/markdown-it/lib/rules_core/block.js?commonjs-proxy\";\nimport require$$3 from \"\\u0000F:/workSpace2024/knowledge-nuxt3/node_modules/markdown-it/lib/rules_core/inline.js?commonjs-proxy\";\nimport require$$4 from \"\\u0000F:/workSpace2024/knowledge-nuxt3/node_modules/markdown-it/lib/rules_core/linkify.js?commonjs-proxy\";\nimport require$$5 from \"\\u0000F:/workSpace2024/knowledge-nuxt3/node_modules/markdown-it/lib/rules_core/replacements.js?commonjs-proxy\";\nimport require$$6 from \"\\u0000F:/workSpace2024/knowledge-nuxt3/node_modules/markdown-it/lib/rules_core/smartquotes.js?commonjs-proxy\";\nimport require$$7 from \"\\u0000F:/workSpace2024/knowledge-nuxt3/node_modules/markdown-it/lib/rules_core/text_join.js?commonjs-proxy\";\nimport require$$8 from \"\\u0000F:/workSpace2024/knowledge-nuxt3/node_modules/markdown-it/lib/rules_core/state_core.js?commonjs-proxy\";\n\n'use strict';\n\n\nvar Ruler  = require$$0;\n\n\nvar _rules = [\n  [ 'normalize',      require$$1      ],\n  [ 'block',          require$$2          ],\n  [ 'inline',         require$$3         ],\n  [ 'linkify',        require$$4        ],\n  [ 'replacements',   require$$5   ],\n  [ 'smartquotes',    require$$6    ],\n  // `text_join` finds `text_special` tokens (for escape sequences)\n  // and joins them with the rest of the text\n  [ 'text_join',      require$$7      ]\n];\n\n\n/**\n * new Core()\n **/\nfunction Core() {\n  /**\n   * Core#ruler -> Ruler\n   *\n   * [[Ruler]] instance. Keep configuration of core rules.\n   **/\n  this.ruler = new Ruler();\n\n  for (var i = 0; i < _rules.length; i++) {\n    this.ruler.push(_rules[i][0], _rules[i][1]);\n  }\n}\n\n\n/**\n * Core.process(state)\n *\n * Executes core chain rules.\n **/\nCore.prototype.process = function (state) {\n  var i, l, rules;\n\n  rules = this.ruler.getRules('');\n\n  for (i = 0, l = rules.length; i < l; i++) {\n    rules[i](state);\n  }\n};\n\nCore.prototype.State = require$$8;\n\n\nvar parser_core = Core;\n\nexport default /*@__PURE__*/commonjsHelpers.getDefaultExportFromCjs(parser_core);\nexport { parser_core as __moduleExports };",
      "start": 1699633501684,
      "end": 1699633502070,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "file": null,
        "sources": [
          null
        ],
        "sourcesContent": [
          null
        ],
        "names": [],
        "mappings": ";;;;;;;;;;;;;;;;;AAMA,YAAY,CAAC;AACb;AACA;AACA,IAAI,KAAK,IAAI,UAAkB,CAAC;AAChC;AACA;AACA,IAAI,MAAM,GAAG;AACb,EAAE,EAAE,WAAW,OAAO,UAAiC,OAAO;AAC9D,EAAE,EAAE,OAAO,WAAW,UAA6B,WAAW;AAC9D,EAAE,EAAE,QAAQ,UAAU,UAA8B,UAAU;AAC9D,EAAE,EAAE,SAAS,SAAS,UAA+B,SAAS;AAC9D,EAAE,EAAE,cAAc,IAAI,UAAoC,IAAI;AAC9D,EAAE,EAAE,aAAa,KAAK,UAAmC,KAAK;AAC9D;AACA;AACA,EAAE,EAAE,WAAW,OAAO,UAAiC,OAAO;AAC9D,CAAC,CAAC;AACF;AACA;AACA;AACA;AACA;AACA,SAAS,IAAI,GAAG;AAChB;AACA;AACA;AACA;AACA;AACA,EAAE,IAAI,CAAC,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC;AAC3B;AACA,EAAE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAC1C,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChD,GAAG;AACH,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,CAAC,SAAS,CAAC,OAAO,GAAG,UAAU,KAAK,EAAE;AAC1C,EAAE,IAAI,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC;AAClB;AACA,EAAE,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;AAClC;AACA,EAAE,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;AAC5C,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;AACpB,GAAG;AACH,CAAC,CAAC;AACF;AACA,IAAI,CAAC,SAAS,CAAC,KAAK,GAAG,UAAkC,CAAC;AAC1D;AACA;IACA,WAAc,GAAG,IAAI"
      }
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1699633502070,
      "end": 1699633502070,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1699633502070,
      "end": 1699633502070,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1699633502070,
      "end": 1699633502070,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1699633502070,
      "end": 1699633502070,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1699633502070,
      "end": 1699633502070,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1699633502070,
      "end": 1699633502070,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1699633502070,
      "end": 1699633502070,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1699633502070,
      "end": 1699633502070,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1699633502070,
      "end": 1699633502070,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1699633502070,
      "end": 1699633502070,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1699633502071,
      "end": 1699633502071,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1699633502071,
      "end": 1699633502071,
      "order": "normal"
    }
  ]
}
