{
  "resolvedId": "F:/workSpace2024/knowledge-nuxt3/node_modules/crypto-js/hmac.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": ";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var Base = C_lib.Base;\n\t    var C_enc = C.enc;\n\t    var Utf8 = C_enc.Utf8;\n\t    var C_algo = C.algo;\n\n\t    /**\n\t     * HMAC algorithm.\n\t     */\n\t    var HMAC = C_algo.HMAC = Base.extend({\n\t        /**\n\t         * Initializes a newly created HMAC.\n\t         *\n\t         * @param {Hasher} hasher The hash algorithm to use.\n\t         * @param {WordArray|string} key The secret key.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);\n\t         */\n\t        init: function (hasher, key) {\n\t            // Init hasher\n\t            hasher = this._hasher = new hasher.init();\n\n\t            // Convert string to WordArray, else assume WordArray already\n\t            if (typeof key == 'string') {\n\t                key = Utf8.parse(key);\n\t            }\n\n\t            // Shortcuts\n\t            var hasherBlockSize = hasher.blockSize;\n\t            var hasherBlockSizeBytes = hasherBlockSize * 4;\n\n\t            // Allow arbitrary length keys\n\t            if (key.sigBytes > hasherBlockSizeBytes) {\n\t                key = hasher.finalize(key);\n\t            }\n\n\t            // Clamp excess bits\n\t            key.clamp();\n\n\t            // Clone key for inner and outer pads\n\t            var oKey = this._oKey = key.clone();\n\t            var iKey = this._iKey = key.clone();\n\n\t            // Shortcuts\n\t            var oKeyWords = oKey.words;\n\t            var iKeyWords = iKey.words;\n\n\t            // XOR keys with pad constants\n\t            for (var i = 0; i < hasherBlockSize; i++) {\n\t                oKeyWords[i] ^= 0x5c5c5c5c;\n\t                iKeyWords[i] ^= 0x36363636;\n\t            }\n\t            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;\n\n\t            // Set initial values\n\t            this.reset();\n\t        },\n\n\t        /**\n\t         * Resets this HMAC to its initial state.\n\t         *\n\t         * @example\n\t         *\n\t         *     hmacHasher.reset();\n\t         */\n\t        reset: function () {\n\t            // Shortcut\n\t            var hasher = this._hasher;\n\n\t            // Reset\n\t            hasher.reset();\n\t            hasher.update(this._iKey);\n\t        },\n\n\t        /**\n\t         * Updates this HMAC with a message.\n\t         *\n\t         * @param {WordArray|string} messageUpdate The message to append.\n\t         *\n\t         * @return {HMAC} This HMAC instance.\n\t         *\n\t         * @example\n\t         *\n\t         *     hmacHasher.update('message');\n\t         *     hmacHasher.update(wordArray);\n\t         */\n\t        update: function (messageUpdate) {\n\t            this._hasher.update(messageUpdate);\n\n\t            // Chainable\n\t            return this;\n\t        },\n\n\t        /**\n\t         * Finalizes the HMAC computation.\n\t         * Note that the finalize operation is effectively a destructive, read-once operation.\n\t         *\n\t         * @param {WordArray|string} messageUpdate (Optional) A final message update.\n\t         *\n\t         * @return {WordArray} The HMAC.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hmac = hmacHasher.finalize();\n\t         *     var hmac = hmacHasher.finalize('message');\n\t         *     var hmac = hmacHasher.finalize(wordArray);\n\t         */\n\t        finalize: function (messageUpdate) {\n\t            // Shortcut\n\t            var hasher = this._hasher;\n\n\t            // Compute HMAC\n\t            var innerHash = hasher.finalize(messageUpdate);\n\t            hasher.reset();\n\t            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));\n\n\t            return hmac;\n\t        }\n\t    });\n\t}());\n\n\n}));",
      "start": 1699633499854,
      "end": 1699633499955,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1699633499955,
      "end": 1699633499955,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1699633499955,
      "end": 1699633499955,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1699633499956,
      "end": 1699633499956,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1699633499956,
      "end": 1699633499956,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1699633499956,
      "end": 1699633499956,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1699633499956,
      "end": 1699633499956,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1699633499956,
      "end": 1699633499956,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1699633499956,
      "end": 1699633499956,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1699633499956,
      "end": 1699633499956,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1699633499956,
      "end": 1699633499956,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1699633499956,
      "end": 1699633499956,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1699633499956,
      "end": 1699633499956,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1699633499956,
      "end": 1699633499956,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1699633499956,
      "end": 1699633499956,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1699633499957,
      "end": 1699633499957,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1699633499957,
      "end": 1699633499957,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1699633499957,
      "end": 1699633499957,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1699633499957,
      "end": 1699633499957,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1699633499957,
      "end": 1699633499957,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1699633499957,
      "end": 1699633499957,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "result": "import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __module as hmacModule } from \"\\u0000F:/workSpace2024/knowledge-nuxt3/node_modules/crypto-js/hmac.js?commonjs-module\";\nvar hmac = hmacModule.exports;\nimport { __require as require$$0 } from \"\\u0000F:/workSpace2024/knowledge-nuxt3/node_modules/crypto-js/core.js?commonjs-wrapped\";\n\nvar hasRequiredHmac;\n\nfunction requireHmac () {\n\tif (hasRequiredHmac) return hmacModule.exports;\n\thasRequiredHmac = 1;\n\t(function (module, exports) {\n\t\t;(function (root, factory) {\n\t\t\tif ('object' === \"object\") {\n\t\t\t\t// CommonJS\n\t\t\t\tmodule.exports = exports = factory(require$$0());\n\t\t\t}\n\t\t\telse if (typeof undefined === \"function\" && undefined.amd) {\n\t\t\t\t// AMD\n\t\t\t\tundefined([\"./core\"], factory);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Global (browser)\n\t\t\t\tfactory(root.CryptoJS);\n\t\t\t}\n\t\t}(commonjsHelpers.commonjsGlobal, function (CryptoJS) {\n\n\t\t\t(function () {\n\t\t\t    // Shortcuts\n\t\t\t    var C = CryptoJS;\n\t\t\t    var C_lib = C.lib;\n\t\t\t    var Base = C_lib.Base;\n\t\t\t    var C_enc = C.enc;\n\t\t\t    var Utf8 = C_enc.Utf8;\n\t\t\t    var C_algo = C.algo;\n\n\t\t\t    /**\n\t\t\t     * HMAC algorithm.\n\t\t\t     */\n\t\t\t    var HMAC = C_algo.HMAC = Base.extend({\n\t\t\t        /**\n\t\t\t         * Initializes a newly created HMAC.\n\t\t\t         *\n\t\t\t         * @param {Hasher} hasher The hash algorithm to use.\n\t\t\t         * @param {WordArray|string} key The secret key.\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);\n\t\t\t         */\n\t\t\t        init: function (hasher, key) {\n\t\t\t            // Init hasher\n\t\t\t            hasher = this._hasher = new hasher.init();\n\n\t\t\t            // Convert string to WordArray, else assume WordArray already\n\t\t\t            if (typeof key == 'string') {\n\t\t\t                key = Utf8.parse(key);\n\t\t\t            }\n\n\t\t\t            // Shortcuts\n\t\t\t            var hasherBlockSize = hasher.blockSize;\n\t\t\t            var hasherBlockSizeBytes = hasherBlockSize * 4;\n\n\t\t\t            // Allow arbitrary length keys\n\t\t\t            if (key.sigBytes > hasherBlockSizeBytes) {\n\t\t\t                key = hasher.finalize(key);\n\t\t\t            }\n\n\t\t\t            // Clamp excess bits\n\t\t\t            key.clamp();\n\n\t\t\t            // Clone key for inner and outer pads\n\t\t\t            var oKey = this._oKey = key.clone();\n\t\t\t            var iKey = this._iKey = key.clone();\n\n\t\t\t            // Shortcuts\n\t\t\t            var oKeyWords = oKey.words;\n\t\t\t            var iKeyWords = iKey.words;\n\n\t\t\t            // XOR keys with pad constants\n\t\t\t            for (var i = 0; i < hasherBlockSize; i++) {\n\t\t\t                oKeyWords[i] ^= 0x5c5c5c5c;\n\t\t\t                iKeyWords[i] ^= 0x36363636;\n\t\t\t            }\n\t\t\t            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;\n\n\t\t\t            // Set initial values\n\t\t\t            this.reset();\n\t\t\t        },\n\n\t\t\t        /**\n\t\t\t         * Resets this HMAC to its initial state.\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     hmacHasher.reset();\n\t\t\t         */\n\t\t\t        reset: function () {\n\t\t\t            // Shortcut\n\t\t\t            var hasher = this._hasher;\n\n\t\t\t            // Reset\n\t\t\t            hasher.reset();\n\t\t\t            hasher.update(this._iKey);\n\t\t\t        },\n\n\t\t\t        /**\n\t\t\t         * Updates this HMAC with a message.\n\t\t\t         *\n\t\t\t         * @param {WordArray|string} messageUpdate The message to append.\n\t\t\t         *\n\t\t\t         * @return {HMAC} This HMAC instance.\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     hmacHasher.update('message');\n\t\t\t         *     hmacHasher.update(wordArray);\n\t\t\t         */\n\t\t\t        update: function (messageUpdate) {\n\t\t\t            this._hasher.update(messageUpdate);\n\n\t\t\t            // Chainable\n\t\t\t            return this;\n\t\t\t        },\n\n\t\t\t        /**\n\t\t\t         * Finalizes the HMAC computation.\n\t\t\t         * Note that the finalize operation is effectively a destructive, read-once operation.\n\t\t\t         *\n\t\t\t         * @param {WordArray|string} messageUpdate (Optional) A final message update.\n\t\t\t         *\n\t\t\t         * @return {WordArray} The HMAC.\n\t\t\t         *\n\t\t\t         * @example\n\t\t\t         *\n\t\t\t         *     var hmac = hmacHasher.finalize();\n\t\t\t         *     var hmac = hmacHasher.finalize('message');\n\t\t\t         *     var hmac = hmacHasher.finalize(wordArray);\n\t\t\t         */\n\t\t\t        finalize: function (messageUpdate) {\n\t\t\t            // Shortcut\n\t\t\t            var hasher = this._hasher;\n\n\t\t\t            // Compute HMAC\n\t\t\t            var innerHash = hasher.finalize(messageUpdate);\n\t\t\t            hasher.reset();\n\t\t\t            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));\n\n\t\t\t            return hmac;\n\t\t\t        }\n\t\t\t    });\n\t\t\t}());\n\n\n\t\t})); \n\t} (hmacModule, hmacModule.exports));\n\treturn hmacModule.exports;\n}\n\nexport { requireHmac as __require };",
      "start": 1699633499957,
      "end": 1699633500018,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "file": null,
        "sources": [
          null
        ],
        "sourcesContent": [
          null
        ],
        "names": [
          "define",
          "this"
        ],
        "mappings": "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"
      }
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1699633500018,
      "end": 1699633500018,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1699633500019,
      "end": 1699633500019,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1699633500019,
      "end": 1699633500019,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1699633500020,
      "end": 1699633500020,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1699633500020,
      "end": 1699633500021,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1699633500021,
      "end": 1699633500021,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1699633500021,
      "end": 1699633500021,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1699633500022,
      "end": 1699633500022,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1699633500022,
      "end": 1699633500022,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1699633500023,
      "end": 1699633500023,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1699633500023,
      "end": 1699633500023,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1699633500024,
      "end": 1699633500024,
      "order": "normal"
    }
  ]
}
