{
  "resolvedId": "F:/workSpace2024/knowledge-nuxt3/node_modules/highlight.js/lib/languages/swift.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n\n  return re.source;\n}\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction lookahead(re) {\n  return concat('(?=', re, ')');\n}\n\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\nfunction concat(...args) {\n  const joined = args.map((x) => source(x)).join(\"\");\n  return joined;\n}\n\n/**\n * @param { Array<string | RegExp | Object> } args\n * @returns {object}\n */\nfunction stripOptionsFromArgs(args) {\n  const opts = args[args.length - 1];\n\n  if (typeof opts === 'object' && opts.constructor === Object) {\n    args.splice(args.length - 1, 1);\n    return opts;\n  } else {\n    return {};\n  }\n}\n\n/** @typedef { {capture?: boolean} } RegexEitherOptions */\n\n/**\n * Any of the passed expresssions may match\n *\n * Creates a huge this | this | that | that match\n * @param {(RegExp | string)[] | [...(RegExp | string)[], RegexEitherOptions]} args\n * @returns {string}\n */\nfunction either(...args) {\n  /** @type { object & {capture?: boolean} }  */\n  const opts = stripOptionsFromArgs(args);\n  const joined = '('\n    + (opts.capture ? \"\" : \"?:\")\n    + args.map((x) => source(x)).join(\"|\") + \")\";\n  return joined;\n}\n\nconst keywordWrapper = keyword => concat(\n  /\\b/,\n  keyword,\n  /\\w$/.test(keyword) ? /\\b/ : /\\B/\n);\n\n// Keywords that require a leading dot.\nconst dotKeywords = [\n  'Protocol', // contextual\n  'Type' // contextual\n].map(keywordWrapper);\n\n// Keywords that may have a leading dot.\nconst optionalDotKeywords = [\n  'init',\n  'self'\n].map(keywordWrapper);\n\n// should register as keyword, not type\nconst keywordTypes = [\n  'Any',\n  'Self'\n];\n\n// Regular keywords and literals.\nconst keywords = [\n  // strings below will be fed into the regular `keywords` engine while regex\n  // will result in additional modes being created to scan for those keywords to\n  // avoid conflicts with other rules\n  'actor',\n  'any', // contextual\n  'associatedtype',\n  'async',\n  'await',\n  /as\\?/, // operator\n  /as!/, // operator\n  'as', // operator\n  'borrowing', // contextual\n  'break',\n  'case',\n  'catch',\n  'class',\n  'consume', // contextual\n  'consuming', // contextual\n  'continue',\n  'convenience', // contextual\n  'copy', // contextual\n  'default',\n  'defer',\n  'deinit',\n  'didSet', // contextual\n  'distributed',\n  'do',\n  'dynamic', // contextual\n  'each',\n  'else',\n  'enum',\n  'extension',\n  'fallthrough',\n  /fileprivate\\(set\\)/,\n  'fileprivate',\n  'final', // contextual\n  'for',\n  'func',\n  'get', // contextual\n  'guard',\n  'if',\n  'import',\n  'indirect', // contextual\n  'infix', // contextual\n  /init\\?/,\n  /init!/,\n  'inout',\n  /internal\\(set\\)/,\n  'internal',\n  'in',\n  'is', // operator\n  'isolated', // contextual\n  'nonisolated', // contextual\n  'lazy', // contextual\n  'let',\n  'macro',\n  'mutating', // contextual\n  'nonmutating', // contextual\n  /open\\(set\\)/, // contextual\n  'open', // contextual\n  'operator',\n  'optional', // contextual\n  'override', // contextual\n  'postfix', // contextual\n  'precedencegroup',\n  'prefix', // contextual\n  /private\\(set\\)/,\n  'private',\n  'protocol',\n  /public\\(set\\)/,\n  'public',\n  'repeat',\n  'required', // contextual\n  'rethrows',\n  'return',\n  'set', // contextual\n  'some', // contextual\n  'static',\n  'struct',\n  'subscript',\n  'super',\n  'switch',\n  'throws',\n  'throw',\n  /try\\?/, // operator\n  /try!/, // operator\n  'try', // operator\n  'typealias',\n  /unowned\\(safe\\)/, // contextual\n  /unowned\\(unsafe\\)/, // contextual\n  'unowned', // contextual\n  'var',\n  'weak', // contextual\n  'where',\n  'while',\n  'willSet' // contextual\n];\n\n// NOTE: Contextual keywords are reserved only in specific contexts.\n// Ideally, these should be matched using modes to avoid false positives.\n\n// Literals.\nconst literals = [\n  'false',\n  'nil',\n  'true'\n];\n\n// Keywords used in precedence groups.\nconst precedencegroupKeywords = [\n  'assignment',\n  'associativity',\n  'higherThan',\n  'left',\n  'lowerThan',\n  'none',\n  'right'\n];\n\n// Keywords that start with a number sign (#).\n// #(un)available is handled separately.\nconst numberSignKeywords = [\n  '#colorLiteral',\n  '#column',\n  '#dsohandle',\n  '#else',\n  '#elseif',\n  '#endif',\n  '#error',\n  '#file',\n  '#fileID',\n  '#fileLiteral',\n  '#filePath',\n  '#function',\n  '#if',\n  '#imageLiteral',\n  '#keyPath',\n  '#line',\n  '#selector',\n  '#sourceLocation',\n  '#warning'\n];\n\n// Global functions in the Standard Library.\nconst builtIns = [\n  'abs',\n  'all',\n  'any',\n  'assert',\n  'assertionFailure',\n  'debugPrint',\n  'dump',\n  'fatalError',\n  'getVaList',\n  'isKnownUniquelyReferenced',\n  'max',\n  'min',\n  'numericCast',\n  'pointwiseMax',\n  'pointwiseMin',\n  'precondition',\n  'preconditionFailure',\n  'print',\n  'readLine',\n  'repeatElement',\n  'sequence',\n  'stride',\n  'swap',\n  'swift_unboxFromSwiftValueWithType',\n  'transcode',\n  'type',\n  'unsafeBitCast',\n  'unsafeDowncast',\n  'withExtendedLifetime',\n  'withUnsafeMutablePointer',\n  'withUnsafePointer',\n  'withVaList',\n  'withoutActuallyEscaping',\n  'zip'\n];\n\n// Valid first characters for operators.\nconst operatorHead = either(\n  /[/=\\-+!*%<>&|^~?]/,\n  /[\\u00A1-\\u00A7]/,\n  /[\\u00A9\\u00AB]/,\n  /[\\u00AC\\u00AE]/,\n  /[\\u00B0\\u00B1]/,\n  /[\\u00B6\\u00BB\\u00BF\\u00D7\\u00F7]/,\n  /[\\u2016-\\u2017]/,\n  /[\\u2020-\\u2027]/,\n  /[\\u2030-\\u203E]/,\n  /[\\u2041-\\u2053]/,\n  /[\\u2055-\\u205E]/,\n  /[\\u2190-\\u23FF]/,\n  /[\\u2500-\\u2775]/,\n  /[\\u2794-\\u2BFF]/,\n  /[\\u2E00-\\u2E7F]/,\n  /[\\u3001-\\u3003]/,\n  /[\\u3008-\\u3020]/,\n  /[\\u3030]/\n);\n\n// Valid characters for operators.\nconst operatorCharacter = either(\n  operatorHead,\n  /[\\u0300-\\u036F]/,\n  /[\\u1DC0-\\u1DFF]/,\n  /[\\u20D0-\\u20FF]/,\n  /[\\uFE00-\\uFE0F]/,\n  /[\\uFE20-\\uFE2F]/\n  // TODO: The following characters are also allowed, but the regex isn't supported yet.\n  // /[\\u{E0100}-\\u{E01EF}]/u\n);\n\n// Valid operator.\nconst operator = concat(operatorHead, operatorCharacter, '*');\n\n// Valid first characters for identifiers.\nconst identifierHead = either(\n  /[a-zA-Z_]/,\n  /[\\u00A8\\u00AA\\u00AD\\u00AF\\u00B2-\\u00B5\\u00B7-\\u00BA]/,\n  /[\\u00BC-\\u00BE\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u00FF]/,\n  /[\\u0100-\\u02FF\\u0370-\\u167F\\u1681-\\u180D\\u180F-\\u1DBF]/,\n  /[\\u1E00-\\u1FFF]/,\n  /[\\u200B-\\u200D\\u202A-\\u202E\\u203F-\\u2040\\u2054\\u2060-\\u206F]/,\n  /[\\u2070-\\u20CF\\u2100-\\u218F\\u2460-\\u24FF\\u2776-\\u2793]/,\n  /[\\u2C00-\\u2DFF\\u2E80-\\u2FFF]/,\n  /[\\u3004-\\u3007\\u3021-\\u302F\\u3031-\\u303F\\u3040-\\uD7FF]/,\n  /[\\uF900-\\uFD3D\\uFD40-\\uFDCF\\uFDF0-\\uFE1F\\uFE30-\\uFE44]/,\n  /[\\uFE47-\\uFEFE\\uFF00-\\uFFFD]/ // Should be /[\\uFE47-\\uFFFD]/, but we have to exclude FEFF.\n  // The following characters are also allowed, but the regexes aren't supported yet.\n  // /[\\u{10000}-\\u{1FFFD}\\u{20000-\\u{2FFFD}\\u{30000}-\\u{3FFFD}\\u{40000}-\\u{4FFFD}]/u,\n  // /[\\u{50000}-\\u{5FFFD}\\u{60000-\\u{6FFFD}\\u{70000}-\\u{7FFFD}\\u{80000}-\\u{8FFFD}]/u,\n  // /[\\u{90000}-\\u{9FFFD}\\u{A0000-\\u{AFFFD}\\u{B0000}-\\u{BFFFD}\\u{C0000}-\\u{CFFFD}]/u,\n  // /[\\u{D0000}-\\u{DFFFD}\\u{E0000-\\u{EFFFD}]/u\n);\n\n// Valid characters for identifiers.\nconst identifierCharacter = either(\n  identifierHead,\n  /\\d/,\n  /[\\u0300-\\u036F\\u1DC0-\\u1DFF\\u20D0-\\u20FF\\uFE20-\\uFE2F]/\n);\n\n// Valid identifier.\nconst identifier = concat(identifierHead, identifierCharacter, '*');\n\n// Valid type identifier.\nconst typeIdentifier = concat(/[A-Z]/, identifierCharacter, '*');\n\n// Built-in attributes, which are highlighted as keywords.\n// @available is handled separately.\n// https://docs.swift.org/swift-book/documentation/the-swift-programming-language/attributes\nconst keywordAttributes = [\n  'attached',\n  'autoclosure',\n  concat(/convention\\(/, either('swift', 'block', 'c'), /\\)/),\n  'discardableResult',\n  'dynamicCallable',\n  'dynamicMemberLookup',\n  'escaping',\n  'freestanding',\n  'frozen',\n  'GKInspectable',\n  'IBAction',\n  'IBDesignable',\n  'IBInspectable',\n  'IBOutlet',\n  'IBSegueAction',\n  'inlinable',\n  'main',\n  'nonobjc',\n  'NSApplicationMain',\n  'NSCopying',\n  'NSManaged',\n  concat(/objc\\(/, identifier, /\\)/),\n  'objc',\n  'objcMembers',\n  'propertyWrapper',\n  'requires_stored_property_inits',\n  'resultBuilder',\n  'Sendable',\n  'testable',\n  'UIApplicationMain',\n  'unchecked',\n  'unknown',\n  'usableFromInline',\n  'warn_unqualified_access'\n];\n\n// Contextual keywords used in @available and #(un)available.\nconst availabilityKeywords = [\n  'iOS',\n  'iOSApplicationExtension',\n  'macOS',\n  'macOSApplicationExtension',\n  'macCatalyst',\n  'macCatalystApplicationExtension',\n  'watchOS',\n  'watchOSApplicationExtension',\n  'tvOS',\n  'tvOSApplicationExtension',\n  'swift'\n];\n\n/*\nLanguage: Swift\nDescription: Swift is a general-purpose programming language built using a modern approach to safety, performance, and software design patterns.\nAuthor: Steven Van Impe <steven.vanimpe@icloud.com>\nContributors: Chris Eidhof <chris@eidhof.nl>, Nate Cook <natecook@gmail.com>, Alexander Lichter <manniL@gmx.net>, Richard Gibson <gibson042@github>\nWebsite: https://swift.org\nCategory: common, system\n*/\n\n\n/** @type LanguageFn */\nfunction swift(hljs) {\n  const WHITESPACE = {\n    match: /\\s+/,\n    relevance: 0\n  };\n  // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID411\n  const BLOCK_COMMENT = hljs.COMMENT(\n    '/\\\\*',\n    '\\\\*/',\n    { contains: [ 'self' ] }\n  );\n  const COMMENTS = [\n    hljs.C_LINE_COMMENT_MODE,\n    BLOCK_COMMENT\n  ];\n\n  // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID413\n  // https://docs.swift.org/swift-book/ReferenceManual/zzSummaryOfTheGrammar.html\n  const DOT_KEYWORD = {\n    match: [\n      /\\./,\n      either(...dotKeywords, ...optionalDotKeywords)\n    ],\n    className: { 2: \"keyword\" }\n  };\n  const KEYWORD_GUARD = {\n    // Consume .keyword to prevent highlighting properties and methods as keywords.\n    match: concat(/\\./, either(...keywords)),\n    relevance: 0\n  };\n  const PLAIN_KEYWORDS = keywords\n    .filter(kw => typeof kw === 'string')\n    .concat([ \"_|0\" ]); // seems common, so 0 relevance\n  const REGEX_KEYWORDS = keywords\n    .filter(kw => typeof kw !== 'string') // find regex\n    .concat(keywordTypes)\n    .map(keywordWrapper);\n  const KEYWORD = { variants: [\n    {\n      className: 'keyword',\n      match: either(...REGEX_KEYWORDS, ...optionalDotKeywords)\n    }\n  ] };\n  // find all the regular keywords\n  const KEYWORDS = {\n    $pattern: either(\n      /\\b\\w+/, // regular keywords\n      /#\\w+/ // number keywords\n    ),\n    keyword: PLAIN_KEYWORDS\n      .concat(numberSignKeywords),\n    literal: literals\n  };\n  const KEYWORD_MODES = [\n    DOT_KEYWORD,\n    KEYWORD_GUARD,\n    KEYWORD\n  ];\n\n  // https://github.com/apple/swift/tree/main/stdlib/public/core\n  const BUILT_IN_GUARD = {\n    // Consume .built_in to prevent highlighting properties and methods.\n    match: concat(/\\./, either(...builtIns)),\n    relevance: 0\n  };\n  const BUILT_IN = {\n    className: 'built_in',\n    match: concat(/\\b/, either(...builtIns), /(?=\\()/)\n  };\n  const BUILT_INS = [\n    BUILT_IN_GUARD,\n    BUILT_IN\n  ];\n\n  // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID418\n  const OPERATOR_GUARD = {\n    // Prevent -> from being highlighting as an operator.\n    match: /->/,\n    relevance: 0\n  };\n  const OPERATOR = {\n    className: 'operator',\n    relevance: 0,\n    variants: [\n      { match: operator },\n      {\n        // dot-operator: only operators that start with a dot are allowed to use dots as\n        // characters (..., ...<, .*, etc). So there rule here is: a dot followed by one or more\n        // characters that may also include dots.\n        match: `\\\\.(\\\\.|${operatorCharacter})+` }\n    ]\n  };\n  const OPERATORS = [\n    OPERATOR_GUARD,\n    OPERATOR\n  ];\n\n  // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#grammar_numeric-literal\n  // TODO: Update for leading `-` after lookbehind is supported everywhere\n  const decimalDigits = '([0-9]_*)+';\n  const hexDigits = '([0-9a-fA-F]_*)+';\n  const NUMBER = {\n    className: 'number',\n    relevance: 0,\n    variants: [\n      // decimal floating-point-literal (subsumes decimal-literal)\n      { match: `\\\\b(${decimalDigits})(\\\\.(${decimalDigits}))?` + `([eE][+-]?(${decimalDigits}))?\\\\b` },\n      // hexadecimal floating-point-literal (subsumes hexadecimal-literal)\n      { match: `\\\\b0x(${hexDigits})(\\\\.(${hexDigits}))?` + `([pP][+-]?(${decimalDigits}))?\\\\b` },\n      // octal-literal\n      { match: /\\b0o([0-7]_*)+\\b/ },\n      // binary-literal\n      { match: /\\b0b([01]_*)+\\b/ }\n    ]\n  };\n\n  // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#grammar_string-literal\n  const ESCAPED_CHARACTER = (rawDelimiter = \"\") => ({\n    className: 'subst',\n    variants: [\n      { match: concat(/\\\\/, rawDelimiter, /[0\\\\tnr\"']/) },\n      { match: concat(/\\\\/, rawDelimiter, /u\\{[0-9a-fA-F]{1,8}\\}/) }\n    ]\n  });\n  const ESCAPED_NEWLINE = (rawDelimiter = \"\") => ({\n    className: 'subst',\n    match: concat(/\\\\/, rawDelimiter, /[\\t ]*(?:[\\r\\n]|\\r\\n)/)\n  });\n  const INTERPOLATION = (rawDelimiter = \"\") => ({\n    className: 'subst',\n    label: \"interpol\",\n    begin: concat(/\\\\/, rawDelimiter, /\\(/),\n    end: /\\)/\n  });\n  const MULTILINE_STRING = (rawDelimiter = \"\") => ({\n    begin: concat(rawDelimiter, /\"\"\"/),\n    end: concat(/\"\"\"/, rawDelimiter),\n    contains: [\n      ESCAPED_CHARACTER(rawDelimiter),\n      ESCAPED_NEWLINE(rawDelimiter),\n      INTERPOLATION(rawDelimiter)\n    ]\n  });\n  const SINGLE_LINE_STRING = (rawDelimiter = \"\") => ({\n    begin: concat(rawDelimiter, /\"/),\n    end: concat(/\"/, rawDelimiter),\n    contains: [\n      ESCAPED_CHARACTER(rawDelimiter),\n      INTERPOLATION(rawDelimiter)\n    ]\n  });\n  const STRING = {\n    className: 'string',\n    variants: [\n      MULTILINE_STRING(),\n      MULTILINE_STRING(\"#\"),\n      MULTILINE_STRING(\"##\"),\n      MULTILINE_STRING(\"###\"),\n      SINGLE_LINE_STRING(),\n      SINGLE_LINE_STRING(\"#\"),\n      SINGLE_LINE_STRING(\"##\"),\n      SINGLE_LINE_STRING(\"###\")\n    ]\n  };\n\n  const REGEXP_CONTENTS = [\n    hljs.BACKSLASH_ESCAPE,\n    {\n      begin: /\\[/,\n      end: /\\]/,\n      relevance: 0,\n      contains: [ hljs.BACKSLASH_ESCAPE ]\n    }\n  ];\n\n  const BARE_REGEXP_LITERAL = {\n    begin: /\\/[^\\s](?=[^/\\n]*\\/)/,\n    end: /\\//,\n    contains: REGEXP_CONTENTS\n  };\n\n  const EXTENDED_REGEXP_LITERAL = (rawDelimiter) => {\n    const begin = concat(rawDelimiter, /\\//);\n    const end = concat(/\\//, rawDelimiter);\n    return {\n      begin,\n      end,\n      contains: [\n        ...REGEXP_CONTENTS,\n        {\n          scope: \"comment\",\n          begin: `#(?!.*${end})`,\n          end: /$/,\n        },\n      ],\n    };\n  };\n\n  // https://docs.swift.org/swift-book/documentation/the-swift-programming-language/lexicalstructure/#Regular-Expression-Literals\n  const REGEXP = {\n    scope: \"regexp\",\n    variants: [\n      EXTENDED_REGEXP_LITERAL('###'),\n      EXTENDED_REGEXP_LITERAL('##'),\n      EXTENDED_REGEXP_LITERAL('#'),\n      BARE_REGEXP_LITERAL\n    ]\n  };\n\n  // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID412\n  const QUOTED_IDENTIFIER = { match: concat(/`/, identifier, /`/) };\n  const IMPLICIT_PARAMETER = {\n    className: 'variable',\n    match: /\\$\\d+/\n  };\n  const PROPERTY_WRAPPER_PROJECTION = {\n    className: 'variable',\n    match: `\\\\$${identifierCharacter}+`\n  };\n  const IDENTIFIERS = [\n    QUOTED_IDENTIFIER,\n    IMPLICIT_PARAMETER,\n    PROPERTY_WRAPPER_PROJECTION\n  ];\n\n  // https://docs.swift.org/swift-book/ReferenceManual/Attributes.html\n  const AVAILABLE_ATTRIBUTE = {\n    match: /(@|#(un)?)available/,\n    scope: 'keyword',\n    starts: { contains: [\n      {\n        begin: /\\(/,\n        end: /\\)/,\n        keywords: availabilityKeywords,\n        contains: [\n          ...OPERATORS,\n          NUMBER,\n          STRING\n        ]\n      }\n    ] }\n  };\n  const KEYWORD_ATTRIBUTE = {\n    scope: 'keyword',\n    match: concat(/@/, either(...keywordAttributes))\n  };\n  const USER_DEFINED_ATTRIBUTE = {\n    scope: 'meta',\n    match: concat(/@/, identifier)\n  };\n  const ATTRIBUTES = [\n    AVAILABLE_ATTRIBUTE,\n    KEYWORD_ATTRIBUTE,\n    USER_DEFINED_ATTRIBUTE\n  ];\n\n  // https://docs.swift.org/swift-book/ReferenceManual/Types.html\n  const TYPE = {\n    match: lookahead(/\\b[A-Z]/),\n    relevance: 0,\n    contains: [\n      { // Common Apple frameworks, for relevance boost\n        className: 'type',\n        match: concat(/(AV|CA|CF|CG|CI|CL|CM|CN|CT|MK|MP|MTK|MTL|NS|SCN|SK|UI|WK|XC)/, identifierCharacter, '+')\n      },\n      { // Type identifier\n        className: 'type',\n        match: typeIdentifier,\n        relevance: 0\n      },\n      { // Optional type\n        match: /[?!]+/,\n        relevance: 0\n      },\n      { // Variadic parameter\n        match: /\\.\\.\\./,\n        relevance: 0\n      },\n      { // Protocol composition\n        match: concat(/\\s+&\\s+/, lookahead(typeIdentifier)),\n        relevance: 0\n      }\n    ]\n  };\n  const GENERIC_ARGUMENTS = {\n    begin: /</,\n    end: />/,\n    keywords: KEYWORDS,\n    contains: [\n      ...COMMENTS,\n      ...KEYWORD_MODES,\n      ...ATTRIBUTES,\n      OPERATOR_GUARD,\n      TYPE\n    ]\n  };\n  TYPE.contains.push(GENERIC_ARGUMENTS);\n\n  // https://docs.swift.org/swift-book/ReferenceManual/Expressions.html#ID552\n  // Prevents element names from being highlighted as keywords.\n  const TUPLE_ELEMENT_NAME = {\n    match: concat(identifier, /\\s*:/),\n    keywords: \"_|0\",\n    relevance: 0\n  };\n  // Matches tuples as well as the parameter list of a function type.\n  const TUPLE = {\n    begin: /\\(/,\n    end: /\\)/,\n    relevance: 0,\n    keywords: KEYWORDS,\n    contains: [\n      'self',\n      TUPLE_ELEMENT_NAME,\n      ...COMMENTS,\n      REGEXP,\n      ...KEYWORD_MODES,\n      ...BUILT_INS,\n      ...OPERATORS,\n      NUMBER,\n      STRING,\n      ...IDENTIFIERS,\n      ...ATTRIBUTES,\n      TYPE\n    ]\n  };\n\n  const GENERIC_PARAMETERS = {\n    begin: /</,\n    end: />/,\n    keywords: 'repeat each',\n    contains: [\n      ...COMMENTS,\n      TYPE\n    ]\n  };\n  const FUNCTION_PARAMETER_NAME = {\n    begin: either(\n      lookahead(concat(identifier, /\\s*:/)),\n      lookahead(concat(identifier, /\\s+/, identifier, /\\s*:/))\n    ),\n    end: /:/,\n    relevance: 0,\n    contains: [\n      {\n        className: 'keyword',\n        match: /\\b_\\b/\n      },\n      {\n        className: 'params',\n        match: identifier\n      }\n    ]\n  };\n  const FUNCTION_PARAMETERS = {\n    begin: /\\(/,\n    end: /\\)/,\n    keywords: KEYWORDS,\n    contains: [\n      FUNCTION_PARAMETER_NAME,\n      ...COMMENTS,\n      ...KEYWORD_MODES,\n      ...OPERATORS,\n      NUMBER,\n      STRING,\n      ...ATTRIBUTES,\n      TYPE,\n      TUPLE\n    ],\n    endsParent: true,\n    illegal: /[\"']/\n  };\n  // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID362\n  // https://docs.swift.org/swift-book/documentation/the-swift-programming-language/declarations/#Macro-Declaration\n  const FUNCTION_OR_MACRO = {\n    match: [\n      /(func|macro)/,\n      /\\s+/,\n      either(QUOTED_IDENTIFIER.match, identifier, operator)\n    ],\n    className: {\n      1: \"keyword\",\n      3: \"title.function\"\n    },\n    contains: [\n      GENERIC_PARAMETERS,\n      FUNCTION_PARAMETERS,\n      WHITESPACE\n    ],\n    illegal: [\n      /\\[/,\n      /%/\n    ]\n  };\n\n  // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID375\n  // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID379\n  const INIT_SUBSCRIPT = {\n    match: [\n      /\\b(?:subscript|init[?!]?)/,\n      /\\s*(?=[<(])/,\n    ],\n    className: { 1: \"keyword\" },\n    contains: [\n      GENERIC_PARAMETERS,\n      FUNCTION_PARAMETERS,\n      WHITESPACE\n    ],\n    illegal: /\\[|%/\n  };\n  // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID380\n  const OPERATOR_DECLARATION = {\n    match: [\n      /operator/,\n      /\\s+/,\n      operator\n    ],\n    className: {\n      1: \"keyword\",\n      3: \"title\"\n    }\n  };\n\n  // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID550\n  const PRECEDENCEGROUP = {\n    begin: [\n      /precedencegroup/,\n      /\\s+/,\n      typeIdentifier\n    ],\n    className: {\n      1: \"keyword\",\n      3: \"title\"\n    },\n    contains: [ TYPE ],\n    keywords: [\n      ...precedencegroupKeywords,\n      ...literals\n    ],\n    end: /}/\n  };\n\n  // Add supported submodes to string interpolation.\n  for (const variant of STRING.variants) {\n    const interpolation = variant.contains.find(mode => mode.label === \"interpol\");\n    // TODO: Interpolation can contain any expression, so there's room for improvement here.\n    interpolation.keywords = KEYWORDS;\n    const submodes = [\n      ...KEYWORD_MODES,\n      ...BUILT_INS,\n      ...OPERATORS,\n      NUMBER,\n      STRING,\n      ...IDENTIFIERS\n    ];\n    interpolation.contains = [\n      ...submodes,\n      {\n        begin: /\\(/,\n        end: /\\)/,\n        contains: [\n          'self',\n          ...submodes\n        ]\n      }\n    ];\n  }\n\n  return {\n    name: 'Swift',\n    keywords: KEYWORDS,\n    contains: [\n      ...COMMENTS,\n      FUNCTION_OR_MACRO,\n      INIT_SUBSCRIPT,\n      {\n        beginKeywords: 'struct protocol class extension enum actor',\n        end: '\\\\{',\n        excludeEnd: true,\n        keywords: KEYWORDS,\n        contains: [\n          hljs.inherit(hljs.TITLE_MODE, {\n            className: \"title.class\",\n            begin: /[A-Za-z$_][\\u00C0-\\u02B80-9A-Za-z$_]*/\n          }),\n          ...KEYWORD_MODES\n        ]\n      },\n      OPERATOR_DECLARATION,\n      PRECEDENCEGROUP,\n      {\n        beginKeywords: 'import',\n        end: /$/,\n        contains: [ ...COMMENTS ],\n        relevance: 0\n      },\n      REGEXP,\n      ...KEYWORD_MODES,\n      ...BUILT_INS,\n      ...OPERATORS,\n      NUMBER,\n      STRING,\n      ...IDENTIFIERS,\n      ...ATTRIBUTES,\n      TYPE,\n      TUPLE\n    ]\n  };\n}\n\nmodule.exports = swift;\n",
      "start": 1699633501388,
      "end": 1699633501485,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1699633501486,
      "end": 1699633501486,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1699633501486,
      "end": 1699633501486,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1699633501486,
      "end": 1699633501486,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1699633501486,
      "end": 1699633501486,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1699633501486,
      "end": 1699633501486,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1699633501486,
      "end": 1699633501486,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1699633501486,
      "end": 1699633501486,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1699633501486,
      "end": 1699633501486,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1699633501486,
      "end": 1699633501486,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1699633501486,
      "end": 1699633501486,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1699633501486,
      "end": 1699633501486,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1699633501487,
      "end": 1699633501487,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1699633501487,
      "end": 1699633501487,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1699633501487,
      "end": 1699633501487,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1699633501487,
      "end": 1699633501487,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1699633501487,
      "end": 1699633501487,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1699633501487,
      "end": 1699633501487,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1699633501487,
      "end": 1699633501487,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1699633501487,
      "end": 1699633501487,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1699633501487,
      "end": 1699633501487,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "result": "/**\n * @param {string} value\n * @returns {RegExp}\n * */\nimport * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\n\nvar swift_1;\nvar hasRequiredSwift;\n\nfunction requireSwift () {\n\tif (hasRequiredSwift) return swift_1;\n\thasRequiredSwift = 1;\n\t/**\n\t * @param {RegExp | string } re\n\t * @returns {string}\n\t */\n\tfunction source(re) {\n\t  if (!re) return null;\n\t  if (typeof re === \"string\") return re;\n\n\t  return re.source;\n\t}\n\n\t/**\n\t * @param {RegExp | string } re\n\t * @returns {string}\n\t */\n\tfunction lookahead(re) {\n\t  return concat('(?=', re, ')');\n\t}\n\n\t/**\n\t * @param {...(RegExp | string) } args\n\t * @returns {string}\n\t */\n\tfunction concat(...args) {\n\t  const joined = args.map((x) => source(x)).join(\"\");\n\t  return joined;\n\t}\n\n\t/**\n\t * @param { Array<string | RegExp | Object> } args\n\t * @returns {object}\n\t */\n\tfunction stripOptionsFromArgs(args) {\n\t  const opts = args[args.length - 1];\n\n\t  if (typeof opts === 'object' && opts.constructor === Object) {\n\t    args.splice(args.length - 1, 1);\n\t    return opts;\n\t  } else {\n\t    return {};\n\t  }\n\t}\n\n\t/** @typedef { {capture?: boolean} } RegexEitherOptions */\n\n\t/**\n\t * Any of the passed expresssions may match\n\t *\n\t * Creates a huge this | this | that | that match\n\t * @param {(RegExp | string)[] | [...(RegExp | string)[], RegexEitherOptions]} args\n\t * @returns {string}\n\t */\n\tfunction either(...args) {\n\t  /** @type { object & {capture?: boolean} }  */\n\t  const opts = stripOptionsFromArgs(args);\n\t  const joined = '('\n\t    + (opts.capture ? \"\" : \"?:\")\n\t    + args.map((x) => source(x)).join(\"|\") + \")\";\n\t  return joined;\n\t}\n\n\tconst keywordWrapper = keyword => concat(\n\t  /\\b/,\n\t  keyword,\n\t  /\\w$/.test(keyword) ? /\\b/ : /\\B/\n\t);\n\n\t// Keywords that require a leading dot.\n\tconst dotKeywords = [\n\t  'Protocol', // contextual\n\t  'Type' // contextual\n\t].map(keywordWrapper);\n\n\t// Keywords that may have a leading dot.\n\tconst optionalDotKeywords = [\n\t  'init',\n\t  'self'\n\t].map(keywordWrapper);\n\n\t// should register as keyword, not type\n\tconst keywordTypes = [\n\t  'Any',\n\t  'Self'\n\t];\n\n\t// Regular keywords and literals.\n\tconst keywords = [\n\t  // strings below will be fed into the regular `keywords` engine while regex\n\t  // will result in additional modes being created to scan for those keywords to\n\t  // avoid conflicts with other rules\n\t  'actor',\n\t  'any', // contextual\n\t  'associatedtype',\n\t  'async',\n\t  'await',\n\t  /as\\?/, // operator\n\t  /as!/, // operator\n\t  'as', // operator\n\t  'borrowing', // contextual\n\t  'break',\n\t  'case',\n\t  'catch',\n\t  'class',\n\t  'consume', // contextual\n\t  'consuming', // contextual\n\t  'continue',\n\t  'convenience', // contextual\n\t  'copy', // contextual\n\t  'default',\n\t  'defer',\n\t  'deinit',\n\t  'didSet', // contextual\n\t  'distributed',\n\t  'do',\n\t  'dynamic', // contextual\n\t  'each',\n\t  'else',\n\t  'enum',\n\t  'extension',\n\t  'fallthrough',\n\t  /fileprivate\\(set\\)/,\n\t  'fileprivate',\n\t  'final', // contextual\n\t  'for',\n\t  'func',\n\t  'get', // contextual\n\t  'guard',\n\t  'if',\n\t  'import',\n\t  'indirect', // contextual\n\t  'infix', // contextual\n\t  /init\\?/,\n\t  /init!/,\n\t  'inout',\n\t  /internal\\(set\\)/,\n\t  'internal',\n\t  'in',\n\t  'is', // operator\n\t  'isolated', // contextual\n\t  'nonisolated', // contextual\n\t  'lazy', // contextual\n\t  'let',\n\t  'macro',\n\t  'mutating', // contextual\n\t  'nonmutating', // contextual\n\t  /open\\(set\\)/, // contextual\n\t  'open', // contextual\n\t  'operator',\n\t  'optional', // contextual\n\t  'override', // contextual\n\t  'postfix', // contextual\n\t  'precedencegroup',\n\t  'prefix', // contextual\n\t  /private\\(set\\)/,\n\t  'private',\n\t  'protocol',\n\t  /public\\(set\\)/,\n\t  'public',\n\t  'repeat',\n\t  'required', // contextual\n\t  'rethrows',\n\t  'return',\n\t  'set', // contextual\n\t  'some', // contextual\n\t  'static',\n\t  'struct',\n\t  'subscript',\n\t  'super',\n\t  'switch',\n\t  'throws',\n\t  'throw',\n\t  /try\\?/, // operator\n\t  /try!/, // operator\n\t  'try', // operator\n\t  'typealias',\n\t  /unowned\\(safe\\)/, // contextual\n\t  /unowned\\(unsafe\\)/, // contextual\n\t  'unowned', // contextual\n\t  'var',\n\t  'weak', // contextual\n\t  'where',\n\t  'while',\n\t  'willSet' // contextual\n\t];\n\n\t// NOTE: Contextual keywords are reserved only in specific contexts.\n\t// Ideally, these should be matched using modes to avoid false positives.\n\n\t// Literals.\n\tconst literals = [\n\t  'false',\n\t  'nil',\n\t  'true'\n\t];\n\n\t// Keywords used in precedence groups.\n\tconst precedencegroupKeywords = [\n\t  'assignment',\n\t  'associativity',\n\t  'higherThan',\n\t  'left',\n\t  'lowerThan',\n\t  'none',\n\t  'right'\n\t];\n\n\t// Keywords that start with a number sign (#).\n\t// #(un)available is handled separately.\n\tconst numberSignKeywords = [\n\t  '#colorLiteral',\n\t  '#column',\n\t  '#dsohandle',\n\t  '#else',\n\t  '#elseif',\n\t  '#endif',\n\t  '#error',\n\t  '#file',\n\t  '#fileID',\n\t  '#fileLiteral',\n\t  '#filePath',\n\t  '#function',\n\t  '#if',\n\t  '#imageLiteral',\n\t  '#keyPath',\n\t  '#line',\n\t  '#selector',\n\t  '#sourceLocation',\n\t  '#warning'\n\t];\n\n\t// Global functions in the Standard Library.\n\tconst builtIns = [\n\t  'abs',\n\t  'all',\n\t  'any',\n\t  'assert',\n\t  'assertionFailure',\n\t  'debugPrint',\n\t  'dump',\n\t  'fatalError',\n\t  'getVaList',\n\t  'isKnownUniquelyReferenced',\n\t  'max',\n\t  'min',\n\t  'numericCast',\n\t  'pointwiseMax',\n\t  'pointwiseMin',\n\t  'precondition',\n\t  'preconditionFailure',\n\t  'print',\n\t  'readLine',\n\t  'repeatElement',\n\t  'sequence',\n\t  'stride',\n\t  'swap',\n\t  'swift_unboxFromSwiftValueWithType',\n\t  'transcode',\n\t  'type',\n\t  'unsafeBitCast',\n\t  'unsafeDowncast',\n\t  'withExtendedLifetime',\n\t  'withUnsafeMutablePointer',\n\t  'withUnsafePointer',\n\t  'withVaList',\n\t  'withoutActuallyEscaping',\n\t  'zip'\n\t];\n\n\t// Valid first characters for operators.\n\tconst operatorHead = either(\n\t  /[/=\\-+!*%<>&|^~?]/,\n\t  /[\\u00A1-\\u00A7]/,\n\t  /[\\u00A9\\u00AB]/,\n\t  /[\\u00AC\\u00AE]/,\n\t  /[\\u00B0\\u00B1]/,\n\t  /[\\u00B6\\u00BB\\u00BF\\u00D7\\u00F7]/,\n\t  /[\\u2016-\\u2017]/,\n\t  /[\\u2020-\\u2027]/,\n\t  /[\\u2030-\\u203E]/,\n\t  /[\\u2041-\\u2053]/,\n\t  /[\\u2055-\\u205E]/,\n\t  /[\\u2190-\\u23FF]/,\n\t  /[\\u2500-\\u2775]/,\n\t  /[\\u2794-\\u2BFF]/,\n\t  /[\\u2E00-\\u2E7F]/,\n\t  /[\\u3001-\\u3003]/,\n\t  /[\\u3008-\\u3020]/,\n\t  /[\\u3030]/\n\t);\n\n\t// Valid characters for operators.\n\tconst operatorCharacter = either(\n\t  operatorHead,\n\t  /[\\u0300-\\u036F]/,\n\t  /[\\u1DC0-\\u1DFF]/,\n\t  /[\\u20D0-\\u20FF]/,\n\t  /[\\uFE00-\\uFE0F]/,\n\t  /[\\uFE20-\\uFE2F]/\n\t  // TODO: The following characters are also allowed, but the regex isn't supported yet.\n\t  // /[\\u{E0100}-\\u{E01EF}]/u\n\t);\n\n\t// Valid operator.\n\tconst operator = concat(operatorHead, operatorCharacter, '*');\n\n\t// Valid first characters for identifiers.\n\tconst identifierHead = either(\n\t  /[a-zA-Z_]/,\n\t  /[\\u00A8\\u00AA\\u00AD\\u00AF\\u00B2-\\u00B5\\u00B7-\\u00BA]/,\n\t  /[\\u00BC-\\u00BE\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u00FF]/,\n\t  /[\\u0100-\\u02FF\\u0370-\\u167F\\u1681-\\u180D\\u180F-\\u1DBF]/,\n\t  /[\\u1E00-\\u1FFF]/,\n\t  /[\\u200B-\\u200D\\u202A-\\u202E\\u203F-\\u2040\\u2054\\u2060-\\u206F]/,\n\t  /[\\u2070-\\u20CF\\u2100-\\u218F\\u2460-\\u24FF\\u2776-\\u2793]/,\n\t  /[\\u2C00-\\u2DFF\\u2E80-\\u2FFF]/,\n\t  /[\\u3004-\\u3007\\u3021-\\u302F\\u3031-\\u303F\\u3040-\\uD7FF]/,\n\t  /[\\uF900-\\uFD3D\\uFD40-\\uFDCF\\uFDF0-\\uFE1F\\uFE30-\\uFE44]/,\n\t  /[\\uFE47-\\uFEFE\\uFF00-\\uFFFD]/ // Should be /[\\uFE47-\\uFFFD]/, but we have to exclude FEFF.\n\t  // The following characters are also allowed, but the regexes aren't supported yet.\n\t  // /[\\u{10000}-\\u{1FFFD}\\u{20000-\\u{2FFFD}\\u{30000}-\\u{3FFFD}\\u{40000}-\\u{4FFFD}]/u,\n\t  // /[\\u{50000}-\\u{5FFFD}\\u{60000-\\u{6FFFD}\\u{70000}-\\u{7FFFD}\\u{80000}-\\u{8FFFD}]/u,\n\t  // /[\\u{90000}-\\u{9FFFD}\\u{A0000-\\u{AFFFD}\\u{B0000}-\\u{BFFFD}\\u{C0000}-\\u{CFFFD}]/u,\n\t  // /[\\u{D0000}-\\u{DFFFD}\\u{E0000-\\u{EFFFD}]/u\n\t);\n\n\t// Valid characters for identifiers.\n\tconst identifierCharacter = either(\n\t  identifierHead,\n\t  /\\d/,\n\t  /[\\u0300-\\u036F\\u1DC0-\\u1DFF\\u20D0-\\u20FF\\uFE20-\\uFE2F]/\n\t);\n\n\t// Valid identifier.\n\tconst identifier = concat(identifierHead, identifierCharacter, '*');\n\n\t// Valid type identifier.\n\tconst typeIdentifier = concat(/[A-Z]/, identifierCharacter, '*');\n\n\t// Built-in attributes, which are highlighted as keywords.\n\t// @available is handled separately.\n\t// https://docs.swift.org/swift-book/documentation/the-swift-programming-language/attributes\n\tconst keywordAttributes = [\n\t  'attached',\n\t  'autoclosure',\n\t  concat(/convention\\(/, either('swift', 'block', 'c'), /\\)/),\n\t  'discardableResult',\n\t  'dynamicCallable',\n\t  'dynamicMemberLookup',\n\t  'escaping',\n\t  'freestanding',\n\t  'frozen',\n\t  'GKInspectable',\n\t  'IBAction',\n\t  'IBDesignable',\n\t  'IBInspectable',\n\t  'IBOutlet',\n\t  'IBSegueAction',\n\t  'inlinable',\n\t  'main',\n\t  'nonobjc',\n\t  'NSApplicationMain',\n\t  'NSCopying',\n\t  'NSManaged',\n\t  concat(/objc\\(/, identifier, /\\)/),\n\t  'objc',\n\t  'objcMembers',\n\t  'propertyWrapper',\n\t  'requires_stored_property_inits',\n\t  'resultBuilder',\n\t  'Sendable',\n\t  'testable',\n\t  'UIApplicationMain',\n\t  'unchecked',\n\t  'unknown',\n\t  'usableFromInline',\n\t  'warn_unqualified_access'\n\t];\n\n\t// Contextual keywords used in @available and #(un)available.\n\tconst availabilityKeywords = [\n\t  'iOS',\n\t  'iOSApplicationExtension',\n\t  'macOS',\n\t  'macOSApplicationExtension',\n\t  'macCatalyst',\n\t  'macCatalystApplicationExtension',\n\t  'watchOS',\n\t  'watchOSApplicationExtension',\n\t  'tvOS',\n\t  'tvOSApplicationExtension',\n\t  'swift'\n\t];\n\n\t/*\n\tLanguage: Swift\n\tDescription: Swift is a general-purpose programming language built using a modern approach to safety, performance, and software design patterns.\n\tAuthor: Steven Van Impe <steven.vanimpe@icloud.com>\n\tContributors: Chris Eidhof <chris@eidhof.nl>, Nate Cook <natecook@gmail.com>, Alexander Lichter <manniL@gmx.net>, Richard Gibson <gibson042@github>\n\tWebsite: https://swift.org\n\tCategory: common, system\n\t*/\n\n\n\t/** @type LanguageFn */\n\tfunction swift(hljs) {\n\t  const WHITESPACE = {\n\t    match: /\\s+/,\n\t    relevance: 0\n\t  };\n\t  // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID411\n\t  const BLOCK_COMMENT = hljs.COMMENT(\n\t    '/\\\\*',\n\t    '\\\\*/',\n\t    { contains: [ 'self' ] }\n\t  );\n\t  const COMMENTS = [\n\t    hljs.C_LINE_COMMENT_MODE,\n\t    BLOCK_COMMENT\n\t  ];\n\n\t  // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID413\n\t  // https://docs.swift.org/swift-book/ReferenceManual/zzSummaryOfTheGrammar.html\n\t  const DOT_KEYWORD = {\n\t    match: [\n\t      /\\./,\n\t      either(...dotKeywords, ...optionalDotKeywords)\n\t    ],\n\t    className: { 2: \"keyword\" }\n\t  };\n\t  const KEYWORD_GUARD = {\n\t    // Consume .keyword to prevent highlighting properties and methods as keywords.\n\t    match: concat(/\\./, either(...keywords)),\n\t    relevance: 0\n\t  };\n\t  const PLAIN_KEYWORDS = keywords\n\t    .filter(kw => typeof kw === 'string')\n\t    .concat([ \"_|0\" ]); // seems common, so 0 relevance\n\t  const REGEX_KEYWORDS = keywords\n\t    .filter(kw => typeof kw !== 'string') // find regex\n\t    .concat(keywordTypes)\n\t    .map(keywordWrapper);\n\t  const KEYWORD = { variants: [\n\t    {\n\t      className: 'keyword',\n\t      match: either(...REGEX_KEYWORDS, ...optionalDotKeywords)\n\t    }\n\t  ] };\n\t  // find all the regular keywords\n\t  const KEYWORDS = {\n\t    $pattern: either(\n\t      /\\b\\w+/, // regular keywords\n\t      /#\\w+/ // number keywords\n\t    ),\n\t    keyword: PLAIN_KEYWORDS\n\t      .concat(numberSignKeywords),\n\t    literal: literals\n\t  };\n\t  const KEYWORD_MODES = [\n\t    DOT_KEYWORD,\n\t    KEYWORD_GUARD,\n\t    KEYWORD\n\t  ];\n\n\t  // https://github.com/apple/swift/tree/main/stdlib/public/core\n\t  const BUILT_IN_GUARD = {\n\t    // Consume .built_in to prevent highlighting properties and methods.\n\t    match: concat(/\\./, either(...builtIns)),\n\t    relevance: 0\n\t  };\n\t  const BUILT_IN = {\n\t    className: 'built_in',\n\t    match: concat(/\\b/, either(...builtIns), /(?=\\()/)\n\t  };\n\t  const BUILT_INS = [\n\t    BUILT_IN_GUARD,\n\t    BUILT_IN\n\t  ];\n\n\t  // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID418\n\t  const OPERATOR_GUARD = {\n\t    // Prevent -> from being highlighting as an operator.\n\t    match: /->/,\n\t    relevance: 0\n\t  };\n\t  const OPERATOR = {\n\t    className: 'operator',\n\t    relevance: 0,\n\t    variants: [\n\t      { match: operator },\n\t      {\n\t        // dot-operator: only operators that start with a dot are allowed to use dots as\n\t        // characters (..., ...<, .*, etc). So there rule here is: a dot followed by one or more\n\t        // characters that may also include dots.\n\t        match: `\\\\.(\\\\.|${operatorCharacter})+` }\n\t    ]\n\t  };\n\t  const OPERATORS = [\n\t    OPERATOR_GUARD,\n\t    OPERATOR\n\t  ];\n\n\t  // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#grammar_numeric-literal\n\t  // TODO: Update for leading `-` after lookbehind is supported everywhere\n\t  const decimalDigits = '([0-9]_*)+';\n\t  const hexDigits = '([0-9a-fA-F]_*)+';\n\t  const NUMBER = {\n\t    className: 'number',\n\t    relevance: 0,\n\t    variants: [\n\t      // decimal floating-point-literal (subsumes decimal-literal)\n\t      { match: `\\\\b(${decimalDigits})(\\\\.(${decimalDigits}))?` + `([eE][+-]?(${decimalDigits}))?\\\\b` },\n\t      // hexadecimal floating-point-literal (subsumes hexadecimal-literal)\n\t      { match: `\\\\b0x(${hexDigits})(\\\\.(${hexDigits}))?` + `([pP][+-]?(${decimalDigits}))?\\\\b` },\n\t      // octal-literal\n\t      { match: /\\b0o([0-7]_*)+\\b/ },\n\t      // binary-literal\n\t      { match: /\\b0b([01]_*)+\\b/ }\n\t    ]\n\t  };\n\n\t  // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#grammar_string-literal\n\t  const ESCAPED_CHARACTER = (rawDelimiter = \"\") => ({\n\t    className: 'subst',\n\t    variants: [\n\t      { match: concat(/\\\\/, rawDelimiter, /[0\\\\tnr\"']/) },\n\t      { match: concat(/\\\\/, rawDelimiter, /u\\{[0-9a-fA-F]{1,8}\\}/) }\n\t    ]\n\t  });\n\t  const ESCAPED_NEWLINE = (rawDelimiter = \"\") => ({\n\t    className: 'subst',\n\t    match: concat(/\\\\/, rawDelimiter, /[\\t ]*(?:[\\r\\n]|\\r\\n)/)\n\t  });\n\t  const INTERPOLATION = (rawDelimiter = \"\") => ({\n\t    className: 'subst',\n\t    label: \"interpol\",\n\t    begin: concat(/\\\\/, rawDelimiter, /\\(/),\n\t    end: /\\)/\n\t  });\n\t  const MULTILINE_STRING = (rawDelimiter = \"\") => ({\n\t    begin: concat(rawDelimiter, /\"\"\"/),\n\t    end: concat(/\"\"\"/, rawDelimiter),\n\t    contains: [\n\t      ESCAPED_CHARACTER(rawDelimiter),\n\t      ESCAPED_NEWLINE(rawDelimiter),\n\t      INTERPOLATION(rawDelimiter)\n\t    ]\n\t  });\n\t  const SINGLE_LINE_STRING = (rawDelimiter = \"\") => ({\n\t    begin: concat(rawDelimiter, /\"/),\n\t    end: concat(/\"/, rawDelimiter),\n\t    contains: [\n\t      ESCAPED_CHARACTER(rawDelimiter),\n\t      INTERPOLATION(rawDelimiter)\n\t    ]\n\t  });\n\t  const STRING = {\n\t    className: 'string',\n\t    variants: [\n\t      MULTILINE_STRING(),\n\t      MULTILINE_STRING(\"#\"),\n\t      MULTILINE_STRING(\"##\"),\n\t      MULTILINE_STRING(\"###\"),\n\t      SINGLE_LINE_STRING(),\n\t      SINGLE_LINE_STRING(\"#\"),\n\t      SINGLE_LINE_STRING(\"##\"),\n\t      SINGLE_LINE_STRING(\"###\")\n\t    ]\n\t  };\n\n\t  const REGEXP_CONTENTS = [\n\t    hljs.BACKSLASH_ESCAPE,\n\t    {\n\t      begin: /\\[/,\n\t      end: /\\]/,\n\t      relevance: 0,\n\t      contains: [ hljs.BACKSLASH_ESCAPE ]\n\t    }\n\t  ];\n\n\t  const BARE_REGEXP_LITERAL = {\n\t    begin: /\\/[^\\s](?=[^/\\n]*\\/)/,\n\t    end: /\\//,\n\t    contains: REGEXP_CONTENTS\n\t  };\n\n\t  const EXTENDED_REGEXP_LITERAL = (rawDelimiter) => {\n\t    const begin = concat(rawDelimiter, /\\//);\n\t    const end = concat(/\\//, rawDelimiter);\n\t    return {\n\t      begin,\n\t      end,\n\t      contains: [\n\t        ...REGEXP_CONTENTS,\n\t        {\n\t          scope: \"comment\",\n\t          begin: `#(?!.*${end})`,\n\t          end: /$/,\n\t        },\n\t      ],\n\t    };\n\t  };\n\n\t  // https://docs.swift.org/swift-book/documentation/the-swift-programming-language/lexicalstructure/#Regular-Expression-Literals\n\t  const REGEXP = {\n\t    scope: \"regexp\",\n\t    variants: [\n\t      EXTENDED_REGEXP_LITERAL('###'),\n\t      EXTENDED_REGEXP_LITERAL('##'),\n\t      EXTENDED_REGEXP_LITERAL('#'),\n\t      BARE_REGEXP_LITERAL\n\t    ]\n\t  };\n\n\t  // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID412\n\t  const QUOTED_IDENTIFIER = { match: concat(/`/, identifier, /`/) };\n\t  const IMPLICIT_PARAMETER = {\n\t    className: 'variable',\n\t    match: /\\$\\d+/\n\t  };\n\t  const PROPERTY_WRAPPER_PROJECTION = {\n\t    className: 'variable',\n\t    match: `\\\\$${identifierCharacter}+`\n\t  };\n\t  const IDENTIFIERS = [\n\t    QUOTED_IDENTIFIER,\n\t    IMPLICIT_PARAMETER,\n\t    PROPERTY_WRAPPER_PROJECTION\n\t  ];\n\n\t  // https://docs.swift.org/swift-book/ReferenceManual/Attributes.html\n\t  const AVAILABLE_ATTRIBUTE = {\n\t    match: /(@|#(un)?)available/,\n\t    scope: 'keyword',\n\t    starts: { contains: [\n\t      {\n\t        begin: /\\(/,\n\t        end: /\\)/,\n\t        keywords: availabilityKeywords,\n\t        contains: [\n\t          ...OPERATORS,\n\t          NUMBER,\n\t          STRING\n\t        ]\n\t      }\n\t    ] }\n\t  };\n\t  const KEYWORD_ATTRIBUTE = {\n\t    scope: 'keyword',\n\t    match: concat(/@/, either(...keywordAttributes))\n\t  };\n\t  const USER_DEFINED_ATTRIBUTE = {\n\t    scope: 'meta',\n\t    match: concat(/@/, identifier)\n\t  };\n\t  const ATTRIBUTES = [\n\t    AVAILABLE_ATTRIBUTE,\n\t    KEYWORD_ATTRIBUTE,\n\t    USER_DEFINED_ATTRIBUTE\n\t  ];\n\n\t  // https://docs.swift.org/swift-book/ReferenceManual/Types.html\n\t  const TYPE = {\n\t    match: lookahead(/\\b[A-Z]/),\n\t    relevance: 0,\n\t    contains: [\n\t      { // Common Apple frameworks, for relevance boost\n\t        className: 'type',\n\t        match: concat(/(AV|CA|CF|CG|CI|CL|CM|CN|CT|MK|MP|MTK|MTL|NS|SCN|SK|UI|WK|XC)/, identifierCharacter, '+')\n\t      },\n\t      { // Type identifier\n\t        className: 'type',\n\t        match: typeIdentifier,\n\t        relevance: 0\n\t      },\n\t      { // Optional type\n\t        match: /[?!]+/,\n\t        relevance: 0\n\t      },\n\t      { // Variadic parameter\n\t        match: /\\.\\.\\./,\n\t        relevance: 0\n\t      },\n\t      { // Protocol composition\n\t        match: concat(/\\s+&\\s+/, lookahead(typeIdentifier)),\n\t        relevance: 0\n\t      }\n\t    ]\n\t  };\n\t  const GENERIC_ARGUMENTS = {\n\t    begin: /</,\n\t    end: />/,\n\t    keywords: KEYWORDS,\n\t    contains: [\n\t      ...COMMENTS,\n\t      ...KEYWORD_MODES,\n\t      ...ATTRIBUTES,\n\t      OPERATOR_GUARD,\n\t      TYPE\n\t    ]\n\t  };\n\t  TYPE.contains.push(GENERIC_ARGUMENTS);\n\n\t  // https://docs.swift.org/swift-book/ReferenceManual/Expressions.html#ID552\n\t  // Prevents element names from being highlighted as keywords.\n\t  const TUPLE_ELEMENT_NAME = {\n\t    match: concat(identifier, /\\s*:/),\n\t    keywords: \"_|0\",\n\t    relevance: 0\n\t  };\n\t  // Matches tuples as well as the parameter list of a function type.\n\t  const TUPLE = {\n\t    begin: /\\(/,\n\t    end: /\\)/,\n\t    relevance: 0,\n\t    keywords: KEYWORDS,\n\t    contains: [\n\t      'self',\n\t      TUPLE_ELEMENT_NAME,\n\t      ...COMMENTS,\n\t      REGEXP,\n\t      ...KEYWORD_MODES,\n\t      ...BUILT_INS,\n\t      ...OPERATORS,\n\t      NUMBER,\n\t      STRING,\n\t      ...IDENTIFIERS,\n\t      ...ATTRIBUTES,\n\t      TYPE\n\t    ]\n\t  };\n\n\t  const GENERIC_PARAMETERS = {\n\t    begin: /</,\n\t    end: />/,\n\t    keywords: 'repeat each',\n\t    contains: [\n\t      ...COMMENTS,\n\t      TYPE\n\t    ]\n\t  };\n\t  const FUNCTION_PARAMETER_NAME = {\n\t    begin: either(\n\t      lookahead(concat(identifier, /\\s*:/)),\n\t      lookahead(concat(identifier, /\\s+/, identifier, /\\s*:/))\n\t    ),\n\t    end: /:/,\n\t    relevance: 0,\n\t    contains: [\n\t      {\n\t        className: 'keyword',\n\t        match: /\\b_\\b/\n\t      },\n\t      {\n\t        className: 'params',\n\t        match: identifier\n\t      }\n\t    ]\n\t  };\n\t  const FUNCTION_PARAMETERS = {\n\t    begin: /\\(/,\n\t    end: /\\)/,\n\t    keywords: KEYWORDS,\n\t    contains: [\n\t      FUNCTION_PARAMETER_NAME,\n\t      ...COMMENTS,\n\t      ...KEYWORD_MODES,\n\t      ...OPERATORS,\n\t      NUMBER,\n\t      STRING,\n\t      ...ATTRIBUTES,\n\t      TYPE,\n\t      TUPLE\n\t    ],\n\t    endsParent: true,\n\t    illegal: /[\"']/\n\t  };\n\t  // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID362\n\t  // https://docs.swift.org/swift-book/documentation/the-swift-programming-language/declarations/#Macro-Declaration\n\t  const FUNCTION_OR_MACRO = {\n\t    match: [\n\t      /(func|macro)/,\n\t      /\\s+/,\n\t      either(QUOTED_IDENTIFIER.match, identifier, operator)\n\t    ],\n\t    className: {\n\t      1: \"keyword\",\n\t      3: \"title.function\"\n\t    },\n\t    contains: [\n\t      GENERIC_PARAMETERS,\n\t      FUNCTION_PARAMETERS,\n\t      WHITESPACE\n\t    ],\n\t    illegal: [\n\t      /\\[/,\n\t      /%/\n\t    ]\n\t  };\n\n\t  // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID375\n\t  // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID379\n\t  const INIT_SUBSCRIPT = {\n\t    match: [\n\t      /\\b(?:subscript|init[?!]?)/,\n\t      /\\s*(?=[<(])/,\n\t    ],\n\t    className: { 1: \"keyword\" },\n\t    contains: [\n\t      GENERIC_PARAMETERS,\n\t      FUNCTION_PARAMETERS,\n\t      WHITESPACE\n\t    ],\n\t    illegal: /\\[|%/\n\t  };\n\t  // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID380\n\t  const OPERATOR_DECLARATION = {\n\t    match: [\n\t      /operator/,\n\t      /\\s+/,\n\t      operator\n\t    ],\n\t    className: {\n\t      1: \"keyword\",\n\t      3: \"title\"\n\t    }\n\t  };\n\n\t  // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID550\n\t  const PRECEDENCEGROUP = {\n\t    begin: [\n\t      /precedencegroup/,\n\t      /\\s+/,\n\t      typeIdentifier\n\t    ],\n\t    className: {\n\t      1: \"keyword\",\n\t      3: \"title\"\n\t    },\n\t    contains: [ TYPE ],\n\t    keywords: [\n\t      ...precedencegroupKeywords,\n\t      ...literals\n\t    ],\n\t    end: /}/\n\t  };\n\n\t  // Add supported submodes to string interpolation.\n\t  for (const variant of STRING.variants) {\n\t    const interpolation = variant.contains.find(mode => mode.label === \"interpol\");\n\t    // TODO: Interpolation can contain any expression, so there's room for improvement here.\n\t    interpolation.keywords = KEYWORDS;\n\t    const submodes = [\n\t      ...KEYWORD_MODES,\n\t      ...BUILT_INS,\n\t      ...OPERATORS,\n\t      NUMBER,\n\t      STRING,\n\t      ...IDENTIFIERS\n\t    ];\n\t    interpolation.contains = [\n\t      ...submodes,\n\t      {\n\t        begin: /\\(/,\n\t        end: /\\)/,\n\t        contains: [\n\t          'self',\n\t          ...submodes\n\t        ]\n\t      }\n\t    ];\n\t  }\n\n\t  return {\n\t    name: 'Swift',\n\t    keywords: KEYWORDS,\n\t    contains: [\n\t      ...COMMENTS,\n\t      FUNCTION_OR_MACRO,\n\t      INIT_SUBSCRIPT,\n\t      {\n\t        beginKeywords: 'struct protocol class extension enum actor',\n\t        end: '\\\\{',\n\t        excludeEnd: true,\n\t        keywords: KEYWORDS,\n\t        contains: [\n\t          hljs.inherit(hljs.TITLE_MODE, {\n\t            className: \"title.class\",\n\t            begin: /[A-Za-z$_][\\u00C0-\\u02B80-9A-Za-z$_]*/\n\t          }),\n\t          ...KEYWORD_MODES\n\t        ]\n\t      },\n\t      OPERATOR_DECLARATION,\n\t      PRECEDENCEGROUP,\n\t      {\n\t        beginKeywords: 'import',\n\t        end: /$/,\n\t        contains: [ ...COMMENTS ],\n\t        relevance: 0\n\t      },\n\t      REGEXP,\n\t      ...KEYWORD_MODES,\n\t      ...BUILT_INS,\n\t      ...OPERATORS,\n\t      NUMBER,\n\t      STRING,\n\t      ...IDENTIFIERS,\n\t      ...ATTRIBUTES,\n\t      TYPE,\n\t      TUPLE\n\t    ]\n\t  };\n\t}\n\n\tswift_1 = swift;\n\treturn swift_1;\n}\n\nexport { requireSwift as __require };",
      "start": 1699633501487,
      "end": 1699633501489,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "file": null,
        "sources": [
          null
        ],
        "sourcesContent": [
          null
        ],
        "names": [],
        "mappings": "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"
      }
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1699633501490,
      "end": 1699633501490,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1699633501490,
      "end": 1699633501490,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1699633501490,
      "end": 1699633501490,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1699633501490,
      "end": 1699633501490,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1699633501490,
      "end": 1699633501490,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1699633501490,
      "end": 1699633501490,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1699633501490,
      "end": 1699633501490,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1699633501490,
      "end": 1699633501490,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1699633501490,
      "end": 1699633501490,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1699633501490,
      "end": 1699633501490,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1699633501490,
      "end": 1699633501490,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1699633501490,
      "end": 1699633501490,
      "order": "normal"
    }
  ]
}
